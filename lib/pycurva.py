# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pycurva
else:
    import _pycurva

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pycurva.delete_SwigPyIterator

    def value(self):
        return _pycurva.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _pycurva.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _pycurva.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _pycurva.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _pycurva.SwigPyIterator_equal(self, x)

    def copy(self):
        return _pycurva.SwigPyIterator_copy(self)

    def next(self):
        return _pycurva.SwigPyIterator_next(self)

    def __next__(self):
        return _pycurva.SwigPyIterator___next__(self)

    def previous(self):
        return _pycurva.SwigPyIterator_previous(self)

    def advance(self, n):
        return _pycurva.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _pycurva.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _pycurva.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _pycurva.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _pycurva.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _pycurva.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _pycurva.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _pycurva:
_pycurva.SwigPyIterator_swigregister(SwigPyIterator)

class dVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pycurva.dVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pycurva.dVector___nonzero__(self)

    def __bool__(self):
        return _pycurva.dVector___bool__(self)

    def __len__(self):
        return _pycurva.dVector___len__(self)

    def __getslice__(self, i, j):
        return _pycurva.dVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pycurva.dVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pycurva.dVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pycurva.dVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pycurva.dVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pycurva.dVector___setitem__(self, *args)

    def pop(self):
        return _pycurva.dVector_pop(self)

    def append(self, x):
        return _pycurva.dVector_append(self, x)

    def empty(self):
        return _pycurva.dVector_empty(self)

    def size(self):
        return _pycurva.dVector_size(self)

    def swap(self, v):
        return _pycurva.dVector_swap(self, v)

    def begin(self):
        return _pycurva.dVector_begin(self)

    def end(self):
        return _pycurva.dVector_end(self)

    def rbegin(self):
        return _pycurva.dVector_rbegin(self)

    def rend(self):
        return _pycurva.dVector_rend(self)

    def clear(self):
        return _pycurva.dVector_clear(self)

    def get_allocator(self):
        return _pycurva.dVector_get_allocator(self)

    def pop_back(self):
        return _pycurva.dVector_pop_back(self)

    def erase(self, *args):
        return _pycurva.dVector_erase(self, *args)

    def __init__(self, *args):
        _pycurva.dVector_swiginit(self, _pycurva.new_dVector(*args))

    def push_back(self, x):
        return _pycurva.dVector_push_back(self, x)

    def front(self):
        return _pycurva.dVector_front(self)

    def back(self):
        return _pycurva.dVector_back(self)

    def assign(self, n, x):
        return _pycurva.dVector_assign(self, n, x)

    def resize(self, *args):
        return _pycurva.dVector_resize(self, *args)

    def insert(self, *args):
        return _pycurva.dVector_insert(self, *args)

    def reserve(self, n):
        return _pycurva.dVector_reserve(self, n)

    def capacity(self):
        return _pycurva.dVector_capacity(self)
    __swig_destroy__ = _pycurva.delete_dVector

# Register dVector in _pycurva:
_pycurva.dVector_swigregister(dVector)

class ddVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pycurva.ddVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pycurva.ddVector___nonzero__(self)

    def __bool__(self):
        return _pycurva.ddVector___bool__(self)

    def __len__(self):
        return _pycurva.ddVector___len__(self)

    def __getslice__(self, i, j):
        return _pycurva.ddVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pycurva.ddVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pycurva.ddVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pycurva.ddVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pycurva.ddVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pycurva.ddVector___setitem__(self, *args)

    def pop(self):
        return _pycurva.ddVector_pop(self)

    def append(self, x):
        return _pycurva.ddVector_append(self, x)

    def empty(self):
        return _pycurva.ddVector_empty(self)

    def size(self):
        return _pycurva.ddVector_size(self)

    def swap(self, v):
        return _pycurva.ddVector_swap(self, v)

    def begin(self):
        return _pycurva.ddVector_begin(self)

    def end(self):
        return _pycurva.ddVector_end(self)

    def rbegin(self):
        return _pycurva.ddVector_rbegin(self)

    def rend(self):
        return _pycurva.ddVector_rend(self)

    def clear(self):
        return _pycurva.ddVector_clear(self)

    def get_allocator(self):
        return _pycurva.ddVector_get_allocator(self)

    def pop_back(self):
        return _pycurva.ddVector_pop_back(self)

    def erase(self, *args):
        return _pycurva.ddVector_erase(self, *args)

    def __init__(self, *args):
        _pycurva.ddVector_swiginit(self, _pycurva.new_ddVector(*args))

    def push_back(self, x):
        return _pycurva.ddVector_push_back(self, x)

    def front(self):
        return _pycurva.ddVector_front(self)

    def back(self):
        return _pycurva.ddVector_back(self)

    def assign(self, n, x):
        return _pycurva.ddVector_assign(self, n, x)

    def resize(self, *args):
        return _pycurva.ddVector_resize(self, *args)

    def insert(self, *args):
        return _pycurva.ddVector_insert(self, *args)

    def reserve(self, n):
        return _pycurva.ddVector_reserve(self, n)

    def capacity(self):
        return _pycurva.ddVector_capacity(self)
    __swig_destroy__ = _pycurva.delete_ddVector

# Register ddVector in _pycurva:
_pycurva.ddVector_swigregister(ddVector)

class iVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pycurva.iVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pycurva.iVector___nonzero__(self)

    def __bool__(self):
        return _pycurva.iVector___bool__(self)

    def __len__(self):
        return _pycurva.iVector___len__(self)

    def __getslice__(self, i, j):
        return _pycurva.iVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pycurva.iVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pycurva.iVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pycurva.iVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pycurva.iVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pycurva.iVector___setitem__(self, *args)

    def pop(self):
        return _pycurva.iVector_pop(self)

    def append(self, x):
        return _pycurva.iVector_append(self, x)

    def empty(self):
        return _pycurva.iVector_empty(self)

    def size(self):
        return _pycurva.iVector_size(self)

    def swap(self, v):
        return _pycurva.iVector_swap(self, v)

    def begin(self):
        return _pycurva.iVector_begin(self)

    def end(self):
        return _pycurva.iVector_end(self)

    def rbegin(self):
        return _pycurva.iVector_rbegin(self)

    def rend(self):
        return _pycurva.iVector_rend(self)

    def clear(self):
        return _pycurva.iVector_clear(self)

    def get_allocator(self):
        return _pycurva.iVector_get_allocator(self)

    def pop_back(self):
        return _pycurva.iVector_pop_back(self)

    def erase(self, *args):
        return _pycurva.iVector_erase(self, *args)

    def __init__(self, *args):
        _pycurva.iVector_swiginit(self, _pycurva.new_iVector(*args))

    def push_back(self, x):
        return _pycurva.iVector_push_back(self, x)

    def front(self):
        return _pycurva.iVector_front(self)

    def back(self):
        return _pycurva.iVector_back(self)

    def assign(self, n, x):
        return _pycurva.iVector_assign(self, n, x)

    def resize(self, *args):
        return _pycurva.iVector_resize(self, *args)

    def insert(self, *args):
        return _pycurva.iVector_insert(self, *args)

    def reserve(self, n):
        return _pycurva.iVector_reserve(self, n)

    def capacity(self):
        return _pycurva.iVector_capacity(self)
    __swig_destroy__ = _pycurva.delete_iVector

# Register iVector in _pycurva:
_pycurva.iVector_swigregister(iVector)

class StopNodeIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycurva.StopNodeIterator_swiginit(self, _pycurva.new_StopNodeIterator())
    __swig_destroy__ = _pycurva.delete_StopNodeIterator

# Register StopNodeIterator in _pycurva:
_pycurva.StopNodeIterator_swigregister(StopNodeIterator)

class NodeIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _cur, _end):
        _pycurva.NodeIterator_swiginit(self, _pycurva.new_NodeIterator(_cur, _end))

    def __iter__(self):
        return _pycurva.NodeIterator___iter__(self)
    cur = property(_pycurva.NodeIterator_cur_get, _pycurva.NodeIterator_cur_set)
    end = property(_pycurva.NodeIterator_end_get, _pycurva.NodeIterator_end_set)

    def __next__(self):
        return _pycurva.NodeIterator___next__(self)
    __swig_destroy__ = _pycurva.delete_NodeIterator

# Register NodeIterator in _pycurva:
_pycurva.NodeIterator_swigregister(NodeIterator)

class StopAtomsIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycurva.StopAtomsIterator_swiginit(self, _pycurva.new_StopAtomsIterator())
    __swig_destroy__ = _pycurva.delete_StopAtomsIterator

# Register StopAtomsIterator in _pycurva:
_pycurva.StopAtomsIterator_swigregister(StopAtomsIterator)

class AtomsIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _cur, _end):
        _pycurva.AtomsIterator_swiginit(self, _pycurva.new_AtomsIterator(_cur, _end))

    def __iter__(self):
        return _pycurva.AtomsIterator___iter__(self)
    cur = property(_pycurva.AtomsIterator_cur_get, _pycurva.AtomsIterator_cur_set)
    end = property(_pycurva.AtomsIterator_end_get, _pycurva.AtomsIterator_end_set)

    def __next__(self):
        return _pycurva.AtomsIterator___next__(self)
    __swig_destroy__ = _pycurva.delete_AtomsIterator

# Register AtomsIterator in _pycurva:
_pycurva.AtomsIterator_swigregister(AtomsIterator)

class StopNodesIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycurva.StopNodesIterator_swiginit(self, _pycurva.new_StopNodesIterator())
    __swig_destroy__ = _pycurva.delete_StopNodesIterator

# Register StopNodesIterator in _pycurva:
_pycurva.StopNodesIterator_swigregister(StopNodesIterator)

class NodesIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _cur, _end):
        _pycurva.NodesIterator_swiginit(self, _pycurva.new_NodesIterator(_cur, _end))

    def __iter__(self):
        return _pycurva.NodesIterator___iter__(self)
    cur = property(_pycurva.NodesIterator_cur_get, _pycurva.NodesIterator_cur_set)
    end = property(_pycurva.NodesIterator_end_get, _pycurva.NodesIterator_end_set)

    def __next__(self):
        return _pycurva.NodesIterator___next__(self)
    __swig_destroy__ = _pycurva.delete_NodesIterator

# Register NodesIterator in _pycurva:
_pycurva.NodesIterator_swigregister(NodesIterator)

class dStopCurvaVectorIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycurva.dStopCurvaVectorIterator_swiginit(self, _pycurva.new_dStopCurvaVectorIterator())
    __swig_destroy__ = _pycurva.delete_dStopCurvaVectorIterator

# Register dStopCurvaVectorIterator in _pycurva:
_pycurva.dStopCurvaVectorIterator_swigregister(dStopCurvaVectorIterator)

class dCurvaVectorIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _cur, _end):
        _pycurva.dCurvaVectorIterator_swiginit(self, _pycurva.new_dCurvaVectorIterator(_cur, _end))

    def __iter__(self):
        return _pycurva.dCurvaVectorIterator___iter__(self)
    cur = property(_pycurva.dCurvaVectorIterator_cur_get, _pycurva.dCurvaVectorIterator_cur_set)
    end = property(_pycurva.dCurvaVectorIterator_end_get, _pycurva.dCurvaVectorIterator_end_set)

    def __next__(self):
        return _pycurva.dCurvaVectorIterator___next__(self)
    __swig_destroy__ = _pycurva.delete_dCurvaVectorIterator

# Register dCurvaVectorIterator in _pycurva:
_pycurva.dCurvaVectorIterator_swigregister(dCurvaVectorIterator)

class iStopCurvaVectorIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycurva.iStopCurvaVectorIterator_swiginit(self, _pycurva.new_iStopCurvaVectorIterator())
    __swig_destroy__ = _pycurva.delete_iStopCurvaVectorIterator

# Register iStopCurvaVectorIterator in _pycurva:
_pycurva.iStopCurvaVectorIterator_swigregister(iStopCurvaVectorIterator)

class iCurvaVectorIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _cur, _end):
        _pycurva.iCurvaVectorIterator_swiginit(self, _pycurva.new_iCurvaVectorIterator(_cur, _end))

    def __iter__(self):
        return _pycurva.iCurvaVectorIterator___iter__(self)
    cur = property(_pycurva.iCurvaVectorIterator_cur_get, _pycurva.iCurvaVectorIterator_cur_set)
    end = property(_pycurva.iCurvaVectorIterator_end_get, _pycurva.iCurvaVectorIterator_end_set)

    def __next__(self):
        return _pycurva.iCurvaVectorIterator___next__(self)
    __swig_destroy__ = _pycurva.delete_iCurvaVectorIterator

# Register iCurvaVectorIterator in _pycurva:
_pycurva.iCurvaVectorIterator_swigregister(iCurvaVectorIterator)

class dStopCurvaMatrixIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycurva.dStopCurvaMatrixIterator_swiginit(self, _pycurva.new_dStopCurvaMatrixIterator())
    __swig_destroy__ = _pycurva.delete_dStopCurvaMatrixIterator

# Register dStopCurvaMatrixIterator in _pycurva:
_pycurva.dStopCurvaMatrixIterator_swigregister(dStopCurvaMatrixIterator)

class dCurvaMatrixIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _cur, _end, curvaMatrix_):
        _pycurva.dCurvaMatrixIterator_swiginit(self, _pycurva.new_dCurvaMatrixIterator(_cur, _end, curvaMatrix_))

    def __iter__(self):
        return _pycurva.dCurvaMatrixIterator___iter__(self)
    cur = property(_pycurva.dCurvaMatrixIterator_cur_get, _pycurva.dCurvaMatrixIterator_cur_set)
    end = property(_pycurva.dCurvaMatrixIterator_end_get, _pycurva.dCurvaMatrixIterator_end_set)
    curvaMatrix = property(_pycurva.dCurvaMatrixIterator_curvaMatrix_get, _pycurva.dCurvaMatrixIterator_curvaMatrix_set)

    def __next__(self):
        return _pycurva.dCurvaMatrixIterator___next__(self)
    __swig_destroy__ = _pycurva.delete_dCurvaMatrixIterator

# Register dCurvaMatrixIterator in _pycurva:
_pycurva.dCurvaMatrixIterator_swigregister(dCurvaMatrixIterator)

class iStopCurvaMatrixIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycurva.iStopCurvaMatrixIterator_swiginit(self, _pycurva.new_iStopCurvaMatrixIterator())
    __swig_destroy__ = _pycurva.delete_iStopCurvaMatrixIterator

# Register iStopCurvaMatrixIterator in _pycurva:
_pycurva.iStopCurvaMatrixIterator_swigregister(iStopCurvaMatrixIterator)

class iCurvaMatrixIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _cur, _end, curvaMatrix_):
        _pycurva.iCurvaMatrixIterator_swiginit(self, _pycurva.new_iCurvaMatrixIterator(_cur, _end, curvaMatrix_))

    def __iter__(self):
        return _pycurva.iCurvaMatrixIterator___iter__(self)
    cur = property(_pycurva.iCurvaMatrixIterator_cur_get, _pycurva.iCurvaMatrixIterator_cur_set)
    end = property(_pycurva.iCurvaMatrixIterator_end_get, _pycurva.iCurvaMatrixIterator_end_set)
    curvaMatrix = property(_pycurva.iCurvaMatrixIterator_curvaMatrix_get, _pycurva.iCurvaMatrixIterator_curvaMatrix_set)

    def __next__(self):
        return _pycurva.iCurvaMatrixIterator___next__(self)
    __swig_destroy__ = _pycurva.delete_iCurvaMatrixIterator

# Register iCurvaMatrixIterator in _pycurva:
_pycurva.iCurvaMatrixIterator_swigregister(iCurvaMatrixIterator)


def parseDcd(fname, coordinates, firstFrame=0, lastFrame=-1):
    return _pycurva.parseDcd(fname, coordinates, firstFrame, lastFrame)

def parsePdb(fname, atoms):
    return _pycurva.parsePdb(fname, atoms)

def generateNodes(nodes, atoms, coordinates, numWindows):
    return _pycurva.generateNodes(nodes, atoms, coordinates, numWindows)

def mutualInformationConstruct(node, averagePositionMatrix, windowIndex, windowSize):
    return _pycurva.mutualInformationConstruct(node, averagePositionMatrix, windowIndex, windowSize)

def generalizedCorrelationTest(mutualInformationMatrix, xfname, yfname, referenceIndex):
    return _pycurva.generalizedCorrelationTest(mutualInformationMatrix, xfname, yfname, referenceIndex)
class MolecularDynamicsCalculation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycurva.MolecularDynamicsCalculation_swiginit(self, _pycurva.new_MolecularDynamicsCalculation())
    __swig_destroy__ = _pycurva.delete_MolecularDynamicsCalculation

    def init(self, dcd, pdb, firstFrame, lastFrame, windowSize, name):
        return _pycurva.MolecularDynamicsCalculation_init(self, dcd, pdb, firstFrame, lastFrame, windowSize, name)

    def atoms(self):
        return _pycurva.MolecularDynamicsCalculation_atoms(self)

    def nodes(self):
        return _pycurva.MolecularDynamicsCalculation_nodes(self)

    def numFrames(self):
        return _pycurva.MolecularDynamicsCalculation_numFrames(self)

    def numAtoms(self):
        return _pycurva.MolecularDynamicsCalculation_numAtoms(self)

    def numNodes(self):
        return _pycurva.MolecularDynamicsCalculation_numNodes(self)

    def dcd(self):
        return _pycurva.MolecularDynamicsCalculation_dcd(self)

    def pdb(self):
        return _pycurva.MolecularDynamicsCalculation_pdb(self)

    def mutualInformationAllocate(self, X):
        return _pycurva.MolecularDynamicsCalculation_mutualInformationAllocate(self, X)

    def generalizedCorrelation(self, referenceIndex, cutoff, k):
        return _pycurva.MolecularDynamicsCalculation_generalizedCorrelation(self, referenceIndex, cutoff, k)

    def generalizedCorrelationMatrix(self):
        return _pycurva.MolecularDynamicsCalculation_generalizedCorrelationMatrix(self)

    def save(self, fname, indent=-1):
        return _pycurva.MolecularDynamicsCalculation_save(self, fname, indent)

    def load(self, fname):
        return _pycurva.MolecularDynamicsCalculation_load(self, fname)

# Register MolecularDynamicsCalculation in _pycurva:
_pycurva.MolecularDynamicsCalculation_swigregister(MolecularDynamicsCalculation)

HASH_A = _pycurva.HASH_A
HASH_B = _pycurva.HASH_B
HASH_FIRSTH = _pycurva.HASH_FIRSTH

def setLastFrame(lastFrame, numFrames):
    return _pycurva.setLastFrame(lastFrame, numFrames)

def generateIndicesArray(indicesArray, size):
    return _pycurva.generateIndicesArray(indicesArray, size)

def isRecordAtom(pdbLine):
    return _pycurva.isRecordAtom(pdbLine)

def isEndOfFrame(pdbLine):
    return _pycurva.isEndOfFrame(pdbLine)

def strToDouble(str):
    return _pycurva.strToDouble(str)

def strToInt(str):
    return _pycurva.strToInt(str)

def removeWhiteSpace(str):
    return _pycurva.removeWhiteSpace(str)

def hashString(str):
    return _pycurva.hashString(str)
class Atom(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _pycurva.Atom_swiginit(self, _pycurva.new_Atom(*args))

    def index(self):
        return _pycurva.Atom_index(self)

    def name(self):
        return _pycurva.Atom_name(self)

    def element(self):
        return _pycurva.Atom_element(self)

    def residueName(self):
        return _pycurva.Atom_residueName(self)

    def residueId(self):
        return _pycurva.Atom_residueId(self)

    def chainId(self):
        return _pycurva.Atom_chainId(self)

    def segmentId(self):
        return _pycurva.Atom_segmentId(self)

    def temperatureFactor(self):
        return _pycurva.Atom_temperatureFactor(self)

    def occupancy(self):
        return _pycurva.Atom_occupancy(self)

    def serial(self):
        return _pycurva.Atom_serial(self)

    def tag(self):
        return _pycurva.Atom_tag(self)

    def x(self, coordinates, frameIndex):
        return _pycurva.Atom_x(self, coordinates, frameIndex)

    def y(self, coordinates, frameIndex):
        return _pycurva.Atom_y(self, coordinates, frameIndex)

    def z(self, coordinates, frameIndex):
        return _pycurva.Atom_z(self, coordinates, frameIndex)

    def mass(self):
        return _pycurva.Atom_mass(self)

    def hash(self):
        return _pycurva.Atom_hash(self)

    def __repr__(self):
        return _pycurva.Atom___repr__(self)

    def __eq__(self, atom):
        return _pycurva.Atom___eq__(self, atom)

    def __ne__(self, atom):
        return _pycurva.Atom___ne__(self, atom)

    def __hash__(self):
        return _pycurva.Atom___hash__(self)
    __swig_destroy__ = _pycurva.delete_Atom

# Register Atom in _pycurva:
_pycurva.Atom_swigregister(Atom)

class Atoms(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycurva.Atoms_swiginit(self, _pycurva.new_Atoms())

    def addAtom(self, atom):
        return _pycurva.Atoms_addAtom(self, atom)

    def numAtoms(self):
        return _pycurva.Atoms_numAtoms(self)

    def at(self, atomIndex):
        return _pycurva.Atoms_at(self, atomIndex)

    def __iter__(self):
        return _pycurva.Atoms___iter__(self)

    def __len__(self):
        return _pycurva.Atoms___len__(self)

    def __getitem__(self, atomIndex):
        return _pycurva.Atoms___getitem__(self, atomIndex)
    __swig_destroy__ = _pycurva.delete_Atoms

# Register Atoms in _pycurva:
_pycurva.Atoms_swigregister(Atoms)

class Node(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _pycurva.Node_swiginit(self, _pycurva.new_Node(*args))

    def addAtom(self, atom, coordinates, windowSize):
        return _pycurva.Node_addAtom(self, atom, coordinates, windowSize)

    def centerOfMass(self):
        return _pycurva.Node_centerOfMass(self)

    def averageCenterOfMass(self):
        return _pycurva.Node_averageCenterOfMass(self)

    def tag(self):
        return _pycurva.Node_tag(self)

    def numAtoms(self):
        return _pycurva.Node_numAtoms(self)

    def index(self):
        return _pycurva.Node_index(self)

    def totalMass(self):
        return _pycurva.Node_totalMass(self)

    def serializationDirectory(self, *args):
        return _pycurva.Node_serializationDirectory(self, *args)

    def calculationName(self, *args):
        return _pycurva.Node_calculationName(self, *args)

    def hash(self):
        return _pycurva.Node_hash(self)

    def __iter__(self):
        return _pycurva.Node___iter__(self)

    def __repr__(self):
        return _pycurva.Node___repr__(self)

    def __getitem__(self, nodeAtomIndex):
        return _pycurva.Node___getitem__(self, nodeAtomIndex)

    def __eq__(self, node):
        return _pycurva.Node___eq__(self, node)

    def __ne__(self, node):
        return _pycurva.Node___ne__(self, node)

    def __hash__(self):
        return _pycurva.Node___hash__(self)
    __swig_destroy__ = _pycurva.delete_Node

# Register Node in _pycurva:
_pycurva.Node_swigregister(Node)

class Nodes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycurva.Nodes_swiginit(self, _pycurva.new_Nodes())
    __swig_destroy__ = _pycurva.delete_Nodes

    def init(self, atoms, coordinates, numFrames, numWindows):
        return _pycurva.Nodes_init(self, atoms, coordinates, numFrames, numWindows)

    def numNodes(self):
        return _pycurva.Nodes_numNodes(self)

    def nodeFromAtomIndex(self, atomIndex):
        return _pycurva.Nodes_nodeFromAtomIndex(self, atomIndex)

    def at(self, nodeIndex):
        return _pycurva.Nodes_at(self, nodeIndex)

    def save(self, serializationDirectory, calculationName):
        return _pycurva.Nodes_save(self, serializationDirectory, calculationName)

    def load(self, j, serializationDirectory):
        return _pycurva.Nodes_load(self, j, serializationDirectory)

    def __iter__(self):
        return _pycurva.Nodes___iter__(self)

    def __len__(self):
        return _pycurva.Nodes___len__(self)

    def __getitem__(self, nodeIndex):
        return _pycurva.Nodes___getitem__(self, nodeIndex)

# Register Nodes in _pycurva:
_pycurva.Nodes_swigregister(Nodes)

class Coordinates(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycurva.Coordinates_swiginit(self, _pycurva.new_Coordinates())
    __swig_destroy__ = _pycurva.delete_Coordinates

    def init(self, numAtoms_, numFrames_):
        return _pycurva.Coordinates_init(self, numAtoms_, numFrames_)

    def x(self, index, frame):
        return _pycurva.Coordinates_x(self, index, frame)

    def y(self, index, frame):
        return _pycurva.Coordinates_y(self, index, frame)

    def z(self, index, frame):
        return _pycurva.Coordinates_z(self, index, frame)

    def __call__(self, i, j, k):
        return _pycurva.Coordinates___call__(self, i, j, k)

    def numAtoms(self):
        return _pycurva.Coordinates_numAtoms(self)

    def numFrames(self):
        return _pycurva.Coordinates_numFrames(self)

# Register Coordinates in _pycurva:
_pycurva.Coordinates_swigregister(Coordinates)

class NpyArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pycurva.NpyArray_swiginit(self, _pycurva.new_NpyArray(*args))

    def num_bytes(self):
        return _pycurva.NpyArray_num_bytes(self)
    data_holder = property(_pycurva.NpyArray_data_holder_get, _pycurva.NpyArray_data_holder_set)
    shape = property(_pycurva.NpyArray_shape_get, _pycurva.NpyArray_shape_set)
    word_size = property(_pycurva.NpyArray_word_size_get, _pycurva.NpyArray_word_size_set)
    fortran_order = property(_pycurva.NpyArray_fortran_order_get, _pycurva.NpyArray_fortran_order_set)
    num_vals = property(_pycurva.NpyArray_num_vals_get, _pycurva.NpyArray_num_vals_set)
    __swig_destroy__ = _pycurva.delete_NpyArray

# Register NpyArray in _pycurva:
_pycurva.NpyArray_swigregister(NpyArray)


def BigEndianTest():
    return _pycurva.BigEndianTest()

def map_type(t):
    return _pycurva.map_type(t)

def parse_npy_header(*args):
    return _pycurva.parse_npy_header(*args)

def parse_zip_footer(fp, nrecs, global_header_size, global_header_offset):
    return _pycurva.parse_zip_footer(fp, nrecs, global_header_size, global_header_offset)

def npz_load(*args):
    return _pycurva.npz_load(*args)

def npy_load(fname):
    return _pycurva.npy_load(fname)
class dCurvaVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _pycurva.delete_dCurvaVector

    def init(self, *args):
        return _pycurva.dCurvaVector_init(self, *args)

    def size(self):
        return _pycurva.dCurvaVector_size(self)

    def sortAscending(self):
        return _pycurva.dCurvaVector_sortAscending(self)

    def sortDescending(self):
        return _pycurva.dCurvaVector_sortDescending(self)

    def argsortAscending(self):
        return _pycurva.dCurvaVector_argsortAscending(self)

    def argsortDescending(self):
        return _pycurva.dCurvaVector_argsortDescending(self)

    def sortAscendingAbs(self):
        return _pycurva.dCurvaVector_sortAscendingAbs(self)

    def sortDescendingAbs(self):
        return _pycurva.dCurvaVector_sortDescendingAbs(self)

    def bytes(self):
        return _pycurva.dCurvaVector_bytes(self)

    def argsortAscendingAbs(self):
        return _pycurva.dCurvaVector_argsortAscendingAbs(self)

    def argsortDescendingAbs(self):
        return _pycurva.dCurvaVector_argsortDescendingAbs(self)

    def load(self, fname):
        return _pycurva.dCurvaVector_load(self, fname)

    def save(self, fname):
        return _pycurva.dCurvaVector_save(self, fname)

    def at(self, index):
        return _pycurva.dCurvaVector_at(self, index)

    def toNumpy(self):
        return _pycurva.dCurvaVector_toNumpy(self)

    def __getitem__(self, index):
        return _pycurva.dCurvaVector___getitem__(self, index)

    def __len__(self):
        return _pycurva.dCurvaVector___len__(self)

    def __repr__(self):
        return _pycurva.dCurvaVector___repr__(self)

    def __iter__(self):
        return _pycurva.dCurvaVector___iter__(self)

    def __init__(self):
        _pycurva.dCurvaVector_swiginit(self, _pycurva.new_dCurvaVector())

# Register dCurvaVector in _pycurva:
_pycurva.dCurvaVector_swigregister(dCurvaVector)

class dCurvaMatrix(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycurva.dCurvaMatrix_swiginit(self, _pycurva.new_dCurvaMatrix())
    __swig_destroy__ = _pycurva.delete_dCurvaMatrix

    def transposeHost(self):
        return _pycurva.dCurvaMatrix_transposeHost(self)

    def transpose(self):
        return _pycurva.dCurvaMatrix_transpose(self)

    def transposeDevice(self):
        return _pycurva.dCurvaMatrix_transposeDevice(self)

    def allocate(self):
        return _pycurva.dCurvaMatrix_allocate(self)

    def deallocate(self):
        return _pycurva.dCurvaMatrix_deallocate(self)

    def device(self):
        return _pycurva.dCurvaMatrix_device(self)

    def host(self):
        return _pycurva.dCurvaMatrix_host(self)

    def toDevice(self):
        return _pycurva.dCurvaMatrix_toDevice(self)

    def toHost(self):
        return _pycurva.dCurvaMatrix_toHost(self)

    def m(self):
        return _pycurva.dCurvaMatrix_m(self)

    def n(self):
        return _pycurva.dCurvaMatrix_n(self)

    def bytes(self):
        return _pycurva.dCurvaMatrix_bytes(self)

    def rowIndicesBegin(self):
        return _pycurva.dCurvaMatrix_rowIndicesBegin(self)

    def rowIndicesEnd(self):
        return _pycurva.dCurvaMatrix_rowIndicesEnd(self)

    def save(self, fname):
        return _pycurva.dCurvaMatrix_save(self, fname)

    def load(self, fname):
        return _pycurva.dCurvaMatrix_load(self, fname)

    def __call__(self, i, j):
        return _pycurva.dCurvaMatrix___call__(self, i, j)

    def copy(self, curvaMatrix):
        return _pycurva.dCurvaMatrix_copy(self, curvaMatrix)

    def copyDevice(self, curvaMatrix):
        return _pycurva.dCurvaMatrix_copyDevice(self, curvaMatrix)

    def init(self, *args):
        return _pycurva.dCurvaMatrix_init(self, *args)

    def fromNumpy(self, NUMPY_ARRAY):
        return _pycurva.dCurvaMatrix_fromNumpy(self, NUMPY_ARRAY)

    def toNumpy(self):
        return _pycurva.dCurvaMatrix_toNumpy(self)

    def __len__(self):
        return _pycurva.dCurvaMatrix___len__(self)

    def at(self, i, j):
        return _pycurva.dCurvaMatrix_at(self, i, j)

    def __getitem__(self, rowIndex):
        return _pycurva.dCurvaMatrix___getitem__(self, rowIndex)

    def __iter__(self):
        return _pycurva.dCurvaMatrix___iter__(self)

# Register dCurvaMatrix in _pycurva:
_pycurva.dCurvaMatrix_swigregister(dCurvaMatrix)

class iCurvaVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __swig_destroy__ = _pycurva.delete_iCurvaVector

    def init(self, *args):
        return _pycurva.iCurvaVector_init(self, *args)

    def size(self):
        return _pycurva.iCurvaVector_size(self)

    def sortAscending(self):
        return _pycurva.iCurvaVector_sortAscending(self)

    def sortDescending(self):
        return _pycurva.iCurvaVector_sortDescending(self)

    def argsortAscending(self):
        return _pycurva.iCurvaVector_argsortAscending(self)

    def argsortDescending(self):
        return _pycurva.iCurvaVector_argsortDescending(self)

    def sortAscendingAbs(self):
        return _pycurva.iCurvaVector_sortAscendingAbs(self)

    def sortDescendingAbs(self):
        return _pycurva.iCurvaVector_sortDescendingAbs(self)

    def bytes(self):
        return _pycurva.iCurvaVector_bytes(self)

    def argsortAscendingAbs(self):
        return _pycurva.iCurvaVector_argsortAscendingAbs(self)

    def argsortDescendingAbs(self):
        return _pycurva.iCurvaVector_argsortDescendingAbs(self)

    def load(self, fname):
        return _pycurva.iCurvaVector_load(self, fname)

    def save(self, fname):
        return _pycurva.iCurvaVector_save(self, fname)

    def at(self, index):
        return _pycurva.iCurvaVector_at(self, index)

    def toNumpy(self, NUMPY_ARRAY, NUMPY_ARRAY_DIM1):
        return _pycurva.iCurvaVector_toNumpy(self, NUMPY_ARRAY, NUMPY_ARRAY_DIM1)

    def __getitem__(self, index):
        return _pycurva.iCurvaVector___getitem__(self, index)

    def __len__(self):
        return _pycurva.iCurvaVector___len__(self)

    def __repr__(self):
        return _pycurva.iCurvaVector___repr__(self)

    def __iter__(self):
        return _pycurva.iCurvaVector___iter__(self)

    def __init__(self):
        _pycurva.iCurvaVector_swiginit(self, _pycurva.new_iCurvaVector())

# Register iCurvaVector in _pycurva:
_pycurva.iCurvaVector_swigregister(iCurvaVector)

class iCurvaMatrix(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pycurva.iCurvaMatrix_swiginit(self, _pycurva.new_iCurvaMatrix())
    __swig_destroy__ = _pycurva.delete_iCurvaMatrix

    def transposeHost(self):
        return _pycurva.iCurvaMatrix_transposeHost(self)

    def transpose(self):
        return _pycurva.iCurvaMatrix_transpose(self)

    def transposeDevice(self):
        return _pycurva.iCurvaMatrix_transposeDevice(self)

    def allocate(self):
        return _pycurva.iCurvaMatrix_allocate(self)

    def deallocate(self):
        return _pycurva.iCurvaMatrix_deallocate(self)

    def device(self):
        return _pycurva.iCurvaMatrix_device(self)

    def host(self):
        return _pycurva.iCurvaMatrix_host(self)

    def toDevice(self):
        return _pycurva.iCurvaMatrix_toDevice(self)

    def toHost(self):
        return _pycurva.iCurvaMatrix_toHost(self)

    def m(self):
        return _pycurva.iCurvaMatrix_m(self)

    def n(self):
        return _pycurva.iCurvaMatrix_n(self)

    def bytes(self):
        return _pycurva.iCurvaMatrix_bytes(self)

    def rowIndicesBegin(self):
        return _pycurva.iCurvaMatrix_rowIndicesBegin(self)

    def rowIndicesEnd(self):
        return _pycurva.iCurvaMatrix_rowIndicesEnd(self)

    def save(self, fname):
        return _pycurva.iCurvaMatrix_save(self, fname)

    def load(self, fname):
        return _pycurva.iCurvaMatrix_load(self, fname)

    def __call__(self, i, j):
        return _pycurva.iCurvaMatrix___call__(self, i, j)

    def copy(self, curvaMatrix):
        return _pycurva.iCurvaMatrix_copy(self, curvaMatrix)

    def copyDevice(self, curvaMatrix):
        return _pycurva.iCurvaMatrix_copyDevice(self, curvaMatrix)

    def init(self, *args):
        return _pycurva.iCurvaMatrix_init(self, *args)

    def fromNumpy(self, NUMPY_ARRAY, NUMPY_ARRAY_DIM1, NUMPY_ARRAY_DIM2):
        return _pycurva.iCurvaMatrix_fromNumpy(self, NUMPY_ARRAY, NUMPY_ARRAY_DIM1, NUMPY_ARRAY_DIM2)

    def toNumpy(self, NUMPY_ARRAY, NUMPY_ARRAY_DIM1, NUMPY_ARRAY_DIM2):
        return _pycurva.iCurvaMatrix_toNumpy(self, NUMPY_ARRAY, NUMPY_ARRAY_DIM1, NUMPY_ARRAY_DIM2)

    def __len__(self):
        return _pycurva.iCurvaMatrix___len__(self)

    def at(self, i, j):
        return _pycurva.iCurvaMatrix_at(self, i, j)

    def __getitem__(self, rowIndex):
        return _pycurva.iCurvaMatrix___getitem__(self, rowIndex)

    def __iter__(self):
        return _pycurva.iCurvaMatrix___iter__(self)

# Register iCurvaMatrix in _pycurva:
_pycurva.iCurvaMatrix_swigregister(iCurvaMatrix)



