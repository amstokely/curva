/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGTCL
#define SWIGTCL
#endif


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdio.h>
#include <tcl.h>
#include <errno.h>
#include <stdlib.h>
#include <stdarg.h>
#include <ctype.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGINTERN const char*
SWIG_Tcl_ErrorType(int code) {
  const char* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = "MemoryError";
    break;
  case SWIG_IOError:
    type = "IOError";
    break;
  case SWIG_RuntimeError:
    type = "RuntimeError";
    break;
  case SWIG_IndexError:
    type = "IndexError";
    break;
  case SWIG_TypeError:
    type = "TypeError";
    break;
  case SWIG_DivisionByZero:
    type = "ZeroDivisionError";
    break;
  case SWIG_OverflowError:
    type = "OverflowError";
    break;
  case SWIG_SyntaxError:
    type = "SyntaxError";
    break;
  case SWIG_ValueError:
    type = "ValueError";
    break;
  case SWIG_SystemError:
    type = "SystemError";
    break;
  case SWIG_AttributeError:
    type = "AttributeError";
    break;
  default:
    type = "RuntimeError";
  }
  return type;
}


SWIGINTERN void
SWIG_Tcl_SetErrorObj(Tcl_Interp *interp, const char *ctype, Tcl_Obj *obj)
{
  Tcl_ResetResult(interp);
  Tcl_SetObjResult(interp, obj);
  Tcl_SetErrorCode(interp, "SWIG", ctype, NULL);
}

SWIGINTERN void
SWIG_Tcl_SetErrorMsg(Tcl_Interp *interp, const char *ctype, const char *mesg)
{
  Tcl_ResetResult(interp);
  Tcl_SetErrorCode(interp, "SWIG", ctype, NULL);
  Tcl_AppendResult(interp, ctype, " ", mesg, NULL);
  /*
  Tcl_AddErrorInfo(interp, ctype);
  Tcl_AddErrorInfo(interp, " ");
  Tcl_AddErrorInfo(interp, mesg);
  */
}

SWIGINTERNINLINE void
SWIG_Tcl_AddErrorMsg(Tcl_Interp *interp, const char* mesg)
{
  Tcl_AddErrorInfo(interp, mesg);
}



/* -----------------------------------------------------------------------------
 * SWIG API. Portion that goes into the runtime
 * ----------------------------------------------------------------------------- */
#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_TCL_POINTER 4
#define SWIG_TCL_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    const char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

typedef int   (*swig_wrapper)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
typedef int   (*swig_wrapper_func)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
typedef char *(*swig_variable_func)(ClientData, Tcl_Interp *, char *, char *, int);
typedef void  (*swig_delete_func)(ClientData);

typedef struct swig_method {
  const char     *name;
  swig_wrapper   method;
} swig_method;

typedef struct swig_attribute {
  const char     *name;
  swig_wrapper   getmethod;
  swig_wrapper   setmethod;
} swig_attribute;

typedef struct swig_class {
  const char         *name;
  swig_type_info   **type;
  swig_wrapper       constructor;
  void              (*destructor)(void *);
  swig_method        *methods;
  swig_attribute     *attributes;
  struct swig_class **bases;
  const char              **base_names;
  swig_module_info   *module;
  Tcl_HashTable       hashtable;
} swig_class;

typedef struct swig_instance {
  Tcl_Obj       *thisptr;
  void          *thisvalue;
  swig_class   *classptr;
  int            destroy;
  Tcl_Command    cmdtok;
} swig_instance;

/* Structure for command table */
typedef struct {
  const char *name;
  int       (*wrapper)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
  ClientData  clientdata;
} swig_command_info;

/* Structure for variable linking table */
typedef struct {
  const char *name;
  void *addr;
  char * (*get)(ClientData, Tcl_Interp *, char *, char *, int);
  char * (*set)(ClientData, Tcl_Interp *, char *, char *, int);
} swig_var_info;


/* -----------------------------------------------------------------------------*
 *  Install a constant object 
 * -----------------------------------------------------------------------------*/

static Tcl_HashTable   swigconstTable;
static int             swigconstTableinit = 0;

SWIGINTERN void
SWIG_Tcl_SetConstantObj(Tcl_Interp *interp, const char* name, Tcl_Obj *obj) {
  int newobj;
  Tcl_ObjSetVar2(interp,Tcl_NewStringObj(name,-1), NULL, obj, TCL_GLOBAL_ONLY);
  Tcl_SetHashValue(Tcl_CreateHashEntry(&swigconstTable, name, &newobj), (ClientData) obj);
}

SWIGINTERN Tcl_Obj *
SWIG_Tcl_GetConstantObj(const char *key) {
  Tcl_HashEntry *entryPtr;
  if (!swigconstTableinit) return 0;
  entryPtr = Tcl_FindHashEntry(&swigconstTable, key);
  if (entryPtr) {
    return (Tcl_Obj *) Tcl_GetHashValue(entryPtr);
  }
  return 0;
}

#ifdef __cplusplus
}
#endif



/* -----------------------------------------------------------------------------
 * tclrun.swg
 *
 * This file contains the runtime support for Tcl modules and includes
 * code for managing global variables and pointer type checking.
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_ConvertPtr(oc, ptr, ty, flags)             SWIG_Tcl_ConvertPtr(interp, oc, ptr, ty, flags)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Tcl_NewPointerObj(ptr, type, flags)

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Tcl_ConvertPacked(interp, obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Tcl_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_Tcl_ConvertPtr(interp, obj, pptr, type, flags)
#define SWIG_NewInstanceObj(thisvalue, type, flags)     SWIG_Tcl_NewInstanceObj(interp, thisvalue, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Tcl_ConvertPtr(interp, obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Tcl_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Tcl_ConvertPacked(interp,obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Tcl_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Tcl_GetModule((Tcl_Interp *) (clientdata))	     
#define SWIG_SetModule(clientdata, pointer)          	SWIG_Tcl_SetModule((Tcl_Interp *) (clientdata), pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Tcl_ErrorType(code)                                      
#define SWIG_Error(code, msg)            		SWIG_Tcl_SetErrorMsg(interp, SWIG_Tcl_ErrorType(code), msg)
#define SWIG_fail                        		goto fail						    


/* Tcl-specific SWIG API */

#define SWIG_Acquire(ptr)                               SWIG_Tcl_Acquire(ptr)                                     
#define SWIG_MethodCommand                           	SWIG_Tcl_MethodCommand				       
#define SWIG_Disown(ptr)                             	SWIG_Tcl_Disown(ptr)				       
#define SWIG_ConvertPtrFromString(c, ptr, ty, flags) 	SWIG_Tcl_ConvertPtrFromString(interp, c, ptr, ty, flags)  
#define SWIG_MakePtr(c, ptr, ty, flags)              	SWIG_Tcl_MakePtr(c, ptr, ty, flags)		       
#define SWIG_PointerTypeFromString(c)                	SWIG_Tcl_PointerTypeFromString(c)			       
#define SWIG_GetArgs                                 	SWIG_Tcl_GetArgs					       
#define SWIG_GetConstantObj(key)                     	SWIG_Tcl_GetConstantObj(key)			       
#define SWIG_ObjectConstructor                       	SWIG_Tcl_ObjectConstructor				       
#define SWIG_Thisown(ptr)                            	SWIG_Tcl_Thisown(ptr)				       
#define SWIG_ObjectDelete                            	SWIG_Tcl_ObjectDelete				       


#define SWIG_TCL_DECL_ARGS_2(arg1, arg2)                (Tcl_Interp *interp SWIGUNUSED, arg1, arg2)
#define SWIG_TCL_CALL_ARGS_2(arg1, arg2)                (interp, arg1, arg2)
/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_GetConstant        SWIG_GetConstantObj
#define SWIG_Tcl_GetConstant    SWIG_Tcl_GetConstantObj

#if TCL_MAJOR_VERSION >= 8 && TCL_MINOR_VERSION >= 5
#define SWIG_TCL_HASHTABLE_INIT {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#else
#define SWIG_TCL_HASHTABLE_INIT {0}
#endif

#include "assert.h"

#ifdef __cplusplus
extern "C" {
#endif

/* Object support */

SWIGRUNTIME Tcl_HashTable*
SWIG_Tcl_ObjectTable(void) {
  static Tcl_HashTable  swigobjectTable;
  static int            swigobjectTableinit = 0;
  if (!swigobjectTableinit) {
    Tcl_InitHashTable(&swigobjectTable, TCL_ONE_WORD_KEYS);
    swigobjectTableinit = 1;
  }
  return &swigobjectTable;
}

/* Acquire ownership of a pointer */
SWIGRUNTIME void
SWIG_Tcl_Acquire(void *ptr) {
  int newobj;
  Tcl_CreateHashEntry(SWIG_Tcl_ObjectTable(), (char *) ptr, &newobj);
}

SWIGRUNTIME int
SWIG_Tcl_Thisown(void *ptr) {
  if (Tcl_FindHashEntry(SWIG_Tcl_ObjectTable(), (char *) ptr)) {
    return 1;
  }
  return 0;
}

/* Disown a pointer.  Returns 1 if we owned it to begin with */
SWIGRUNTIME int
SWIG_Tcl_Disown(void *ptr) {
  Tcl_HashEntry *entryPtr = Tcl_FindHashEntry(SWIG_Tcl_ObjectTable(), (char *) ptr);
  if (entryPtr) {
    Tcl_DeleteHashEntry(entryPtr);
    return 1;
  }
  return 0;
}

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Tcl_ConvertPtrFromString(Tcl_Interp *interp, const char *c, void **ptr, swig_type_info *ty, int flags) {
  swig_cast_info *tc;
  /* Pointer values must start with leading underscore */
  while (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0)
      return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;

    /* Empty string: not a pointer */
    if (*c == 0) return SWIG_ERROR; 

    /* Hmmm. It could be an object name. */

    /* Check if this is a command at all. Prevents <c> cget -this         */
    /* from being called when c is not a command, firing the unknown proc */
    if (Tcl_VarEval(interp,"info commands ", c, (char *) NULL) == TCL_OK) {
      Tcl_Obj *result = Tcl_GetObjResult(interp);
      if (*(Tcl_GetStringFromObj(result, NULL)) == 0) {
        /* It's not a command, so it can't be a pointer */
        Tcl_ResetResult(interp);
        return SWIG_ERROR;
      }
    } else {
      /* This will only fail if the argument is multiple words. */
      /* Multiple words are also not commands.                  */
      Tcl_ResetResult(interp);
      return SWIG_ERROR;
    }

    /* Check if this is really a SWIG pointer */
    if (Tcl_VarEval(interp,c," cget -this", (char *) NULL) != TCL_OK) {
      Tcl_ResetResult(interp);
      return SWIG_ERROR;
    }

    c = Tcl_GetStringFromObj(Tcl_GetObjResult(interp), NULL);
  }

  c++;
  c = SWIG_UnpackData(c,ptr,sizeof(void *));
  if (ty) {
    tc = c ? SWIG_TypeCheck(c,ty) : 0;
    if (!tc) {
      return SWIG_ERROR;
    }
    if (flags & SWIG_POINTER_DISOWN) {
      SWIG_Disown((void *) *ptr);
    }
    {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,(void *) *ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    }
  }
  return SWIG_OK;
}

/* Convert a pointer value */
SWIGRUNTIMEINLINE int
SWIG_Tcl_ConvertPtr(Tcl_Interp *interp, Tcl_Obj *oc, void **ptr, swig_type_info *ty, int flags) {
  return SWIG_Tcl_ConvertPtrFromString(interp, Tcl_GetStringFromObj(oc,NULL), ptr, ty, flags);
}

/* Convert a pointer value */
SWIGRUNTIME char *
SWIG_Tcl_PointerTypeFromString(char *c) {
  char d;
  /* Pointer values must start with leading underscore. NULL has no type */
  if (*c != '_') {
    return 0;
  }
  c++;
  /* Extract hex value from pointer */
  while ((d = *c)) {
    if (!(((d >= '0') && (d <= '9')) || ((d >= 'a') && (d <= 'f')))) break;
    c++;
  }
  return c;
}

/* Convert a packed pointer value */
SWIGRUNTIME int
SWIG_Tcl_ConvertPacked(Tcl_Interp *SWIGUNUSEDPARM(interp) , Tcl_Obj *obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c;

  if (!obj) goto type_error;
  c = Tcl_GetStringFromObj(obj,NULL);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return SWIG_OK;

 type_error:

  return SWIG_ERROR;
}


/* Take a pointer and convert it to a string */
SWIGRUNTIME void
SWIG_Tcl_MakePtr(char *c, void *ptr, swig_type_info *ty, int SWIGUNUSEDPARM(flags)) {
  if (ptr) {
    *(c++) = '_';
    c = SWIG_PackData(c,&ptr,sizeof(void *));
    strcpy(c,ty->name);
  } else {
    strcpy(c,"NULL");
  }
}

/* Create a new pointer object */
SWIGRUNTIMEINLINE Tcl_Obj *
SWIG_Tcl_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  Tcl_Obj *robj;
  char result[SWIG_BUFFER_SIZE];
  SWIG_MakePtr(result,ptr,type,flags);
  robj = Tcl_NewStringObj(result,-1);
  return robj;
}

SWIGRUNTIME Tcl_Obj *
SWIG_Tcl_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  return Tcl_NewStringObj(result,-1);
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

SWIGRUNTIME swig_module_info * 
SWIG_Tcl_GetModule(Tcl_Interp *interp) {
  const char *data;
  swig_module_info *ret = 0;
  
  /* first check if pointer already created */
  data = Tcl_GetVar(interp, (char *)"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, TCL_GLOBAL_ONLY);
  if (data) {
    SWIG_UnpackData(data, &ret, sizeof(swig_type_info **));
  }

  return ret;
}

SWIGRUNTIME void
SWIG_Tcl_SetModule(Tcl_Interp *interp, swig_module_info *module) {
  char buf[SWIG_BUFFER_SIZE];
  char *data;

  /* create a new pointer */
  data = SWIG_PackData(buf, &module, sizeof(swig_type_info **));
  *data = 0;
  Tcl_SetVar(interp, (char *)"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, buf, TCL_GLOBAL_ONLY);
}

/* -----------------------------------------------------------------------------*
 *  Object auxiliaries
 * -----------------------------------------------------------------------------*/


SWIGRUNTIME void
SWIG_Tcl_ObjectDelete(ClientData clientData) {
  swig_instance *si = (swig_instance *) clientData;
  if (!si) return;
  if (si->destroy && SWIG_Disown(si->thisvalue)) {
    if (si->classptr->destructor) {
      (si->classptr->destructor)(si->thisvalue);
    }
  }
  Tcl_DecrRefCount(si->thisptr);
  free(si);
}

/* Function to invoke object methods given an instance */
SWIGRUNTIME int
SWIG_Tcl_MethodCommand(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  char *method,   *attrname;
  swig_instance   *inst = (swig_instance *) clientData;
  swig_method     *meth;
  swig_attribute  *attr;
  Tcl_Obj         *oldarg;
  Tcl_Obj         **objv;
  int              rcode;
  swig_class      *cls;
  swig_class      *cls_stack[64];
  int              cls_stack_bi[64];
  int              cls_stack_top = 0;
  int              numconf = 2;
  int              bi;

  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
    return TCL_ERROR;
  }
  method = Tcl_GetStringFromObj(objv[1],NULL);
  if (strcmp(method,"-acquire") == 0) {
    inst->destroy = 1;
    SWIG_Acquire(inst->thisvalue);
    return TCL_OK;
  }
  if (strcmp(method,"-disown") == 0) {
    if (inst->destroy) {
      SWIG_Disown(inst->thisvalue);
    }
    inst->destroy = 0;
    return TCL_OK;
  }
  if (strcmp(method,"-delete") == 0) {
    Tcl_DeleteCommandFromToken(interp,inst->cmdtok);
    return TCL_OK;
  }
  cls_stack[cls_stack_top] = inst->classptr;
  cls_stack_bi[cls_stack_top] = -1;
  while (1) {
    Tcl_HashEntry* hashentry;
    bi = cls_stack_bi[cls_stack_top];
    cls = cls_stack[cls_stack_top];
    if (bi != -1) {
      if (!cls->bases[bi] && cls->base_names[bi]) {
        /* lookup and cache the base class */
	swig_type_info *info = SWIG_TypeQueryModule(cls->module, cls->module, cls->base_names[bi]);
	if (info) cls->bases[bi] = (swig_class *) info->clientdata;
      }
      cls = cls->bases[bi];
      if (cls) {
        cls_stack_bi[cls_stack_top]++;
        cls_stack_top++;
        cls_stack[cls_stack_top] = cls;
        cls_stack_bi[cls_stack_top] = -1;
        continue;
      }
    }
    if (!cls) {
      cls_stack_top--;
      if (cls_stack_top < 0) break;
      else continue;
    }
    cls_stack_bi[cls_stack_top]++;

    hashentry = Tcl_FindHashEntry(&(cls->hashtable), method);
    if (hashentry) {
        ClientData cd = Tcl_GetHashValue(hashentry);
        swig_wrapper method_wrapper = (swig_wrapper)cd;
        oldarg = objv[1];
        objv[1] = inst->thisptr;
        Tcl_IncrRefCount(inst->thisptr);
        rcode = (method_wrapper)(clientData,interp,objc,objv);
        objv[1] = oldarg;
        Tcl_DecrRefCount(inst->thisptr);
        return rcode;
    }
    /* Check class methods for a match */
    if (strcmp(method,"cget") == 0) {
      if (objc < 3) {
        Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
        return TCL_ERROR;
      }
      attrname = Tcl_GetStringFromObj(objv[2],NULL);
      attr = cls->attributes;
      while (attr && attr->name) {
        if ((strcmp(attr->name, attrname) == 0) && (attr->getmethod)) {
          oldarg = objv[1];
          objv[1] = inst->thisptr;
          Tcl_IncrRefCount(inst->thisptr);
          rcode = (*attr->getmethod)(clientData,interp,2, objv);
          objv[1] = oldarg;
          Tcl_DecrRefCount(inst->thisptr);
          return rcode;
        }
        attr++;
      }
      if (strcmp(attrname, "-this") == 0) {
        Tcl_SetObjResult(interp, Tcl_DuplicateObj(inst->thisptr));
        return TCL_OK;
      }
      if (strcmp(attrname, "-thisown") == 0) {
        if (SWIG_Thisown(inst->thisvalue)) {
          Tcl_SetResult(interp,(char*)"1",TCL_STATIC);
        } else {
          Tcl_SetResult(interp,(char*)"0",TCL_STATIC);
        }
        return TCL_OK;
      }
    } else if (strcmp(method, "configure") == 0) {
      int i;
      if (objc < 4) {
        Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
        return TCL_ERROR;
      }
      i = 2;
      while (i < objc) {
        attrname = Tcl_GetStringFromObj(objv[i],NULL);
        attr = cls->attributes;
        while (attr && attr->name) {
          if ((strcmp(attr->name, attrname) == 0) && (attr->setmethod)) {
            oldarg = objv[i];
            objv[i] = inst->thisptr;
            Tcl_IncrRefCount(inst->thisptr);
            rcode = (*attr->setmethod)(clientData,interp,3, &objv[i-1]);
            objv[i] = oldarg;
            Tcl_DecrRefCount(inst->thisptr);
            if (rcode != TCL_OK) return rcode;
            numconf += 2;
          }
          attr++;
        }
        i+=2;
      }
    }
  }
  if (strcmp(method,"configure") == 0) {
    if (numconf >= objc) {
      return TCL_OK;
    } else {
      Tcl_SetResult(interp,(char *) "Invalid attribute name.", TCL_STATIC);
      return TCL_ERROR;
    }
  }
  if (strcmp(method,"cget") == 0) {
    Tcl_SetResult(interp,(char *) "Invalid attribute name.", TCL_STATIC);
    return TCL_ERROR;
  }
  Tcl_SetResult(interp, (char *) "Invalid method. Must be one of: configure cget -acquire -disown -delete", TCL_STATIC);
  cls = inst->classptr;
  bi = 0;
  while (cls) {
    meth = cls->methods;
    while (meth && meth->name) {
      char *cr = (char *) Tcl_GetStringResult(interp);
      size_t meth_len = strlen(meth->name);
      char* where = strchr(cr,':');
      while(where) {
        where = strstr(where, meth->name);
        if(where) {
          if(where[-1] == ' ' && (where[meth_len] == ' ' || where[meth_len]==0)) {
            break;
          } else {
            where++;
          }
        }
      }

      if (!where)
        Tcl_AppendElement(interp, (char *) meth->name);
      meth++;
    }
    cls = inst->classptr->bases[bi++];
  }
  return TCL_ERROR;
}

/* This function takes the current result and turns it into an object command */
SWIGRUNTIME Tcl_Obj *
SWIG_Tcl_NewInstanceObj(Tcl_Interp *interp, void *thisvalue, swig_type_info *type, int flags) {
  Tcl_Obj *robj = SWIG_NewPointerObj(thisvalue, type,0);
  /* Check to see if this pointer belongs to a class or not */
  if (thisvalue && (type->clientdata) && (interp)) {
    Tcl_CmdInfo    ci;
    char          *name;
    name = Tcl_GetStringFromObj(robj,NULL);
    if (!Tcl_GetCommandInfo(interp,name, &ci) || (flags)) {
      swig_instance *newinst = (swig_instance *) malloc(sizeof(swig_instance));
      newinst->thisptr = Tcl_DuplicateObj(robj);
      Tcl_IncrRefCount(newinst->thisptr);
      newinst->thisvalue = thisvalue;
      newinst->classptr = (swig_class *) type->clientdata;
      newinst->destroy = flags;
      newinst->cmdtok = Tcl_CreateObjCommand(interp, Tcl_GetStringFromObj(robj,NULL), (swig_wrapper_func) SWIG_MethodCommand, (ClientData) newinst, (swig_delete_func) SWIG_ObjectDelete);
      if (flags) {
        SWIG_Acquire(thisvalue);
      }
    }
  }
  return robj;
}

/* Function to create objects */
SWIGRUNTIME int
SWIG_Tcl_ObjectConstructor(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj          *newObj = 0;
  void             *thisvalue = 0;
  swig_instance   *newinst = 0;
  swig_class      *classptr = (swig_class *) clientData;
  swig_wrapper     cons = 0;
  char             *name = 0;
  int               firstarg = 0;
  int               thisarg = 0;
  int               destroy = 1;

  if (!classptr) {
    Tcl_SetResult(interp, (char *) "swig: internal runtime error. No class object defined.", TCL_STATIC);
    return TCL_ERROR;
  }
  cons = classptr->constructor;
  if (objc > 1) {
    char *s = Tcl_GetStringFromObj(objv[1],NULL);
    if (strcmp(s,"-this") == 0) {
      thisarg = 2;
      cons = 0;
    } else if (strcmp(s,"-args") == 0) {
      firstarg = 1;
    } else if (objc == 2) {
      firstarg = 1;
      name = s;
    } else if (objc >= 3) {
      char *s1;
      name = s;
      s1 = Tcl_GetStringFromObj(objv[2],NULL);
      if (strcmp(s1,"-this") == 0) {
	thisarg = 3;
	cons = 0;
      } else {
	firstarg = 1;
      }
    }
  }
  if (cons) {
    int result;
    result = (*cons)(0, interp, objc-firstarg, &objv[firstarg]);
    if (result != TCL_OK) {
      return result;
    }
    newObj = Tcl_DuplicateObj(Tcl_GetObjResult(interp));
    if (!name) name = Tcl_GetStringFromObj(newObj,NULL);
  } else if (thisarg > 0) {
    if (thisarg < objc) {
      destroy = 0;
      newObj = Tcl_DuplicateObj(objv[thisarg]);
      if (!name) name = Tcl_GetStringFromObj(newObj,NULL);
    } else {
      Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
      return TCL_ERROR;
    }
  } else {
    Tcl_SetResult(interp, (char *) "No constructor available.", TCL_STATIC);
    return TCL_ERROR;
  }
  if (SWIG_Tcl_ConvertPtr(interp,newObj, (void **) &thisvalue, *(classptr->type), 0) != SWIG_OK) {
    Tcl_DecrRefCount(newObj);
    return TCL_ERROR;
  }
  newinst = (swig_instance *) malloc(sizeof(swig_instance));
  newinst->thisptr = newObj;
  Tcl_IncrRefCount(newObj);
  newinst->thisvalue = thisvalue;
  newinst->classptr = classptr;
  newinst->destroy = destroy;
  if (destroy) {
    SWIG_Acquire(thisvalue);
  }
  newinst->cmdtok = Tcl_CreateObjCommand(interp,name, (swig_wrapper) SWIG_MethodCommand, (ClientData) newinst, (swig_delete_func) SWIG_ObjectDelete);
  return TCL_OK;
}

/* -----------------------------------------------------------------------------*
 *   Get arguments 
 * -----------------------------------------------------------------------------*/
SWIGRUNTIME int
SWIG_Tcl_GetArgs(Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[], const char *fmt, ...) {
  int        argno = 0, opt = 0;
  long       tempi;
  double     tempd;
  const char *c;
  va_list    ap;
  void      *vptr;
  Tcl_Obj   *obj = 0;
  swig_type_info *ty;

  va_start(ap,fmt);
  for (c = fmt; (*c && (*c != ':') && (*c != ';')); c++,argno++) {
    if (*c == '|') {
      opt = 1;
      c++;
    }
    if (argno >= (objc-1)) {
      if (!opt) {
        Tcl_SetResult(interp, (char *) "Wrong number of arguments ", TCL_STATIC);
        goto argerror;
      } else {
        va_end(ap);
        return TCL_OK;
      }
    }

    vptr = va_arg(ap,void *);
    if (vptr) {
      if (isupper(*c)) {
        obj = SWIG_Tcl_GetConstantObj(Tcl_GetStringFromObj(objv[argno+1],0));
        if (!obj) obj = objv[argno+1];
      } else {
        obj = objv[argno+1];
      }
      switch(*c) {
      case 'i': case 'I':
      case 'l': case 'L':
      case 'h': case 'H':
      case 'b': case 'B':
        if (Tcl_GetLongFromObj(interp,obj,&tempi) != TCL_OK) goto argerror;
        if ((*c == 'i') || (*c == 'I')) *((int *)vptr) = (int)tempi;
        else if ((*c == 'l') || (*c == 'L')) *((long *)vptr) = (long)tempi;
        else if ((*c == 'h') || (*c == 'H')) *((short*)vptr) = (short)tempi;
        else if ((*c == 'b') || (*c == 'B')) *((unsigned char *)vptr) = (unsigned char)tempi;
        break;
      case 'f': case 'F':
      case 'd': case 'D':
        if (Tcl_GetDoubleFromObj(interp,obj,&tempd) != TCL_OK) goto argerror;
        if ((*c == 'f') || (*c == 'F')) *((float *) vptr) = (float)tempd;
        else if ((*c == 'd') || (*c == 'D')) *((double*) vptr) = tempd;
        break;
      case 's': case 'S':
        if (*(c+1) == '#') {
          int *vlptr = (int *) va_arg(ap, void *);
          *((char **) vptr) = Tcl_GetStringFromObj(obj, vlptr);
          c++;
        } else {
          *((char **)vptr) = Tcl_GetStringFromObj(obj,NULL);
        }
        break;
      case 'c': case 'C':
        *((char *)vptr) = *(Tcl_GetStringFromObj(obj,NULL));
        break;
      case 'p': case 'P':
        ty = (swig_type_info *) va_arg(ap, void *);
        if (SWIG_Tcl_ConvertPtr(interp, obj, (void **) vptr, ty, 0) != SWIG_OK) goto argerror;
        break;
      case 'o': case 'O':
        *((Tcl_Obj **)vptr) = objv[argno+1];
        break;
      default:
        break;
      }
    }
  }

  if ((*c != ';') && ((objc-1) > argno)) {
    Tcl_SetResult(interp, (char *) "Wrong # args.", TCL_STATIC);
    goto argerror;
  }
  va_end(ap);
  return TCL_OK;

 argerror:
  {
    char temp[32];
    sprintf(temp,"%d", argno+1);
    c = strchr(fmt,':');
    if (!c) c = strchr(fmt,';');
    if (!c) c = (char *)"";
    Tcl_AppendResult(interp,c," argument ", temp, NULL);
    va_end(ap);
    return TCL_ERROR;
  }
}

#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Atom swig_types[0]
#define SWIGTYPE_p_Atoms swig_types[1]
#define SWIGTYPE_p_Coordinates swig_types[2]
#define SWIGTYPE_p_CurvaMatrixT_double_t swig_types[3]
#define SWIGTYPE_p_CurvaMatrixT_int_t swig_types[4]
#define SWIGTYPE_p_CurvaVectorT_double_t swig_types[5]
#define SWIGTYPE_p_CurvaVectorT_int_t swig_types[6]
#define SWIGTYPE_p_MolecularDynamicsCalculation swig_types[7]
#define SWIGTYPE_p_Node swig_types[8]
#define SWIGTYPE_p_Nodes swig_types[9]
#define SWIGTYPE_p_char swig_types[10]
#define SWIGTYPE_p_difference_type swig_types[11]
#define SWIGTYPE_p_double swig_types[12]
#define SWIGTYPE_p_int swig_types[13]
#define SWIGTYPE_p_nlohmann__json swig_types[14]
#define SWIGTYPE_p_p_double swig_types[15]
#define SWIGTYPE_p_p_int swig_types[16]
#define SWIGTYPE_p_p_std__vectorT_Atom_t swig_types[17]
#define SWIGTYPE_p_p_std__vectorT_CurvaVectorT_double_t_t swig_types[18]
#define SWIGTYPE_p_p_std__vectorT_CurvaVectorT_int_t_t swig_types[19]
#define SWIGTYPE_p_p_std__vectorT_Node_t swig_types[20]
#define SWIGTYPE_p_p_std__vectorT_std__vectorT_double_t_t swig_types[21]
#define SWIGTYPE_p_size_type swig_types[22]
#define SWIGTYPE_p_std__out_of_range swig_types[23]
#define SWIGTYPE_p_std__string swig_types[24]
#define SWIGTYPE_p_std__vectorT_Atom_t swig_types[25]
#define SWIGTYPE_p_std__vectorT_CurvaVectorT_double_t_t swig_types[26]
#define SWIGTYPE_p_std__vectorT_CurvaVectorT_int_t_t swig_types[27]
#define SWIGTYPE_p_std__vectorT_Node_t swig_types[28]
#define SWIGTYPE_p_std__vectorT_double_t swig_types[29]
#define SWIGTYPE_p_std__vectorT_int_t swig_types[30]
#define SWIGTYPE_p_std__vectorT_int_t__iterator swig_types[31]
#define SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t swig_types[32]
#define SWIGTYPE_p_value_type swig_types[33]
#define SWIGTYPE_std__ptrdiff_t swig_types[34]
#define SWIGTYPE_std__size_t swig_types[35]
static swig_type_info *swig_types[37];
static swig_module_info swig_module = {swig_types, 36, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Tclcurva_Init
#define SWIG_name    "tclcurva"
#define SWIG_prefix  ""
#define SWIG_version "0.0"

#define SWIGVERSION 0x040001 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>



#ifdef __cplusplus
extern "C" {
#endif
#ifdef MAC_TCL
#pragma export on
#endif
SWIGEXPORT int SWIG_init(Tcl_Interp *);
#ifdef MAC_TCL
#pragma export off
#endif
#ifdef __cplusplus
}
#endif

/* Compatibility version for TCL stubs */
#ifndef SWIG_TCL_STUBS_VERSION
#define SWIG_TCL_STUBS_VERSION "8.1"
#endif



#include <string>


#include <typeinfo>
#include <stdexcept>


#include <algorithm>


#include <vector>

Tcl_Obj* SwigString_FromString(const std::string &s) {
    return Tcl_NewStringObj(s.data(), (int)s.length());
}

int Tcl_GetBoolFromObj(Tcl_Interp *interp, Tcl_Obj *o, bool *val) {
  int v;
  int res = Tcl_GetBooleanFromObj(interp, o, &v);
  if (res == TCL_OK) {
    *val = v ? true : false;
  }
  return res;  
}
 
int SwigString_AsString(Tcl_Interp *interp, Tcl_Obj *o, std::string *val) {
    int len;
    const char* temp = Tcl_GetStringFromObj(o, &len);
    if (temp == NULL)
        return TCL_ERROR;
    val->assign(temp, len);
    return TCL_OK;
}

// behaviour of this is such as the real Tcl_GetIntFromObj
template <typename Type>
int SwigInt_As(Tcl_Interp *interp, Tcl_Obj *o, Type *val) {
    int temp_val, return_val;
    return_val = Tcl_GetIntFromObj(interp, o, &temp_val);
    *val = (Type) temp_val;
    return return_val;
}

// behaviour of this is such as the real Tcl_GetDoubleFromObj
template <typename Type>
int SwigDouble_As(Tcl_Interp *interp, Tcl_Obj *o, Type *val) {
    int return_val;
    double temp_val;
    return_val = Tcl_GetDoubleFromObj(interp, o, &temp_val);
    *val = (Type) temp_val;
    return return_val;
}



#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long SWIG_TCL_DECL_ARGS_2(Tcl_Obj *obj, unsigned long *val) {
  long v;
  if (Tcl_GetLongFromObj(0,obj, &v) == TCL_OK) {
    if (v >= 0) {
      if (val) *val = (unsigned long) v;
      return SWIG_OK;
    }
    /* If v is negative, then this could be a negative number, or an
       unsigned value which doesn't fit in a signed long, so try to
       get it as a string so we can distinguish these cases. */
  }
  {
    int len = 0;
    const char *nptr = Tcl_GetStringFromObj(obj, &len);
    if (nptr && len > 0) {
      char *endptr;
      unsigned long v;
      if (*nptr == '-') return SWIG_OverflowError;
      errno = 0;
      v = strtoul(nptr, &endptr,0);
      if (nptr[0] == '\0' || *endptr != '\0')
	return SWIG_TypeError;
      if (v == ULONG_MAX && errno == ERANGE) {
	errno = 0;
	return SWIG_OverflowError;
      } else {
	if (*endptr == '\0') {
	  if (val) *val = v;
	  return SWIG_OK;
	}
      }
    }
  }
  
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long SWIG_TCL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_double SWIG_TCL_DECL_ARGS_2(Tcl_Obj *obj, double *val)
{
  double v;
  if (Tcl_GetDoubleFromObj(0, obj, &v) == TCL_OK) {
    if (val) *val = v;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}


SWIGINTERNINLINE Tcl_Obj* 
SWIG_From_long  (long value)
{
  if (((long) INT_MIN <= value) && (value <= (long) INT_MAX)) {
    return Tcl_NewIntObj(static_cast< int >(value));
  } else {
    return Tcl_NewLongObj(value);
  }
}


#include <stdio.h>
#if (defined(_MSC_VER) && (_MSC_VER < 1900)) || defined(__BORLANDC__) || defined(_WATCOM)
# ifndef snprintf
#  define snprintf _snprintf
# endif
#endif


SWIGINTERNINLINE Tcl_Obj* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  if (value < (unsigned long) LONG_MAX) {
    return SWIG_From_long  (static_cast< long >(value));
  } else {
    char temp[256]; 
    sprintf(temp, "%lu", value);
    return Tcl_NewStringObj(temp,-1);
  }
}


SWIGINTERNINLINE Tcl_Obj *
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


  #define SWIG_From_bool   Tcl_NewBooleanObj 

SWIGINTERN double std_vector_Sl_double_Sg__pop(std::vector< double > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                double x = self->back();
                self->pop_back();
                return x;
            }

  #define SWIG_From_double   Tcl_NewDoubleObj 


SWIGINTERN int
SWIG_AsVal_long SWIG_TCL_DECL_ARGS_2(Tcl_Obj *obj, long* val)
{
  long v;
  if (Tcl_GetLongFromObj(0,obj, &v) == TCL_OK) {
    if (val) *val = (long) v;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}

SWIGINTERN double std_vector_Sl_double_Sg__get(std::vector< double > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_double_Sg__set(std::vector< double > *self,int i,double x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< double > std_vector_Sl_std_vector_Sl_double_Sg__Sg__pop(std::vector< std::vector< double > > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                std::vector< double > x = self->back();
                self->pop_back();
                return x;
            }
SWIGINTERN std::vector< double > &std_vector_Sl_std_vector_Sl_double_Sg__Sg__get(std::vector< std::vector< double > > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg__set(std::vector< std::vector< double > > *self,int i,std::vector< double > const &x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN int std_vector_Sl_int_Sg__pop(std::vector< int > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                int x = self->back();
                self->pop_back();
                return x;
            }

SWIGINTERNINLINE Tcl_Obj *
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}

SWIGINTERN int std_vector_Sl_int_Sg__get(std::vector< int > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_int_Sg__set(std::vector< int > *self,int i,int x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }

#include "../include/curva.h"
#include "../include/calculation.h"
#include "../include/atom.h"
#include "../include/node.h"

#include "../include/matrix/curva_matrix.h"
#include "../include/nodes.h"
#include "../include/atoms.h"
#include "../include/matrix/curva_vector.h"
#include "../include/custom_iterators/random_access_iterator.h"
#include "../include/custom_iterators/forward_iterator.h"
#include "../include/custom_iterators/map_value_forward_iterator.h"
#include "../include/coordinates.h"

SWIGINTERN Node std_vector_Sl_Node_Sg__pop(std::vector< Node > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                Node x = self->back();
                self->pop_back();
                return x;
            }
SWIGINTERN Node &std_vector_Sl_Node_Sg__get(std::vector< Node > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_Node_Sg__set(std::vector< Node > *self,int i,Node const &x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN Atom std_vector_Sl_Atom_Sg__pop(std::vector< Atom > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                Atom x = self->back();
                self->pop_back();
                return x;
            }
SWIGINTERN Atom &std_vector_Sl_Atom_Sg__get(std::vector< Atom > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_Atom_Sg__set(std::vector< Atom > *self,int i,Atom const &x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN CurvaVector< double > std_vector_Sl_CurvaVector_Sl_double_Sg__Sg__pop(std::vector< CurvaVector< double > > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                CurvaVector< double > x = self->back();
                self->pop_back();
                return x;
            }
SWIGINTERN CurvaVector< double > &std_vector_Sl_CurvaVector_Sl_double_Sg__Sg__get(std::vector< CurvaVector< double > > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_CurvaVector_Sl_double_Sg__Sg__set(std::vector< CurvaVector< double > > *self,int i,CurvaVector< double > const &x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN CurvaVector< int > std_vector_Sl_CurvaVector_Sl_int_Sg__Sg__pop(std::vector< CurvaVector< int > > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                CurvaVector< int > x = self->back();
                self->pop_back();
                return x;
            }
SWIGINTERN CurvaVector< int > &std_vector_Sl_CurvaVector_Sl_int_Sg__Sg__get(std::vector< CurvaVector< int > > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_CurvaVector_Sl_int_Sg__Sg__set(std::vector< CurvaVector< int > > *self,int i,CurvaVector< int > const &x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }

SWIGINTERN int
SWIG_AsCharPtrAndSize(Tcl_Obj *obj, char** cptr, size_t* psize, int *alloc)
{ 
  int len = 0;
  char *cstr = Tcl_GetStringFromObj(obj, &len);
  if (cstr) {
    if (cptr)  *cptr = cstr;
    if (psize) *psize = len + 1;
    if (alloc) *alloc = SWIG_OLDOBJ;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERNINLINE Tcl_Obj *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  return (size < INT_MAX) ? Tcl_NewStringObj(carray, static_cast< int >(size)) : NULL;
}


SWIGINTERNINLINE Tcl_Obj *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE Tcl_Obj* 
SWIG_From_long_SS_long  (long long value)
{
  if (((long long) LONG_MIN <= value) && (value <= (long long) LONG_MAX)) {
    return SWIG_From_long  (static_cast< long >(value));
  } else {    
    char temp[256]; 
    sprintf(temp, "%lld", value);
    return Tcl_NewStringObj(temp,-1);
  }
}
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE Tcl_Obj* 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  if (value < (unsigned long long) LONG_MAX) {
    return SWIG_From_long_SS_long  (static_cast< long long >(value));
  } else {
    char temp[256]; 
    sprintf(temp, "%llu", value);
    return Tcl_NewStringObj(temp,-1);
  }
}
#endif


SWIGINTERNINLINE Tcl_Obj *
SWIG_From_size_t  (size_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(size_t) <= sizeof(unsigned long long) */
    return SWIG_From_unsigned_SS_long_SS_long  (static_cast< unsigned long long >(value));
  }
#endif
}

SWIGINTERN std::vector< double > CurvaVector_Sl_double_Sg__list(CurvaVector< double > *self){
			std::vector<double> curvaVectorValues(self->size());
			unsigned int i = 0;
			for (auto &val : *self) {
				curvaVectorValues.at(i) = val;
				i++;
			}
			return curvaVectorValues;
		}
SWIGINTERN std::vector< int > CurvaVector_Sl_int_Sg__list(CurvaVector< int > *self){
			std::vector<int> curvaVectorValues(self->size());
			unsigned int i = 0;
			for (auto &val : *self) {
				curvaVectorValues.at(i) = val;
				i++;
			}
			return curvaVectorValues;
		}
SWIGINTERN std::vector< CurvaVector< double > > CurvaMatrix_Sl_double_Sg__list(CurvaMatrix< double > *self){
		std::vector<CurvaVector<double>> curvaVectorVector(self->m());
		for (int i = 0; i < self->m(); i++) {
			CurvaVector<double> curvaVector;
			curvaVector.init(self, i);
			curvaVectorVector.at(i) = curvaVector;
		}
		return curvaVectorVector;
	}
SWIGINTERN std::vector< CurvaVector< int > > CurvaMatrix_Sl_int_Sg__list(CurvaMatrix< int > *self){
		std::vector<CurvaVector<int>> curvaVectorVector(self->m());
		for (int i = 0; i < self->m(); i++) {
			CurvaVector<int> curvaVector;
			curvaVector.init(self, i);
			curvaVectorVector.at(i) = curvaVector;
		}
		return curvaVectorVector;
	}
#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN int
_wrap_new_dVector__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  std::vector< double > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_dVector size ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_dVector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (std::vector< double > *)new std::vector< double >(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_dVector__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< double > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_dVector ") == TCL_ERROR) SWIG_fail;
  result = (std::vector< double > *)new std::vector< double >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_dVector__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  double *arg2 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  std::vector< double > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:new_dVector size value ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_dVector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_dVector" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  result = (std::vector< double > *)new std::vector< double >(arg1,(double const &)*arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_dVector__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< double > *arg1 = 0 ;
  std::vector< double > *v1 ;
  std::vector< double > w1 ;
  std::vector< double > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_dVector other ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    double         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_double_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< double > so it should be a list of double's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< double >();
      for (i = 0; i < nitems; i++) {
        if (Tcl_GetDoubleFromObj(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_dVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_dVector__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_dVector__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    {
      Tcl_Obj **listobjv;
      int       nitems;
      double         temp;
      std::vector< double > *v;
      
      if(SWIG_ConvertPtr(argv[0], (void **) &v, \
          SWIGTYPE_p_std__vectorT_double_t, 0) == 0){
        /* wrapped vector */
        _v = 1;
      } else {
        // It isn't a vector< double > so it should be a list of double's
        if(Tcl_ListObjGetElements(interp, argv[0], 
            &nitems, &listobjv) == TCL_ERROR)
        _v = 0;
        else
        if (nitems == 0)
        _v = 1;
        //check the first value to see if it is of correct type
        if (Tcl_GetDoubleFromObj(interp, listobjv[0], &temp) == TCL_ERROR)
        _v = 0;
        else
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_dVector__SWIG_3(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_dVector__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'new_dVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::vector(unsigned int)\n"
    "    std::vector< double >::vector()\n"
    "    std::vector< double >::vector(unsigned int,double const &)\n"
    "    std::vector< double >::vector(std::vector< double > const &)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_dVector_size(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > *v1 ;
  std::vector< double > w1 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:dVector_size self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    double         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_double_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< double > so it should be a list of double's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< double >();
      for (i = 0; i < nitems; i++) {
        if (Tcl_GetDoubleFromObj(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = (unsigned int)((std::vector< double > const *)arg1)->size();
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_dVector_empty(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > *v1 ;
  std::vector< double > w1 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:dVector_empty self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    double         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_double_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< double > so it should be a list of double's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< double >();
      for (i = 0; i < nitems; i++) {
        if (Tcl_GetDoubleFromObj(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = (bool)((std::vector< double > const *)arg1)->empty();
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_dVector_clear(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:dVector_clear self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dVector_clear" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  (arg1)->clear();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_dVector_push(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:dVector_push self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dVector_push" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dVector_push" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->push_back(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_dVector_pop(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:dVector_pop self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dVector_pop" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  try {
    result = (double)std_vector_Sl_double_Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_dVector_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:dVector_get self i ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dVector_get" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dVector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = (double)std_vector_Sl_double_Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_dVector_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:dVector_set self i x ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dVector_set" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dVector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "dVector_set" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  try {
    std_vector_Sl_double_Sg__set(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_dVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_dVector self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_dVector" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_dVector(void *obj) {
std::vector< double > *arg1 = (std::vector< double > *) obj;
delete arg1;
}
static swig_method swig_std_vector_Sl_double_Sg__methods[] = {
    {"size", _wrap_dVector_size}, 
    {"empty", _wrap_dVector_empty}, 
    {"clear", _wrap_dVector_clear}, 
    {"push", _wrap_dVector_push}, 
    {"pop", _wrap_dVector_pop}, 
    {"get", _wrap_dVector_get}, 
    {"set", _wrap_dVector_set}, 
    {0,0}
};
static swig_attribute swig_std_vector_Sl_double_Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_std_vector_Sl_double_Sg__bases[] = {0};
static const char * swig_std_vector_Sl_double_Sg__base_names[] = {0};
static swig_class _wrap_class_std_vector_Sl_double_Sg_ = { "dVector", &SWIGTYPE_p_std__vectorT_double_t,_wrap_new_dVector, swig_delete_dVector, swig_std_vector_Sl_double_Sg__methods, swig_std_vector_Sl_double_Sg__attributes, swig_std_vector_Sl_double_Sg__bases,swig_std_vector_Sl_double_Sg__base_names, &swig_module, SWIG_TCL_HASHTABLE_INIT };
SWIGINTERN int
_wrap_new_ddVector__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  std::vector< std::vector< double > > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_ddVector size ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ddVector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_ddVector__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< std::vector< double > > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_ddVector ") == TCL_ERROR) SWIG_fail;
  result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_ddVector__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  std::vector< double > *arg2 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  std::vector< double > *v2 ;
  std::vector< double > w2 ;
  std::vector< std::vector< double > > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:new_ddVector size value ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ddVector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    double         temp;
    
    if(SWIG_ConvertPtr(objv[2], (void **) &v2, \
        SWIGTYPE_p_std__vectorT_double_t, 0) == 0) {
      arg2 = v2;
    } else {
      // It isn't a vector< double > so it should be a list of double's
      if(Tcl_ListObjGetElements(interp, objv[2], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w2 = std::vector< double >();
      for (i = 0; i < nitems; i++) {
        if (Tcl_GetDoubleFromObj(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w2.push_back(temp);
      } 
      arg2 = &w2;
    }
  }
  result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >(arg1,(std::vector< double > const &)*arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_ddVector__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< std::vector< double > > *arg1 = 0 ;
  std::vector< std::vector< double > > *v1 ;
  std::vector< std::vector< double > > w1 ;
  std::vector< std::vector< double > > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_ddVector other ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    std::vector< double >*        temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_p_std__vectorT_std__vectorT_double_t_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< std::vector< double > > so it should be a list of std::vector< double >'s
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< std::vector< double > >();
      for (i = 0; i < nitems; i++) {
        if ((SWIG_ConvertPtr(listobjv[i],(void **) &temp,
              SWIGTYPE_p_std__vectorT_double_t,0)) != 0) {
          char message[] = 
          "list of " "std::vector< double >" " expected";
          Tcl_SetResult(interp, message, TCL_VOLATILE);
          return TCL_ERROR;
        }
        w1.push_back(*temp);
      } 
      arg1 = &w1;
    }
  }
  result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >((std::vector< std::vector< double > > const &)*arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_ddVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_ddVector__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ddVector__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    {
      Tcl_Obj **listobjv;
      int       nitems;
      std::vector< double >*         temp;
      std::vector< std::vector< double > > *v;
      
      if(SWIG_ConvertPtr(argv[0], (void **) &v, \
          SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0) == 0){
        /* wrapped vector */
        _v = 1;
      } else {
        // It isn't a vector< std::vector< double > > so it should be a list of std::vector< double >'s
        if(Tcl_ListObjGetElements(interp, argv[0], 
            &nitems, &listobjv) == TCL_ERROR)
        _v = 0;
        else
        if (nitems == 0)
        _v = 1;
        //check the first value to see if it is of correct type
        else if ((SWIG_ConvertPtr(listobjv[0],
              (void **) &temp,
              SWIGTYPE_p_std__vectorT_double_t,0)) != 0)
        _v = 0;
        else
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ddVector__SWIG_3(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        Tcl_Obj **listobjv;
        int       nitems;
        double         temp;
        std::vector< double > *v;
        
        if(SWIG_ConvertPtr(argv[1], (void **) &v, \
            SWIGTYPE_p_std__vectorT_double_t, 0) == 0){
          /* wrapped vector */
          _v = 1;
        } else {
          // It isn't a vector< double > so it should be a list of double's
          if(Tcl_ListObjGetElements(interp, argv[1], 
              &nitems, &listobjv) == TCL_ERROR)
          _v = 0;
          else
          if (nitems == 0)
          _v = 1;
          //check the first value to see if it is of correct type
          if (Tcl_GetDoubleFromObj(interp, listobjv[0], &temp) == TCL_ERROR)
          _v = 0;
          else
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_ddVector__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'new_ddVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< double > >::vector(unsigned int)\n"
    "    std::vector< std::vector< double > >::vector()\n"
    "    std::vector< std::vector< double > >::vector(unsigned int,std::vector< double > const &)\n"
    "    std::vector< std::vector< double > >::vector(std::vector< std::vector< double > > const &)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ddVector_size(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > > *v1 ;
  std::vector< std::vector< double > > w1 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ddVector_size self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    std::vector< double >*        temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_p_std__vectorT_std__vectorT_double_t_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< std::vector< double > > so it should be a list of std::vector< double >'s
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< std::vector< double > >();
      for (i = 0; i < nitems; i++) {
        if ((SWIG_ConvertPtr(listobjv[i],(void **) &temp,
              SWIGTYPE_p_std__vectorT_double_t,0)) != 0) {
          char message[] = 
          "list of " "std::vector< double >" " expected";
          Tcl_SetResult(interp, message, TCL_VOLATILE);
          return TCL_ERROR;
        }
        w1.push_back(*temp);
      } 
      arg1 = &w1;
    }
  }
  result = (unsigned int)((std::vector< std::vector< double > > const *)arg1)->size();
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ddVector_empty(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > > *v1 ;
  std::vector< std::vector< double > > w1 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ddVector_empty self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    std::vector< double >*        temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_p_std__vectorT_std__vectorT_double_t_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< std::vector< double > > so it should be a list of std::vector< double >'s
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< std::vector< double > >();
      for (i = 0; i < nitems; i++) {
        if ((SWIG_ConvertPtr(listobjv[i],(void **) &temp,
              SWIGTYPE_p_std__vectorT_double_t,0)) != 0) {
          char message[] = 
          "list of " "std::vector< double >" " expected";
          Tcl_SetResult(interp, message, TCL_VOLATILE);
          return TCL_ERROR;
        }
        w1.push_back(*temp);
      } 
      arg1 = &w1;
    }
  }
  result = (bool)((std::vector< std::vector< double > > const *)arg1)->empty();
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ddVector_clear(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ddVector_clear self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ddVector_clear" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  (arg1)->clear();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ddVector_push(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double > *v2 ;
  std::vector< double > w2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ddVector_push self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ddVector_push" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    double         temp;
    
    if(SWIG_ConvertPtr(objv[2], (void **) &v2, \
        SWIGTYPE_p_std__vectorT_double_t, 0) == 0) {
      arg2 = v2;
    } else {
      // It isn't a vector< double > so it should be a list of double's
      if(Tcl_ListObjGetElements(interp, objv[2], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w2 = std::vector< double >();
      for (i = 0; i < nitems; i++) {
        if (Tcl_GetDoubleFromObj(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w2.push_back(temp);
      } 
      arg2 = &w2;
    }
  }
  (arg1)->push_back((std::vector< double > const &)*arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ddVector_pop(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ddVector_pop self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ddVector_pop" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  try {
    result = std_vector_Sl_std_vector_Sl_double_Sg__Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  {
    for (unsigned int i=0; i<(&result)->size(); i++) {
      Tcl_ListObjAppendElement(interp, (Tcl_GetObjResult(interp)), \
        Tcl_NewDoubleObj(((std::vector< double > &)result)[i]));
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ddVector_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< double > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ddVector_get self i ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ddVector_get" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ddVector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = (std::vector< double > *) &std_vector_Sl_std_vector_Sl_double_Sg__Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ddVector_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< double > *v3 ;
  std::vector< double > w3 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:ddVector_set self i x ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ddVector_set" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ddVector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    double         temp;
    
    if(SWIG_ConvertPtr(objv[3], (void **) &v3, \
        SWIGTYPE_p_std__vectorT_double_t, 0) == 0) {
      arg3 = v3;
    } else {
      // It isn't a vector< double > so it should be a list of double's
      if(Tcl_ListObjGetElements(interp, objv[3], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w3 = std::vector< double >();
      for (i = 0; i < nitems; i++) {
        if (Tcl_GetDoubleFromObj(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w3.push_back(temp);
      } 
      arg3 = &w3;
    }
  }
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg__set(arg1,arg2,(std::vector< double > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_ddVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_ddVector self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ddVector" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_ddVector(void *obj) {
std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) obj;
delete arg1;
}
static swig_method swig_std_vector_Sl_std_vector_Sl_double_Sg__Sg__methods[] = {
    {"size", _wrap_ddVector_size}, 
    {"empty", _wrap_ddVector_empty}, 
    {"clear", _wrap_ddVector_clear}, 
    {"push", _wrap_ddVector_push}, 
    {"pop", _wrap_ddVector_pop}, 
    {"get", _wrap_ddVector_get}, 
    {"set", _wrap_ddVector_set}, 
    {0,0}
};
static swig_attribute swig_std_vector_Sl_std_vector_Sl_double_Sg__Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_std_vector_Sl_std_vector_Sl_double_Sg__Sg__bases[] = {0};
static const char * swig_std_vector_Sl_std_vector_Sl_double_Sg__Sg__base_names[] = {0};
static swig_class _wrap_class_std_vector_Sl_std_vector_Sl_double_Sg__Sg_ = { "ddVector", &SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,_wrap_new_ddVector, swig_delete_ddVector, swig_std_vector_Sl_std_vector_Sl_double_Sg__Sg__methods, swig_std_vector_Sl_std_vector_Sl_double_Sg__Sg__attributes, swig_std_vector_Sl_std_vector_Sl_double_Sg__Sg__bases,swig_std_vector_Sl_std_vector_Sl_double_Sg__Sg__base_names, &swig_module, SWIG_TCL_HASHTABLE_INIT };
SWIGINTERN int
_wrap_new_iVector__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_iVector size ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_iVector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (std::vector< int > *)new std::vector< int >(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_iVector__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_iVector ") == TCL_ERROR) SWIG_fail;
  result = (std::vector< int > *)new std::vector< int >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_iVector__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  int *arg2 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:new_iVector size value ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_iVector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_iVector" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  result = (std::vector< int > *)new std::vector< int >(arg1,(int const &)*arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_iVector__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int > *arg1 = 0 ;
  std::vector< int > *v1 ;
  std::vector< int > w1 ;
  std::vector< int > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_iVector other ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    int         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_int_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< int > so it should be a list of int's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< int >();
      for (i = 0; i < nitems; i++) {
        if (Tcl_GetIntFromObj(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_iVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_iVector__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_iVector__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    {
      Tcl_Obj **listobjv;
      int       nitems;
      int         temp;
      std::vector< int > *v;
      
      if(SWIG_ConvertPtr(argv[0], (void **) &v, \
          SWIGTYPE_p_std__vectorT_int_t, 0) == 0){
        /* wrapped vector */
        _v = 1;
      } else {
        // It isn't a vector< int > so it should be a list of int's
        if(Tcl_ListObjGetElements(interp, argv[0], 
            &nitems, &listobjv) == TCL_ERROR)
        _v = 0;
        else
        if (nitems == 0)
        _v = 1;
        //check the first value to see if it is of correct type
        if (Tcl_GetIntFromObj(interp, listobjv[0], &temp) == TCL_ERROR)
        _v = 0;
        else
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_iVector__SWIG_3(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_iVector__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'new_iVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::vector(unsigned int)\n"
    "    std::vector< int >::vector()\n"
    "    std::vector< int >::vector(unsigned int,int const &)\n"
    "    std::vector< int >::vector(std::vector< int > const &)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_iVector_size(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int > *v1 ;
  std::vector< int > w1 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:iVector_size self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    int         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_int_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< int > so it should be a list of int's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< int >();
      for (i = 0; i < nitems; i++) {
        if (Tcl_GetIntFromObj(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = (unsigned int)((std::vector< int > const *)arg1)->size();
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_iVector_empty(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int > *v1 ;
  std::vector< int > w1 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:iVector_empty self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    int         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_int_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< int > so it should be a list of int's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< int >();
      for (i = 0; i < nitems; i++) {
        if (Tcl_GetIntFromObj(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = (bool)((std::vector< int > const *)arg1)->empty();
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_iVector_clear(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:iVector_clear self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iVector_clear" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  (arg1)->clear();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_iVector_push(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:iVector_push self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iVector_push" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "iVector_push" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->push_back(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_iVector_pop(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:iVector_pop self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iVector_pop" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  try {
    result = (int)std_vector_Sl_int_Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_iVector_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:iVector_get self i ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iVector_get" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "iVector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = (int)std_vector_Sl_int_Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_iVector_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:iVector_set self i x ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iVector_set" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "iVector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "iVector_set" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  try {
    std_vector_Sl_int_Sg__set(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_iVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_iVector self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_int_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_iVector" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_iVector(void *obj) {
std::vector< int > *arg1 = (std::vector< int > *) obj;
delete arg1;
}
static swig_method swig_std_vector_Sl_int_Sg__methods[] = {
    {"size", _wrap_iVector_size}, 
    {"empty", _wrap_iVector_empty}, 
    {"clear", _wrap_iVector_clear}, 
    {"push", _wrap_iVector_push}, 
    {"pop", _wrap_iVector_pop}, 
    {"get", _wrap_iVector_get}, 
    {"set", _wrap_iVector_set}, 
    {0,0}
};
static swig_attribute swig_std_vector_Sl_int_Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_std_vector_Sl_int_Sg__bases[] = {0};
static const char * swig_std_vector_Sl_int_Sg__base_names[] = {0};
static swig_class _wrap_class_std_vector_Sl_int_Sg_ = { "iVector", &SWIGTYPE_p_std__vectorT_int_t,_wrap_new_iVector, swig_delete_iVector, swig_std_vector_Sl_int_Sg__methods, swig_std_vector_Sl_int_Sg__attributes, swig_std_vector_Sl_int_Sg__bases,swig_std_vector_Sl_int_Sg__base_names, &swig_module, SWIG_TCL_HASHTABLE_INIT };
SWIGINTERN int
_wrap_new_nodeVector__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  std::vector< Node > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_nodeVector size ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_nodeVector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (std::vector< Node > *)new std::vector< Node >(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Node_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_nodeVector__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Node > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_nodeVector ") == TCL_ERROR) SWIG_fail;
  result = (std::vector< Node > *)new std::vector< Node >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Node_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_nodeVector__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  Node *arg2 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< Node > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:new_nodeVector size value ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_nodeVector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_nodeVector" "', argument " "2"" of type '" "Node const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_nodeVector" "', argument " "2"" of type '" "Node const &""'"); 
  }
  arg2 = reinterpret_cast< Node * >(argp2);
  result = (std::vector< Node > *)new std::vector< Node >(arg1,(Node const &)*arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Node_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_nodeVector__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Node > *arg1 = 0 ;
  std::vector< Node > *v1 ;
  std::vector< Node > w1 ;
  std::vector< Node > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_nodeVector other ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    Node*        temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_p_std__vectorT_Node_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< Node > so it should be a list of Node's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< Node >();
      for (i = 0; i < nitems; i++) {
        if ((SWIG_ConvertPtr(listobjv[i],(void **) &temp,
              SWIGTYPE_p_Node,0)) != 0) {
          char message[] = 
          "list of " "Node" " expected";
          Tcl_SetResult(interp, message, TCL_VOLATILE);
          return TCL_ERROR;
        }
        w1.push_back(*temp);
      } 
      arg1 = &w1;
    }
  }
  result = (std::vector< Node > *)new std::vector< Node >((std::vector< Node > const &)*arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Node_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_nodeVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_nodeVector__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_nodeVector__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    {
      Tcl_Obj **listobjv;
      int       nitems;
      Node*         temp;
      std::vector< Node > *v;
      
      if(SWIG_ConvertPtr(argv[0], (void **) &v, \
          SWIGTYPE_p_std__vectorT_Node_t, 0) == 0){
        /* wrapped vector */
        _v = 1;
      } else {
        // It isn't a vector< Node > so it should be a list of Node's
        if(Tcl_ListObjGetElements(interp, argv[0], 
            &nitems, &listobjv) == TCL_ERROR)
        _v = 0;
        else
        if (nitems == 0)
        _v = 1;
        //check the first value to see if it is of correct type
        else if ((SWIG_ConvertPtr(listobjv[0],
              (void **) &temp,
              SWIGTYPE_p_Node,0)) != 0)
        _v = 0;
        else
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_nodeVector__SWIG_3(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Node, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_nodeVector__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'new_nodeVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Node >::vector(unsigned int)\n"
    "    std::vector< Node >::vector()\n"
    "    std::vector< Node >::vector(unsigned int,Node const &)\n"
    "    std::vector< Node >::vector(std::vector< Node > const &)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_nodeVector_size(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  std::vector< Node > *v1 ;
  std::vector< Node > w1 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:nodeVector_size self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    Node*        temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_p_std__vectorT_Node_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< Node > so it should be a list of Node's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< Node >();
      for (i = 0; i < nitems; i++) {
        if ((SWIG_ConvertPtr(listobjv[i],(void **) &temp,
              SWIGTYPE_p_Node,0)) != 0) {
          char message[] = 
          "list of " "Node" " expected";
          Tcl_SetResult(interp, message, TCL_VOLATILE);
          return TCL_ERROR;
        }
        w1.push_back(*temp);
      } 
      arg1 = &w1;
    }
  }
  result = (unsigned int)((std::vector< Node > const *)arg1)->size();
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_nodeVector_empty(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  std::vector< Node > *v1 ;
  std::vector< Node > w1 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:nodeVector_empty self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    Node*        temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_p_std__vectorT_Node_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< Node > so it should be a list of Node's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< Node >();
      for (i = 0; i < nitems; i++) {
        if ((SWIG_ConvertPtr(listobjv[i],(void **) &temp,
              SWIGTYPE_p_Node,0)) != 0) {
          char message[] = 
          "list of " "Node" " expected";
          Tcl_SetResult(interp, message, TCL_VOLATILE);
          return TCL_ERROR;
        }
        w1.push_back(*temp);
      } 
      arg1 = &w1;
    }
  }
  result = (bool)((std::vector< Node > const *)arg1)->empty();
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_nodeVector_clear(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:nodeVector_clear self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_Node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "nodeVector_clear" "', argument " "1"" of type '" "std::vector< Node > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Node > * >(argp1);
  (arg1)->clear();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_nodeVector_push(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  Node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:nodeVector_push self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_Node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "nodeVector_push" "', argument " "1"" of type '" "std::vector< Node > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Node > * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "nodeVector_push" "', argument " "2"" of type '" "Node const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "nodeVector_push" "', argument " "2"" of type '" "Node const &""'"); 
  }
  arg2 = reinterpret_cast< Node * >(argp2);
  (arg1)->push_back((Node const &)*arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_nodeVector_pop(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Node result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:nodeVector_pop self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_Node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "nodeVector_pop" "', argument " "1"" of type '" "std::vector< Node > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Node > * >(argp1);
  try {
    result = std_vector_Sl_Node_Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new Node(static_cast< const Node& >(result))), SWIGTYPE_p_Node, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_nodeVector_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Node *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:nodeVector_get self i ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_Node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "nodeVector_get" "', argument " "1"" of type '" "std::vector< Node > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Node > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "nodeVector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = (Node *) &std_vector_Sl_Node_Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Node,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_nodeVector_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  int arg2 ;
  Node *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:nodeVector_set self i x ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_Node_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "nodeVector_set" "', argument " "1"" of type '" "std::vector< Node > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Node > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "nodeVector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_Node,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "nodeVector_set" "', argument " "3"" of type '" "Node const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "nodeVector_set" "', argument " "3"" of type '" "Node const &""'"); 
  }
  arg3 = reinterpret_cast< Node * >(argp3);
  try {
    std_vector_Sl_Node_Sg__set(arg1,arg2,(Node const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_nodeVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_nodeVector self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_Node_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_nodeVector" "', argument " "1"" of type '" "std::vector< Node > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Node > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_nodeVector(void *obj) {
std::vector< Node > *arg1 = (std::vector< Node > *) obj;
delete arg1;
}
static swig_method swig_std_vector_Sl_Node_Sg__methods[] = {
    {"size", _wrap_nodeVector_size}, 
    {"empty", _wrap_nodeVector_empty}, 
    {"clear", _wrap_nodeVector_clear}, 
    {"push", _wrap_nodeVector_push}, 
    {"pop", _wrap_nodeVector_pop}, 
    {"get", _wrap_nodeVector_get}, 
    {"set", _wrap_nodeVector_set}, 
    {0,0}
};
static swig_attribute swig_std_vector_Sl_Node_Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_std_vector_Sl_Node_Sg__bases[] = {0};
static const char * swig_std_vector_Sl_Node_Sg__base_names[] = {0};
static swig_class _wrap_class_std_vector_Sl_Node_Sg_ = { "nodeVector", &SWIGTYPE_p_std__vectorT_Node_t,_wrap_new_nodeVector, swig_delete_nodeVector, swig_std_vector_Sl_Node_Sg__methods, swig_std_vector_Sl_Node_Sg__attributes, swig_std_vector_Sl_Node_Sg__bases,swig_std_vector_Sl_Node_Sg__base_names, &swig_module, SWIG_TCL_HASHTABLE_INIT };
SWIGINTERN int
_wrap_new_atomVector__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  std::vector< Atom > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_atomVector size ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_atomVector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (std::vector< Atom > *)new std::vector< Atom >(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Atom_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_atomVector__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Atom > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_atomVector ") == TCL_ERROR) SWIG_fail;
  result = (std::vector< Atom > *)new std::vector< Atom >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Atom_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_atomVector__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  Atom *arg2 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< Atom > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:new_atomVector size value ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_atomVector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_Atom,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_atomVector" "', argument " "2"" of type '" "Atom const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_atomVector" "', argument " "2"" of type '" "Atom const &""'"); 
  }
  arg2 = reinterpret_cast< Atom * >(argp2);
  result = (std::vector< Atom > *)new std::vector< Atom >(arg1,(Atom const &)*arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Atom_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_atomVector__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Atom > *arg1 = 0 ;
  std::vector< Atom > *v1 ;
  std::vector< Atom > w1 ;
  std::vector< Atom > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_atomVector other ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    Atom*        temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_p_std__vectorT_Atom_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< Atom > so it should be a list of Atom's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< Atom >();
      for (i = 0; i < nitems; i++) {
        if ((SWIG_ConvertPtr(listobjv[i],(void **) &temp,
              SWIGTYPE_p_Atom,0)) != 0) {
          char message[] = 
          "list of " "Atom" " expected";
          Tcl_SetResult(interp, message, TCL_VOLATILE);
          return TCL_ERROR;
        }
        w1.push_back(*temp);
      } 
      arg1 = &w1;
    }
  }
  result = (std::vector< Atom > *)new std::vector< Atom >((std::vector< Atom > const &)*arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Atom_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_atomVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_atomVector__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_atomVector__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    {
      Tcl_Obj **listobjv;
      int       nitems;
      Atom*         temp;
      std::vector< Atom > *v;
      
      if(SWIG_ConvertPtr(argv[0], (void **) &v, \
          SWIGTYPE_p_std__vectorT_Atom_t, 0) == 0){
        /* wrapped vector */
        _v = 1;
      } else {
        // It isn't a vector< Atom > so it should be a list of Atom's
        if(Tcl_ListObjGetElements(interp, argv[0], 
            &nitems, &listobjv) == TCL_ERROR)
        _v = 0;
        else
        if (nitems == 0)
        _v = 1;
        //check the first value to see if it is of correct type
        else if ((SWIG_ConvertPtr(listobjv[0],
              (void **) &temp,
              SWIGTYPE_p_Atom,0)) != 0)
        _v = 0;
        else
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_atomVector__SWIG_3(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Atom, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_atomVector__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'new_atomVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Atom >::vector(unsigned int)\n"
    "    std::vector< Atom >::vector()\n"
    "    std::vector< Atom >::vector(unsigned int,Atom const &)\n"
    "    std::vector< Atom >::vector(std::vector< Atom > const &)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_atomVector_size(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Atom > *arg1 = (std::vector< Atom > *) 0 ;
  std::vector< Atom > *v1 ;
  std::vector< Atom > w1 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:atomVector_size self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    Atom*        temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_p_std__vectorT_Atom_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< Atom > so it should be a list of Atom's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< Atom >();
      for (i = 0; i < nitems; i++) {
        if ((SWIG_ConvertPtr(listobjv[i],(void **) &temp,
              SWIGTYPE_p_Atom,0)) != 0) {
          char message[] = 
          "list of " "Atom" " expected";
          Tcl_SetResult(interp, message, TCL_VOLATILE);
          return TCL_ERROR;
        }
        w1.push_back(*temp);
      } 
      arg1 = &w1;
    }
  }
  result = (unsigned int)((std::vector< Atom > const *)arg1)->size();
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_atomVector_empty(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Atom > *arg1 = (std::vector< Atom > *) 0 ;
  std::vector< Atom > *v1 ;
  std::vector< Atom > w1 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:atomVector_empty self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    Atom*        temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_p_std__vectorT_Atom_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< Atom > so it should be a list of Atom's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< Atom >();
      for (i = 0; i < nitems; i++) {
        if ((SWIG_ConvertPtr(listobjv[i],(void **) &temp,
              SWIGTYPE_p_Atom,0)) != 0) {
          char message[] = 
          "list of " "Atom" " expected";
          Tcl_SetResult(interp, message, TCL_VOLATILE);
          return TCL_ERROR;
        }
        w1.push_back(*temp);
      } 
      arg1 = &w1;
    }
  }
  result = (bool)((std::vector< Atom > const *)arg1)->empty();
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_atomVector_clear(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Atom > *arg1 = (std::vector< Atom > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:atomVector_clear self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_Atom_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomVector_clear" "', argument " "1"" of type '" "std::vector< Atom > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Atom > * >(argp1);
  (arg1)->clear();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_atomVector_push(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Atom > *arg1 = (std::vector< Atom > *) 0 ;
  Atom *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:atomVector_push self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_Atom_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomVector_push" "', argument " "1"" of type '" "std::vector< Atom > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Atom > * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_Atom,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "atomVector_push" "', argument " "2"" of type '" "Atom const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "atomVector_push" "', argument " "2"" of type '" "Atom const &""'"); 
  }
  arg2 = reinterpret_cast< Atom * >(argp2);
  (arg1)->push_back((Atom const &)*arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_atomVector_pop(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Atom > *arg1 = (std::vector< Atom > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Atom result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:atomVector_pop self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_Atom_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomVector_pop" "', argument " "1"" of type '" "std::vector< Atom > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Atom > * >(argp1);
  try {
    result = std_vector_Sl_Atom_Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new Atom(static_cast< const Atom& >(result))), SWIGTYPE_p_Atom, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_atomVector_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Atom > *arg1 = (std::vector< Atom > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Atom *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:atomVector_get self i ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_Atom_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomVector_get" "', argument " "1"" of type '" "std::vector< Atom > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Atom > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "atomVector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = (Atom *) &std_vector_Sl_Atom_Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Atom,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_atomVector_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Atom > *arg1 = (std::vector< Atom > *) 0 ;
  int arg2 ;
  Atom *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:atomVector_set self i x ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_Atom_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "atomVector_set" "', argument " "1"" of type '" "std::vector< Atom > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Atom > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "atomVector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_Atom,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "atomVector_set" "', argument " "3"" of type '" "Atom const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "atomVector_set" "', argument " "3"" of type '" "Atom const &""'"); 
  }
  arg3 = reinterpret_cast< Atom * >(argp3);
  try {
    std_vector_Sl_Atom_Sg__set(arg1,arg2,(Atom const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_atomVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< Atom > *arg1 = (std::vector< Atom > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_atomVector self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_Atom_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_atomVector" "', argument " "1"" of type '" "std::vector< Atom > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Atom > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_atomVector(void *obj) {
std::vector< Atom > *arg1 = (std::vector< Atom > *) obj;
delete arg1;
}
static swig_method swig_std_vector_Sl_Atom_Sg__methods[] = {
    {"size", _wrap_atomVector_size}, 
    {"empty", _wrap_atomVector_empty}, 
    {"clear", _wrap_atomVector_clear}, 
    {"push", _wrap_atomVector_push}, 
    {"pop", _wrap_atomVector_pop}, 
    {"get", _wrap_atomVector_get}, 
    {"set", _wrap_atomVector_set}, 
    {0,0}
};
static swig_attribute swig_std_vector_Sl_Atom_Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_std_vector_Sl_Atom_Sg__bases[] = {0};
static const char * swig_std_vector_Sl_Atom_Sg__base_names[] = {0};
static swig_class _wrap_class_std_vector_Sl_Atom_Sg_ = { "atomVector", &SWIGTYPE_p_std__vectorT_Atom_t,_wrap_new_atomVector, swig_delete_atomVector, swig_std_vector_Sl_Atom_Sg__methods, swig_std_vector_Sl_Atom_Sg__attributes, swig_std_vector_Sl_Atom_Sg__bases,swig_std_vector_Sl_Atom_Sg__base_names, &swig_module, SWIG_TCL_HASHTABLE_INIT };
SWIGINTERN int
_wrap_new_curvaVectorDoubleVector__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  std::vector< CurvaVector< double > > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_curvaVectorDoubleVector size ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_curvaVectorDoubleVector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (std::vector< CurvaVector< double > > *)new std::vector< CurvaVector< double > >(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_CurvaVectorT_double_t_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_curvaVectorDoubleVector__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< CurvaVector< double > > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_curvaVectorDoubleVector ") == TCL_ERROR) SWIG_fail;
  result = (std::vector< CurvaVector< double > > *)new std::vector< CurvaVector< double > >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_CurvaVectorT_double_t_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_curvaVectorDoubleVector__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  CurvaVector< double > *arg2 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< CurvaVector< double > > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:new_curvaVectorDoubleVector size value ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_curvaVectorDoubleVector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_CurvaVectorT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_curvaVectorDoubleVector" "', argument " "2"" of type '" "CurvaVector< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_curvaVectorDoubleVector" "', argument " "2"" of type '" "CurvaVector< double > const &""'"); 
  }
  arg2 = reinterpret_cast< CurvaVector< double > * >(argp2);
  result = (std::vector< CurvaVector< double > > *)new std::vector< CurvaVector< double > >(arg1,(CurvaVector< double > const &)*arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_CurvaVectorT_double_t_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_curvaVectorDoubleVector__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< CurvaVector< double > > *arg1 = 0 ;
  std::vector< CurvaVector< double > > *v1 ;
  std::vector< CurvaVector< double > > w1 ;
  std::vector< CurvaVector< double > > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_curvaVectorDoubleVector other ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    CurvaVector< double >*        temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_p_std__vectorT_CurvaVectorT_double_t_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< CurvaVector< double > > so it should be a list of CurvaVector< double >'s
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< CurvaVector< double > >();
      for (i = 0; i < nitems; i++) {
        if ((SWIG_ConvertPtr(listobjv[i],(void **) &temp,
              SWIGTYPE_p_CurvaVectorT_double_t,0)) != 0) {
          char message[] = 
          "list of " "CurvaVector< double >" " expected";
          Tcl_SetResult(interp, message, TCL_VOLATILE);
          return TCL_ERROR;
        }
        w1.push_back(*temp);
      } 
      arg1 = &w1;
    }
  }
  result = (std::vector< CurvaVector< double > > *)new std::vector< CurvaVector< double > >((std::vector< CurvaVector< double > > const &)*arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_CurvaVectorT_double_t_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_curvaVectorDoubleVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_curvaVectorDoubleVector__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_curvaVectorDoubleVector__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    {
      Tcl_Obj **listobjv;
      int       nitems;
      CurvaVector< double >*         temp;
      std::vector< CurvaVector< double > > *v;
      
      if(SWIG_ConvertPtr(argv[0], (void **) &v, \
          SWIGTYPE_p_std__vectorT_CurvaVectorT_double_t_t, 0) == 0){
        /* wrapped vector */
        _v = 1;
      } else {
        // It isn't a vector< CurvaVector< double > > so it should be a list of CurvaVector< double >'s
        if(Tcl_ListObjGetElements(interp, argv[0], 
            &nitems, &listobjv) == TCL_ERROR)
        _v = 0;
        else
        if (nitems == 0)
        _v = 1;
        //check the first value to see if it is of correct type
        else if ((SWIG_ConvertPtr(listobjv[0],
              (void **) &temp,
              SWIGTYPE_p_CurvaVectorT_double_t,0)) != 0)
        _v = 0;
        else
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_curvaVectorDoubleVector__SWIG_3(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CurvaVectorT_double_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_curvaVectorDoubleVector__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'new_curvaVectorDoubleVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< CurvaVector< double > >::vector(unsigned int)\n"
    "    std::vector< CurvaVector< double > >::vector()\n"
    "    std::vector< CurvaVector< double > >::vector(unsigned int,CurvaVector< double > const &)\n"
    "    std::vector< CurvaVector< double > >::vector(std::vector< CurvaVector< double > > const &)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curvaVectorDoubleVector_size(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< CurvaVector< double > > *arg1 = (std::vector< CurvaVector< double > > *) 0 ;
  std::vector< CurvaVector< double > > *v1 ;
  std::vector< CurvaVector< double > > w1 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:curvaVectorDoubleVector_size self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    CurvaVector< double >*        temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_p_std__vectorT_CurvaVectorT_double_t_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< CurvaVector< double > > so it should be a list of CurvaVector< double >'s
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< CurvaVector< double > >();
      for (i = 0; i < nitems; i++) {
        if ((SWIG_ConvertPtr(listobjv[i],(void **) &temp,
              SWIGTYPE_p_CurvaVectorT_double_t,0)) != 0) {
          char message[] = 
          "list of " "CurvaVector< double >" " expected";
          Tcl_SetResult(interp, message, TCL_VOLATILE);
          return TCL_ERROR;
        }
        w1.push_back(*temp);
      } 
      arg1 = &w1;
    }
  }
  result = (unsigned int)((std::vector< CurvaVector< double > > const *)arg1)->size();
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curvaVectorDoubleVector_empty(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< CurvaVector< double > > *arg1 = (std::vector< CurvaVector< double > > *) 0 ;
  std::vector< CurvaVector< double > > *v1 ;
  std::vector< CurvaVector< double > > w1 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:curvaVectorDoubleVector_empty self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    CurvaVector< double >*        temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_p_std__vectorT_CurvaVectorT_double_t_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< CurvaVector< double > > so it should be a list of CurvaVector< double >'s
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< CurvaVector< double > >();
      for (i = 0; i < nitems; i++) {
        if ((SWIG_ConvertPtr(listobjv[i],(void **) &temp,
              SWIGTYPE_p_CurvaVectorT_double_t,0)) != 0) {
          char message[] = 
          "list of " "CurvaVector< double >" " expected";
          Tcl_SetResult(interp, message, TCL_VOLATILE);
          return TCL_ERROR;
        }
        w1.push_back(*temp);
      } 
      arg1 = &w1;
    }
  }
  result = (bool)((std::vector< CurvaVector< double > > const *)arg1)->empty();
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curvaVectorDoubleVector_clear(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< CurvaVector< double > > *arg1 = (std::vector< CurvaVector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:curvaVectorDoubleVector_clear self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_CurvaVectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "curvaVectorDoubleVector_clear" "', argument " "1"" of type '" "std::vector< CurvaVector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< CurvaVector< double > > * >(argp1);
  (arg1)->clear();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curvaVectorDoubleVector_push(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< CurvaVector< double > > *arg1 = (std::vector< CurvaVector< double > > *) 0 ;
  CurvaVector< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:curvaVectorDoubleVector_push self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_CurvaVectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "curvaVectorDoubleVector_push" "', argument " "1"" of type '" "std::vector< CurvaVector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< CurvaVector< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_CurvaVectorT_double_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "curvaVectorDoubleVector_push" "', argument " "2"" of type '" "CurvaVector< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "curvaVectorDoubleVector_push" "', argument " "2"" of type '" "CurvaVector< double > const &""'"); 
  }
  arg2 = reinterpret_cast< CurvaVector< double > * >(argp2);
  (arg1)->push_back((CurvaVector< double > const &)*arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curvaVectorDoubleVector_pop(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< CurvaVector< double > > *arg1 = (std::vector< CurvaVector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CurvaVector< double > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:curvaVectorDoubleVector_pop self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_CurvaVectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "curvaVectorDoubleVector_pop" "', argument " "1"" of type '" "std::vector< CurvaVector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< CurvaVector< double > > * >(argp1);
  try {
    result = std_vector_Sl_CurvaVector_Sl_double_Sg__Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new CurvaVector< double >(static_cast< const CurvaVector< double >& >(result))), SWIGTYPE_p_CurvaVectorT_double_t, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curvaVectorDoubleVector_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< CurvaVector< double > > *arg1 = (std::vector< CurvaVector< double > > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  CurvaVector< double > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:curvaVectorDoubleVector_get self i ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_CurvaVectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "curvaVectorDoubleVector_get" "', argument " "1"" of type '" "std::vector< CurvaVector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< CurvaVector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "curvaVectorDoubleVector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = (CurvaVector< double > *) &std_vector_Sl_CurvaVector_Sl_double_Sg__Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_CurvaVectorT_double_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curvaVectorDoubleVector_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< CurvaVector< double > > *arg1 = (std::vector< CurvaVector< double > > *) 0 ;
  int arg2 ;
  CurvaVector< double > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:curvaVectorDoubleVector_set self i x ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_CurvaVectorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "curvaVectorDoubleVector_set" "', argument " "1"" of type '" "std::vector< CurvaVector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< CurvaVector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "curvaVectorDoubleVector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_CurvaVectorT_double_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "curvaVectorDoubleVector_set" "', argument " "3"" of type '" "CurvaVector< double > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "curvaVectorDoubleVector_set" "', argument " "3"" of type '" "CurvaVector< double > const &""'"); 
  }
  arg3 = reinterpret_cast< CurvaVector< double > * >(argp3);
  try {
    std_vector_Sl_CurvaVector_Sl_double_Sg__Sg__set(arg1,arg2,(CurvaVector< double > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_curvaVectorDoubleVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< CurvaVector< double > > *arg1 = (std::vector< CurvaVector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_curvaVectorDoubleVector self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_CurvaVectorT_double_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_curvaVectorDoubleVector" "', argument " "1"" of type '" "std::vector< CurvaVector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< CurvaVector< double > > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_curvaVectorDoubleVector(void *obj) {
std::vector< CurvaVector< double > > *arg1 = (std::vector< CurvaVector< double > > *) obj;
delete arg1;
}
static swig_method swig_std_vector_Sl_CurvaVector_Sl_double_Sg__Sg__methods[] = {
    {"size", _wrap_curvaVectorDoubleVector_size}, 
    {"empty", _wrap_curvaVectorDoubleVector_empty}, 
    {"clear", _wrap_curvaVectorDoubleVector_clear}, 
    {"push", _wrap_curvaVectorDoubleVector_push}, 
    {"pop", _wrap_curvaVectorDoubleVector_pop}, 
    {"get", _wrap_curvaVectorDoubleVector_get}, 
    {"set", _wrap_curvaVectorDoubleVector_set}, 
    {0,0}
};
static swig_attribute swig_std_vector_Sl_CurvaVector_Sl_double_Sg__Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_std_vector_Sl_CurvaVector_Sl_double_Sg__Sg__bases[] = {0};
static const char * swig_std_vector_Sl_CurvaVector_Sl_double_Sg__Sg__base_names[] = {0};
static swig_class _wrap_class_std_vector_Sl_CurvaVector_Sl_double_Sg__Sg_ = { "curvaVectorDoubleVector", &SWIGTYPE_p_std__vectorT_CurvaVectorT_double_t_t,_wrap_new_curvaVectorDoubleVector, swig_delete_curvaVectorDoubleVector, swig_std_vector_Sl_CurvaVector_Sl_double_Sg__Sg__methods, swig_std_vector_Sl_CurvaVector_Sl_double_Sg__Sg__attributes, swig_std_vector_Sl_CurvaVector_Sl_double_Sg__Sg__bases,swig_std_vector_Sl_CurvaVector_Sl_double_Sg__Sg__base_names, &swig_module, SWIG_TCL_HASHTABLE_INIT };
SWIGINTERN int
_wrap_new_curvaVectorIntVector__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  std::vector< CurvaVector< int > > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_curvaVectorIntVector size ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_curvaVectorIntVector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (std::vector< CurvaVector< int > > *)new std::vector< CurvaVector< int > >(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_CurvaVectorT_int_t_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_curvaVectorIntVector__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< CurvaVector< int > > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_curvaVectorIntVector ") == TCL_ERROR) SWIG_fail;
  result = (std::vector< CurvaVector< int > > *)new std::vector< CurvaVector< int > >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_CurvaVectorT_int_t_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_curvaVectorIntVector__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  CurvaVector< int > *arg2 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< CurvaVector< int > > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:new_curvaVectorIntVector size value ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_curvaVectorIntVector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_CurvaVectorT_int_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_curvaVectorIntVector" "', argument " "2"" of type '" "CurvaVector< int > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_curvaVectorIntVector" "', argument " "2"" of type '" "CurvaVector< int > const &""'"); 
  }
  arg2 = reinterpret_cast< CurvaVector< int > * >(argp2);
  result = (std::vector< CurvaVector< int > > *)new std::vector< CurvaVector< int > >(arg1,(CurvaVector< int > const &)*arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_CurvaVectorT_int_t_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_curvaVectorIntVector__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< CurvaVector< int > > *arg1 = 0 ;
  std::vector< CurvaVector< int > > *v1 ;
  std::vector< CurvaVector< int > > w1 ;
  std::vector< CurvaVector< int > > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_curvaVectorIntVector other ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    CurvaVector< int >*        temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_p_std__vectorT_CurvaVectorT_int_t_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< CurvaVector< int > > so it should be a list of CurvaVector< int >'s
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< CurvaVector< int > >();
      for (i = 0; i < nitems; i++) {
        if ((SWIG_ConvertPtr(listobjv[i],(void **) &temp,
              SWIGTYPE_p_CurvaVectorT_int_t,0)) != 0) {
          char message[] = 
          "list of " "CurvaVector< int >" " expected";
          Tcl_SetResult(interp, message, TCL_VOLATILE);
          return TCL_ERROR;
        }
        w1.push_back(*temp);
      } 
      arg1 = &w1;
    }
  }
  result = (std::vector< CurvaVector< int > > *)new std::vector< CurvaVector< int > >((std::vector< CurvaVector< int > > const &)*arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_CurvaVectorT_int_t_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_curvaVectorIntVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_curvaVectorIntVector__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_curvaVectorIntVector__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    {
      Tcl_Obj **listobjv;
      int       nitems;
      CurvaVector< int >*         temp;
      std::vector< CurvaVector< int > > *v;
      
      if(SWIG_ConvertPtr(argv[0], (void **) &v, \
          SWIGTYPE_p_std__vectorT_CurvaVectorT_int_t_t, 0) == 0){
        /* wrapped vector */
        _v = 1;
      } else {
        // It isn't a vector< CurvaVector< int > > so it should be a list of CurvaVector< int >'s
        if(Tcl_ListObjGetElements(interp, argv[0], 
            &nitems, &listobjv) == TCL_ERROR)
        _v = 0;
        else
        if (nitems == 0)
        _v = 1;
        //check the first value to see if it is of correct type
        else if ((SWIG_ConvertPtr(listobjv[0],
              (void **) &temp,
              SWIGTYPE_p_CurvaVectorT_int_t,0)) != 0)
        _v = 0;
        else
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_curvaVectorIntVector__SWIG_3(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CurvaVectorT_int_t, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_curvaVectorIntVector__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'new_curvaVectorIntVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< CurvaVector< int > >::vector(unsigned int)\n"
    "    std::vector< CurvaVector< int > >::vector()\n"
    "    std::vector< CurvaVector< int > >::vector(unsigned int,CurvaVector< int > const &)\n"
    "    std::vector< CurvaVector< int > >::vector(std::vector< CurvaVector< int > > const &)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curvaVectorIntVector_size(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< CurvaVector< int > > *arg1 = (std::vector< CurvaVector< int > > *) 0 ;
  std::vector< CurvaVector< int > > *v1 ;
  std::vector< CurvaVector< int > > w1 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:curvaVectorIntVector_size self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    CurvaVector< int >*        temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_p_std__vectorT_CurvaVectorT_int_t_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< CurvaVector< int > > so it should be a list of CurvaVector< int >'s
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< CurvaVector< int > >();
      for (i = 0; i < nitems; i++) {
        if ((SWIG_ConvertPtr(listobjv[i],(void **) &temp,
              SWIGTYPE_p_CurvaVectorT_int_t,0)) != 0) {
          char message[] = 
          "list of " "CurvaVector< int >" " expected";
          Tcl_SetResult(interp, message, TCL_VOLATILE);
          return TCL_ERROR;
        }
        w1.push_back(*temp);
      } 
      arg1 = &w1;
    }
  }
  result = (unsigned int)((std::vector< CurvaVector< int > > const *)arg1)->size();
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curvaVectorIntVector_empty(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< CurvaVector< int > > *arg1 = (std::vector< CurvaVector< int > > *) 0 ;
  std::vector< CurvaVector< int > > *v1 ;
  std::vector< CurvaVector< int > > w1 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:curvaVectorIntVector_empty self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    CurvaVector< int >*        temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_p_std__vectorT_CurvaVectorT_int_t_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector< CurvaVector< int > > so it should be a list of CurvaVector< int >'s
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector< CurvaVector< int > >();
      for (i = 0; i < nitems; i++) {
        if ((SWIG_ConvertPtr(listobjv[i],(void **) &temp,
              SWIGTYPE_p_CurvaVectorT_int_t,0)) != 0) {
          char message[] = 
          "list of " "CurvaVector< int >" " expected";
          Tcl_SetResult(interp, message, TCL_VOLATILE);
          return TCL_ERROR;
        }
        w1.push_back(*temp);
      } 
      arg1 = &w1;
    }
  }
  result = (bool)((std::vector< CurvaVector< int > > const *)arg1)->empty();
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curvaVectorIntVector_clear(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< CurvaVector< int > > *arg1 = (std::vector< CurvaVector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:curvaVectorIntVector_clear self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_CurvaVectorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "curvaVectorIntVector_clear" "', argument " "1"" of type '" "std::vector< CurvaVector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< CurvaVector< int > > * >(argp1);
  (arg1)->clear();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curvaVectorIntVector_push(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< CurvaVector< int > > *arg1 = (std::vector< CurvaVector< int > > *) 0 ;
  CurvaVector< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:curvaVectorIntVector_push self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_CurvaVectorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "curvaVectorIntVector_push" "', argument " "1"" of type '" "std::vector< CurvaVector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< CurvaVector< int > > * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_CurvaVectorT_int_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "curvaVectorIntVector_push" "', argument " "2"" of type '" "CurvaVector< int > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "curvaVectorIntVector_push" "', argument " "2"" of type '" "CurvaVector< int > const &""'"); 
  }
  arg2 = reinterpret_cast< CurvaVector< int > * >(argp2);
  (arg1)->push_back((CurvaVector< int > const &)*arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curvaVectorIntVector_pop(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< CurvaVector< int > > *arg1 = (std::vector< CurvaVector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CurvaVector< int > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:curvaVectorIntVector_pop self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_CurvaVectorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "curvaVectorIntVector_pop" "', argument " "1"" of type '" "std::vector< CurvaVector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< CurvaVector< int > > * >(argp1);
  try {
    result = std_vector_Sl_CurvaVector_Sl_int_Sg__Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new CurvaVector< int >(static_cast< const CurvaVector< int >& >(result))), SWIGTYPE_p_CurvaVectorT_int_t, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curvaVectorIntVector_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< CurvaVector< int > > *arg1 = (std::vector< CurvaVector< int > > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  CurvaVector< int > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:curvaVectorIntVector_get self i ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_CurvaVectorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "curvaVectorIntVector_get" "', argument " "1"" of type '" "std::vector< CurvaVector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< CurvaVector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "curvaVectorIntVector_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = (CurvaVector< int > *) &std_vector_Sl_CurvaVector_Sl_int_Sg__Sg__get(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_CurvaVectorT_int_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curvaVectorIntVector_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< CurvaVector< int > > *arg1 = (std::vector< CurvaVector< int > > *) 0 ;
  int arg2 ;
  CurvaVector< int > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:curvaVectorIntVector_set self i x ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_CurvaVectorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "curvaVectorIntVector_set" "', argument " "1"" of type '" "std::vector< CurvaVector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< CurvaVector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "curvaVectorIntVector_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_CurvaVectorT_int_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "curvaVectorIntVector_set" "', argument " "3"" of type '" "CurvaVector< int > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "curvaVectorIntVector_set" "', argument " "3"" of type '" "CurvaVector< int > const &""'"); 
  }
  arg3 = reinterpret_cast< CurvaVector< int > * >(argp3);
  try {
    std_vector_Sl_CurvaVector_Sl_int_Sg__Sg__set(arg1,arg2,(CurvaVector< int > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_curvaVectorIntVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< CurvaVector< int > > *arg1 = (std::vector< CurvaVector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_curvaVectorIntVector self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_CurvaVectorT_int_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_curvaVectorIntVector" "', argument " "1"" of type '" "std::vector< CurvaVector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< CurvaVector< int > > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_curvaVectorIntVector(void *obj) {
std::vector< CurvaVector< int > > *arg1 = (std::vector< CurvaVector< int > > *) obj;
delete arg1;
}
static swig_method swig_std_vector_Sl_CurvaVector_Sl_int_Sg__Sg__methods[] = {
    {"size", _wrap_curvaVectorIntVector_size}, 
    {"empty", _wrap_curvaVectorIntVector_empty}, 
    {"clear", _wrap_curvaVectorIntVector_clear}, 
    {"push", _wrap_curvaVectorIntVector_push}, 
    {"pop", _wrap_curvaVectorIntVector_pop}, 
    {"get", _wrap_curvaVectorIntVector_get}, 
    {"set", _wrap_curvaVectorIntVector_set}, 
    {0,0}
};
static swig_attribute swig_std_vector_Sl_CurvaVector_Sl_int_Sg__Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_std_vector_Sl_CurvaVector_Sl_int_Sg__Sg__bases[] = {0};
static const char * swig_std_vector_Sl_CurvaVector_Sl_int_Sg__Sg__base_names[] = {0};
static swig_class _wrap_class_std_vector_Sl_CurvaVector_Sl_int_Sg__Sg_ = { "curvaVectorIntVector", &SWIGTYPE_p_std__vectorT_CurvaVectorT_int_t_t,_wrap_new_curvaVectorIntVector, swig_delete_curvaVectorIntVector, swig_std_vector_Sl_CurvaVector_Sl_int_Sg__Sg__methods, swig_std_vector_Sl_CurvaVector_Sl_int_Sg__Sg__attributes, swig_std_vector_Sl_CurvaVector_Sl_int_Sg__Sg__bases,swig_std_vector_Sl_CurvaVector_Sl_int_Sg__Sg__base_names, &swig_module, SWIG_TCL_HASHTABLE_INIT };
SWIGINTERN int
_wrap_parseDcd__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::string *arg1 = 0 ;
  Coordinates *arg2 = (Coordinates *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int arg5 ;
  int arg6 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int tmpNumAtoms3 ;
  int tmpNumFrames3 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  
  {
    arg3 = &tmpNumAtoms3;
    arg4 = &tmpNumFrames3;
  }
  if (SWIG_GetArgs(interp, objc, objv,"oooo:parseDcd fname coordinates numFrames firstFrame ?lastFrame? ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[1], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parseDcd" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parseDcd" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_Coordinates, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parseDcd" "', argument " "2"" of type '" "Coordinates *""'"); 
  }
  arg2 = reinterpret_cast< Coordinates * >(argp2);
  ecode5 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "parseDcd" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "parseDcd" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  curva::parseDcd((std::string const &)*arg1,arg2,arg3,arg4,arg5,arg6);
  
  if (SWIG_IsNewObj(res1)) delete arg1;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_parseDcd__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::string *arg1 = 0 ;
  Coordinates *arg2 = (Coordinates *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int arg5 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int tmpNumAtoms3 ;
  int tmpNumFrames3 ;
  int val5 ;
  int ecode5 = 0 ;
  
  {
    arg3 = &tmpNumAtoms3;
    arg4 = &tmpNumFrames3;
  }
  if (SWIG_GetArgs(interp, objc, objv,"ooo:parseDcd fname coordinates numFrames ?firstFrame? ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[1], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parseDcd" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parseDcd" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_Coordinates, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parseDcd" "', argument " "2"" of type '" "Coordinates *""'"); 
  }
  arg2 = reinterpret_cast< Coordinates * >(argp2);
  ecode5 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "parseDcd" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  curva::parseDcd((std::string const &)*arg1,arg2,arg3,arg4,arg5);
  
  if (SWIG_IsNewObj(res1)) delete arg1;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_parseDcd__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::string *arg1 = 0 ;
  Coordinates *arg2 = (Coordinates *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int tmpNumAtoms3 ;
  int tmpNumFrames3 ;
  
  {
    arg3 = &tmpNumAtoms3;
    arg4 = &tmpNumFrames3;
  }
  if (SWIG_GetArgs(interp, objc, objv,"oo:parseDcd fname coordinates ?numFrames? ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[1], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parseDcd" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parseDcd" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_Coordinates, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parseDcd" "', argument " "2"" of type '" "Coordinates *""'"); 
  }
  arg2 = reinterpret_cast< Coordinates * >(argp2);
  curva::parseDcd((std::string const &)*arg1,arg2,arg3,arg4);
  
  if (SWIG_IsNewObj(res1)) delete arg1;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_parseDcd(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Coordinates, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_parseDcd__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Coordinates, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_parseDcd__SWIG_1(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Coordinates, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_parseDcd__SWIG_0(clientData, interp, objc, argv - 1);
          }
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'parseDcd'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    curva::parseDcd(std::string const &,Coordinates *,int *,int *,int,int)\n"
    "    curva::parseDcd(std::string const &,Coordinates *,int *,int *,int)\n"
    "    curva::parseDcd(std::string const &,Coordinates *,int *,int *)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_parsePdb(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::string *arg1 = 0 ;
  Atoms *arg2 = (Atoms *) 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:parsePdb fname atoms ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[1], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parsePdb" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parsePdb" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_Atoms, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parsePdb" "', argument " "2"" of type '" "Atoms *""'"); 
  }
  arg2 = reinterpret_cast< Atoms * >(argp2);
  curva::parsePdb((std::string const &)*arg1,arg2);
  
  if (SWIG_IsNewObj(res1)) delete arg1;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_generateNodes(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Nodes *arg1 = (Nodes *) 0 ;
  Atoms *arg2 = (Atoms *) 0 ;
  Coordinates *arg3 = (Coordinates *) 0 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:generateNodes nodes atoms coordinates numWindows ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Nodes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generateNodes" "', argument " "1"" of type '" "Nodes *""'"); 
  }
  arg1 = reinterpret_cast< Nodes * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_Atoms, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "generateNodes" "', argument " "2"" of type '" "Atoms *""'"); 
  }
  arg2 = reinterpret_cast< Atoms * >(argp2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_Coordinates, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "generateNodes" "', argument " "3"" of type '" "Coordinates *""'"); 
  }
  arg3 = reinterpret_cast< Coordinates * >(argp3);
  ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "generateNodes" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  curva::generateNodes(arg1,arg2,arg3,arg4);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mutualInformationConstruct(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Node *arg1 = (Node *) 0 ;
  CurvaMatrix< double > *arg2 = (CurvaMatrix< double > *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:mutualInformationConstruct node averagePositionMatrix windowIndex windowSize ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mutualInformationConstruct" "', argument " "1"" of type '" "Node *""'"); 
  }
  arg1 = reinterpret_cast< Node * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_CurvaMatrixT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mutualInformationConstruct" "', argument " "2"" of type '" "CurvaMatrix< double > *""'"); 
  }
  arg2 = reinterpret_cast< CurvaMatrix< double > * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mutualInformationConstruct" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "mutualInformationConstruct" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  curva::mutualInformationConstruct(arg1,arg2,arg3,arg4);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_generalizedCorrelationTest(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaMatrix< double > *arg1 = (CurvaMatrix< double > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:generalizedCorrelationTest mutualInformationMatrix xfname yfname referenceIndex ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaMatrixT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generalizedCorrelationTest" "', argument " "1"" of type '" "CurvaMatrix< double > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaMatrix< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "generalizedCorrelationTest" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "generalizedCorrelationTest" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[3], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "generalizedCorrelationTest" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "generalizedCorrelationTest" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "generalizedCorrelationTest" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  curva::test::generalizedCorrelationTest(arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4);
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_MolecularDynamicsCalculation(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  MolecularDynamicsCalculation *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_MolecularDynamicsCalculation ") == TCL_ERROR) SWIG_fail;
  result = (MolecularDynamicsCalculation *)new MolecularDynamicsCalculation();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_MolecularDynamicsCalculation,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_MolecularDynamicsCalculation(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  MolecularDynamicsCalculation *arg1 = (MolecularDynamicsCalculation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_MolecularDynamicsCalculation self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_MolecularDynamicsCalculation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MolecularDynamicsCalculation" "', argument " "1"" of type '" "MolecularDynamicsCalculation *""'"); 
  }
  arg1 = reinterpret_cast< MolecularDynamicsCalculation * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MolecularDynamicsCalculation_init(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  MolecularDynamicsCalculation *arg1 = (MolecularDynamicsCalculation *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  std::string *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int res7 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooooo:MolecularDynamicsCalculation_init self dcd pdb firstFrame lastFrame windowSize name ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_MolecularDynamicsCalculation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MolecularDynamicsCalculation_init" "', argument " "1"" of type '" "MolecularDynamicsCalculation *""'"); 
  }
  arg1 = reinterpret_cast< MolecularDynamicsCalculation * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MolecularDynamicsCalculation_init" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MolecularDynamicsCalculation_init" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[3], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MolecularDynamicsCalculation_init" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MolecularDynamicsCalculation_init" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MolecularDynamicsCalculation_init" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "MolecularDynamicsCalculation_init" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[6], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "MolecularDynamicsCalculation_init" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    std::string *ptr = (std::string *)0;
    res7 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[7], &ptr);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "MolecularDynamicsCalculation_init" "', argument " "7"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MolecularDynamicsCalculation_init" "', argument " "7"" of type '" "std::string const &""'"); 
    }
    arg7 = ptr;
  }
  (arg1)->init((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6,(std::string const &)*arg7);
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res7)) delete arg7;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res7)) delete arg7;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MolecularDynamicsCalculation_atoms(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  MolecularDynamicsCalculation *arg1 = (MolecularDynamicsCalculation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Atoms *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:MolecularDynamicsCalculation_atoms self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_MolecularDynamicsCalculation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MolecularDynamicsCalculation_atoms" "', argument " "1"" of type '" "MolecularDynamicsCalculation *""'"); 
  }
  arg1 = reinterpret_cast< MolecularDynamicsCalculation * >(argp1);
  result = (Atoms *)(arg1)->atoms();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Atoms,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MolecularDynamicsCalculation_nodes(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  MolecularDynamicsCalculation *arg1 = (MolecularDynamicsCalculation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Nodes *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:MolecularDynamicsCalculation_nodes self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_MolecularDynamicsCalculation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MolecularDynamicsCalculation_nodes" "', argument " "1"" of type '" "MolecularDynamicsCalculation *""'"); 
  }
  arg1 = reinterpret_cast< MolecularDynamicsCalculation * >(argp1);
  result = (Nodes *)(arg1)->nodes();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Nodes,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MolecularDynamicsCalculation_numFrames(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  MolecularDynamicsCalculation *arg1 = (MolecularDynamicsCalculation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:MolecularDynamicsCalculation_numFrames self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_MolecularDynamicsCalculation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MolecularDynamicsCalculation_numFrames" "', argument " "1"" of type '" "MolecularDynamicsCalculation const *""'"); 
  }
  arg1 = reinterpret_cast< MolecularDynamicsCalculation * >(argp1);
  result = (int)((MolecularDynamicsCalculation const *)arg1)->numFrames();
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MolecularDynamicsCalculation_numAtoms(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  MolecularDynamicsCalculation *arg1 = (MolecularDynamicsCalculation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:MolecularDynamicsCalculation_numAtoms self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_MolecularDynamicsCalculation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MolecularDynamicsCalculation_numAtoms" "', argument " "1"" of type '" "MolecularDynamicsCalculation const *""'"); 
  }
  arg1 = reinterpret_cast< MolecularDynamicsCalculation * >(argp1);
  result = (int)((MolecularDynamicsCalculation const *)arg1)->numAtoms();
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MolecularDynamicsCalculation_numNodes(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  MolecularDynamicsCalculation *arg1 = (MolecularDynamicsCalculation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:MolecularDynamicsCalculation_numNodes self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_MolecularDynamicsCalculation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MolecularDynamicsCalculation_numNodes" "', argument " "1"" of type '" "MolecularDynamicsCalculation const *""'"); 
  }
  arg1 = reinterpret_cast< MolecularDynamicsCalculation * >(argp1);
  result = (int)((MolecularDynamicsCalculation const *)arg1)->numNodes();
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MolecularDynamicsCalculation_dcd(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  MolecularDynamicsCalculation *arg1 = (MolecularDynamicsCalculation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:MolecularDynamicsCalculation_dcd self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_MolecularDynamicsCalculation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MolecularDynamicsCalculation_dcd" "', argument " "1"" of type '" "MolecularDynamicsCalculation *""'"); 
  }
  arg1 = reinterpret_cast< MolecularDynamicsCalculation * >(argp1);
  result = (arg1)->dcd();
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MolecularDynamicsCalculation_pdb(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  MolecularDynamicsCalculation *arg1 = (MolecularDynamicsCalculation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:MolecularDynamicsCalculation_pdb self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_MolecularDynamicsCalculation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MolecularDynamicsCalculation_pdb" "', argument " "1"" of type '" "MolecularDynamicsCalculation *""'"); 
  }
  arg1 = reinterpret_cast< MolecularDynamicsCalculation * >(argp1);
  result = (arg1)->pdb();
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MolecularDynamicsCalculation_mutualInformationAllocate(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  MolecularDynamicsCalculation *arg1 = (MolecularDynamicsCalculation *) 0 ;
  CurvaMatrix< double > *arg2 = (CurvaMatrix< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:MolecularDynamicsCalculation_mutualInformationAllocate self X ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_MolecularDynamicsCalculation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MolecularDynamicsCalculation_mutualInformationAllocate" "', argument " "1"" of type '" "MolecularDynamicsCalculation *""'"); 
  }
  arg1 = reinterpret_cast< MolecularDynamicsCalculation * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_CurvaMatrixT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MolecularDynamicsCalculation_mutualInformationAllocate" "', argument " "2"" of type '" "CurvaMatrix< double > *""'"); 
  }
  arg2 = reinterpret_cast< CurvaMatrix< double > * >(argp2);
  (arg1)->mutualInformationAllocate(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MolecularDynamicsCalculation_generalizedCorrelation(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  MolecularDynamicsCalculation *arg1 = (MolecularDynamicsCalculation *) 0 ;
  int arg2 ;
  double arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:MolecularDynamicsCalculation_generalizedCorrelation self referenceIndex cutoff k ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_MolecularDynamicsCalculation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MolecularDynamicsCalculation_generalizedCorrelation" "', argument " "1"" of type '" "MolecularDynamicsCalculation *""'"); 
  }
  arg1 = reinterpret_cast< MolecularDynamicsCalculation * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MolecularDynamicsCalculation_generalizedCorrelation" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MolecularDynamicsCalculation_generalizedCorrelation" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MolecularDynamicsCalculation_generalizedCorrelation" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  (arg1)->generalizedCorrelation(arg2,arg3,arg4);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MolecularDynamicsCalculation_generalizedCorrelationMatrix(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  MolecularDynamicsCalculation *arg1 = (MolecularDynamicsCalculation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CurvaMatrix< double > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:MolecularDynamicsCalculation_generalizedCorrelationMatrix self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_MolecularDynamicsCalculation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MolecularDynamicsCalculation_generalizedCorrelationMatrix" "', argument " "1"" of type '" "MolecularDynamicsCalculation const *""'"); 
  }
  arg1 = reinterpret_cast< MolecularDynamicsCalculation * >(argp1);
  result = (CurvaMatrix< double > *)((MolecularDynamicsCalculation const *)arg1)->generalizedCorrelationMatrix();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_CurvaMatrixT_double_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MolecularDynamicsCalculation_save__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  MolecularDynamicsCalculation *arg1 = (MolecularDynamicsCalculation *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:MolecularDynamicsCalculation_save self fname indent ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_MolecularDynamicsCalculation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MolecularDynamicsCalculation_save" "', argument " "1"" of type '" "MolecularDynamicsCalculation *""'"); 
  }
  arg1 = reinterpret_cast< MolecularDynamicsCalculation * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MolecularDynamicsCalculation_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MolecularDynamicsCalculation_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MolecularDynamicsCalculation_save" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->save((std::string const &)*arg2,arg3);
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MolecularDynamicsCalculation_save__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  MolecularDynamicsCalculation *arg1 = (MolecularDynamicsCalculation *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:MolecularDynamicsCalculation_save self fname ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_MolecularDynamicsCalculation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MolecularDynamicsCalculation_save" "', argument " "1"" of type '" "MolecularDynamicsCalculation *""'"); 
  }
  arg1 = reinterpret_cast< MolecularDynamicsCalculation * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MolecularDynamicsCalculation_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MolecularDynamicsCalculation_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->save((std::string const &)*arg2);
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MolecularDynamicsCalculation_save(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MolecularDynamicsCalculation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MolecularDynamicsCalculation_save__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MolecularDynamicsCalculation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MolecularDynamicsCalculation_save__SWIG_0(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'MolecularDynamicsCalculation_save'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    MolecularDynamicsCalculation::save(std::string const &,int)\n"
    "    MolecularDynamicsCalculation::save(std::string const &)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_MolecularDynamicsCalculation_load(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  MolecularDynamicsCalculation *arg1 = (MolecularDynamicsCalculation *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:MolecularDynamicsCalculation_load self fname ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_MolecularDynamicsCalculation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MolecularDynamicsCalculation_load" "', argument " "1"" of type '" "MolecularDynamicsCalculation *""'"); 
  }
  arg1 = reinterpret_cast< MolecularDynamicsCalculation * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MolecularDynamicsCalculation_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MolecularDynamicsCalculation_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->load((std::string const &)*arg2);
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_MolecularDynamicsCalculation(void *obj) {
MolecularDynamicsCalculation *arg1 = (MolecularDynamicsCalculation *) obj;
delete arg1;
}
static swig_method swig_MolecularDynamicsCalculation_methods[] = {
    {"init", _wrap_MolecularDynamicsCalculation_init}, 
    {"atoms", _wrap_MolecularDynamicsCalculation_atoms}, 
    {"nodes", _wrap_MolecularDynamicsCalculation_nodes}, 
    {"numFrames", _wrap_MolecularDynamicsCalculation_numFrames}, 
    {"numAtoms", _wrap_MolecularDynamicsCalculation_numAtoms}, 
    {"numNodes", _wrap_MolecularDynamicsCalculation_numNodes}, 
    {"dcd", _wrap_MolecularDynamicsCalculation_dcd}, 
    {"pdb", _wrap_MolecularDynamicsCalculation_pdb}, 
    {"mutualInformationAllocate", _wrap_MolecularDynamicsCalculation_mutualInformationAllocate}, 
    {"generalizedCorrelation", _wrap_MolecularDynamicsCalculation_generalizedCorrelation}, 
    {"generalizedCorrelationMatrix", _wrap_MolecularDynamicsCalculation_generalizedCorrelationMatrix}, 
    {"save", _wrap_MolecularDynamicsCalculation_save}, 
    {"load", _wrap_MolecularDynamicsCalculation_load}, 
    {0,0}
};
static swig_attribute swig_MolecularDynamicsCalculation_attributes[] = {
    {0,0,0}
};
static swig_class *swig_MolecularDynamicsCalculation_bases[] = {0};
static const char * swig_MolecularDynamicsCalculation_base_names[] = {0};
static swig_class _wrap_class_MolecularDynamicsCalculation = { "MolecularDynamicsCalculation", &SWIGTYPE_p_MolecularDynamicsCalculation,_wrap_new_MolecularDynamicsCalculation, swig_delete_MolecularDynamicsCalculation, swig_MolecularDynamicsCalculation_methods, swig_MolecularDynamicsCalculation_attributes, swig_MolecularDynamicsCalculation_bases,swig_MolecularDynamicsCalculation_base_names, &swig_module, SWIG_TCL_HASHTABLE_INIT };
SWIGINTERN int
_wrap_new_Atom__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Atom *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_Atom ") == TCL_ERROR) SWIG_fail;
  result = (Atom *)new Atom();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Atom,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_Atom__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::string *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Atom *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_Atom pdbLine ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Atom" "', argument " "1"" of type '" "std::string &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Atom" "', argument " "1"" of type '" "std::string &""'"); 
  }
  arg1 = reinterpret_cast< std::string * >(argp1);
  result = (Atom *)new Atom(*arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Atom,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_Atom(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_Atom__SWIG_0(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Atom__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'new_Atom'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Atom::Atom()\n"
    "    Atom::Atom(std::string &)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Atom_index(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Atom *arg1 = (Atom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Atom_index self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Atom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Atom_index" "', argument " "1"" of type '" "Atom const *""'"); 
  }
  arg1 = reinterpret_cast< Atom * >(argp1);
  result = (int)((Atom const *)arg1)->index();
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Atom_name(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Atom *arg1 = (Atom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Atom_name self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Atom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Atom_name" "', argument " "1"" of type '" "Atom *""'"); 
  }
  arg1 = reinterpret_cast< Atom * >(argp1);
  result = (arg1)->name();
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Atom_element(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Atom *arg1 = (Atom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Atom_element self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Atom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Atom_element" "', argument " "1"" of type '" "Atom *""'"); 
  }
  arg1 = reinterpret_cast< Atom * >(argp1);
  result = (arg1)->element();
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Atom_residueName(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Atom *arg1 = (Atom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Atom_residueName self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Atom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Atom_residueName" "', argument " "1"" of type '" "Atom *""'"); 
  }
  arg1 = reinterpret_cast< Atom * >(argp1);
  result = (arg1)->residueName();
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Atom_residueId(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Atom *arg1 = (Atom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Atom_residueId self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Atom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Atom_residueId" "', argument " "1"" of type '" "Atom const *""'"); 
  }
  arg1 = reinterpret_cast< Atom * >(argp1);
  result = (int)((Atom const *)arg1)->residueId();
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Atom_chainId(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Atom *arg1 = (Atom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Atom_chainId self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Atom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Atom_chainId" "', argument " "1"" of type '" "Atom *""'"); 
  }
  arg1 = reinterpret_cast< Atom * >(argp1);
  result = (arg1)->chainId();
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Atom_segmentId(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Atom *arg1 = (Atom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Atom_segmentId self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Atom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Atom_segmentId" "', argument " "1"" of type '" "Atom *""'"); 
  }
  arg1 = reinterpret_cast< Atom * >(argp1);
  result = (arg1)->segmentId();
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Atom_temperatureFactor(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Atom *arg1 = (Atom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Atom_temperatureFactor self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Atom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Atom_temperatureFactor" "', argument " "1"" of type '" "Atom const *""'"); 
  }
  arg1 = reinterpret_cast< Atom * >(argp1);
  result = (double)((Atom const *)arg1)->temperatureFactor();
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Atom_occupancy(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Atom *arg1 = (Atom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Atom_occupancy self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Atom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Atom_occupancy" "', argument " "1"" of type '" "Atom const *""'"); 
  }
  arg1 = reinterpret_cast< Atom * >(argp1);
  result = (double)((Atom const *)arg1)->occupancy();
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Atom_serial(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Atom *arg1 = (Atom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Atom_serial self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Atom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Atom_serial" "', argument " "1"" of type '" "Atom const *""'"); 
  }
  arg1 = reinterpret_cast< Atom * >(argp1);
  result = (int)((Atom const *)arg1)->serial();
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Atom_tag(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Atom *arg1 = (Atom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Atom_tag self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Atom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Atom_tag" "', argument " "1"" of type '" "Atom *""'"); 
  }
  arg1 = reinterpret_cast< Atom * >(argp1);
  result = (arg1)->tag();
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Atom_x(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Atom *arg1 = (Atom *) 0 ;
  Coordinates *arg2 = (Coordinates *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:Atom_x self coordinates frameIndex ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Atom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Atom_x" "', argument " "1"" of type '" "Atom const *""'"); 
  }
  arg1 = reinterpret_cast< Atom * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_Coordinates, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Atom_x" "', argument " "2"" of type '" "Coordinates *""'"); 
  }
  arg2 = reinterpret_cast< Coordinates * >(argp2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Atom_x" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (double)((Atom const *)arg1)->x(arg2,arg3);
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Atom_y(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Atom *arg1 = (Atom *) 0 ;
  Coordinates *arg2 = (Coordinates *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:Atom_y self coordinates frameIndex ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Atom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Atom_y" "', argument " "1"" of type '" "Atom const *""'"); 
  }
  arg1 = reinterpret_cast< Atom * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_Coordinates, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Atom_y" "', argument " "2"" of type '" "Coordinates *""'"); 
  }
  arg2 = reinterpret_cast< Coordinates * >(argp2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Atom_y" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (double)((Atom const *)arg1)->y(arg2,arg3);
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Atom_z(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Atom *arg1 = (Atom *) 0 ;
  Coordinates *arg2 = (Coordinates *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:Atom_z self coordinates frameIndex ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Atom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Atom_z" "', argument " "1"" of type '" "Atom const *""'"); 
  }
  arg1 = reinterpret_cast< Atom * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_Coordinates, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Atom_z" "', argument " "2"" of type '" "Coordinates *""'"); 
  }
  arg2 = reinterpret_cast< Coordinates * >(argp2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Atom_z" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (double)((Atom const *)arg1)->z(arg2,arg3);
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Atom_mass(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Atom *arg1 = (Atom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Atom_mass self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Atom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Atom_mass" "', argument " "1"" of type '" "Atom const *""'"); 
  }
  arg1 = reinterpret_cast< Atom * >(argp1);
  result = (double)((Atom const *)arg1)->mass();
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Atom_hash(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Atom *arg1 = (Atom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Atom_hash self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Atom, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Atom_hash" "', argument " "1"" of type '" "Atom const *""'"); 
  }
  arg1 = reinterpret_cast< Atom * >(argp1);
  result = (unsigned int)((Atom const *)arg1)->hash();
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_Atom(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Atom *arg1 = (Atom *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_Atom self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Atom, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Atom" "', argument " "1"" of type '" "Atom *""'"); 
  }
  arg1 = reinterpret_cast< Atom * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_Atom(void *obj) {
Atom *arg1 = (Atom *) obj;
delete arg1;
}
static swig_method swig_Atom_methods[] = {
    {"index", _wrap_Atom_index}, 
    {"name", _wrap_Atom_name}, 
    {"element", _wrap_Atom_element}, 
    {"residueName", _wrap_Atom_residueName}, 
    {"residueId", _wrap_Atom_residueId}, 
    {"chainId", _wrap_Atom_chainId}, 
    {"segmentId", _wrap_Atom_segmentId}, 
    {"temperatureFactor", _wrap_Atom_temperatureFactor}, 
    {"occupancy", _wrap_Atom_occupancy}, 
    {"serial", _wrap_Atom_serial}, 
    {"tag", _wrap_Atom_tag}, 
    {"x", _wrap_Atom_x}, 
    {"y", _wrap_Atom_y}, 
    {"z", _wrap_Atom_z}, 
    {"mass", _wrap_Atom_mass}, 
    {"hash", _wrap_Atom_hash}, 
    {0,0}
};
static swig_attribute swig_Atom_attributes[] = {
    {0,0,0}
};
static swig_class *swig_Atom_bases[] = {0};
static const char * swig_Atom_base_names[] = {0};
static swig_class _wrap_class_Atom = { "Atom", &SWIGTYPE_p_Atom,_wrap_new_Atom, swig_delete_Atom, swig_Atom_methods, swig_Atom_attributes, swig_Atom_bases,swig_Atom_base_names, &swig_module, SWIG_TCL_HASHTABLE_INIT };
SWIGINTERN int
_wrap_new_Node__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Node *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_Node ") == TCL_ERROR) SWIG_fail;
  result = (Node *)new Node();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Node,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_Node__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  nlohmann::json arg1 ;
  std::string *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  Node *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:new_Node j serializationDirectory ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_nlohmann__json,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Node" "', argument " "1"" of type '" "nlohmann::json""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Node" "', argument " "1"" of type '" "nlohmann::json""'");
    } else {
      arg1 = *(reinterpret_cast< nlohmann::json * >(argp1));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Node" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Node" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (Node *)new Node(arg1,(std::string const &)*arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Node,0));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_Node__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  Node *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:new_Node numFrames index_ numWindows ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Node" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Node" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Node" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (Node *)new Node(arg1,arg2,arg3);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Node,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_Node(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_Node__SWIG_0(clientData, interp, objc, argv - 1);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_nlohmann__json, SWIG_POINTER_NO_NULL);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Node__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Node__SWIG_2(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'new_Node'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Node::Node()\n"
    "    Node::Node(nlohmann::json,std::string const &)\n"
    "    Node::Node(unsigned int,unsigned int,unsigned int)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Node_addAtom(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Node *arg1 = (Node *) 0 ;
  Atom *arg2 = (Atom *) 0 ;
  Coordinates *arg3 = (Coordinates *) 0 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:Node_addAtom self atom coordinates windowSize ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_addAtom" "', argument " "1"" of type '" "Node *""'"); 
  }
  arg1 = reinterpret_cast< Node * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_Atom, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Node_addAtom" "', argument " "2"" of type '" "Atom *""'"); 
  }
  arg2 = reinterpret_cast< Atom * >(argp2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_Coordinates, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Node_addAtom" "', argument " "3"" of type '" "Coordinates *""'"); 
  }
  arg3 = reinterpret_cast< Coordinates * >(argp3);
  ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Node_addAtom" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  (arg1)->addAtom(arg2,arg3,arg4);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Node_centerOfMass(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Node *arg1 = (Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Node_centerOfMass self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_centerOfMass" "', argument " "1"" of type '" "Node *""'"); 
  }
  arg1 = reinterpret_cast< Node * >(argp1);
  result = (std::vector< double > *) &(arg1)->centerOfMass();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Node_averageCenterOfMass(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Node *arg1 = (Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Node_averageCenterOfMass self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_averageCenterOfMass" "', argument " "1"" of type '" "Node *""'"); 
  }
  arg1 = reinterpret_cast< Node * >(argp1);
  result = (std::vector< double > *) &(arg1)->averageCenterOfMass();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Node_tag(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Node *arg1 = (Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Node_tag self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_tag" "', argument " "1"" of type '" "Node *""'"); 
  }
  arg1 = reinterpret_cast< Node * >(argp1);
  result = (arg1)->tag();
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Node_numAtoms(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Node *arg1 = (Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Node_numAtoms self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_numAtoms" "', argument " "1"" of type '" "Node const *""'"); 
  }
  arg1 = reinterpret_cast< Node * >(argp1);
  result = (unsigned int)((Node const *)arg1)->numAtoms();
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Node_index(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Node *arg1 = (Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Node_index self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_index" "', argument " "1"" of type '" "Node const *""'"); 
  }
  arg1 = reinterpret_cast< Node * >(argp1);
  result = (unsigned int)((Node const *)arg1)->index();
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Node_totalMass(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Node *arg1 = (Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Node_totalMass self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_totalMass" "', argument " "1"" of type '" "Node const *""'"); 
  }
  arg1 = reinterpret_cast< Node * >(argp1);
  result = (double)((Node const *)arg1)->totalMass();
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Node_list(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Node *arg1 = (Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< Atom > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Node_list self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_list" "', argument " "1"" of type '" "Node *""'"); 
  }
  arg1 = reinterpret_cast< Node * >(argp1);
  result = (arg1)->TCL_list();
  {
    for (unsigned int i=0; i<(&result)->size(); i++) {
      Atom* ptr = new Atom(((std::vector< Atom > &)result)[i]);
      Tcl_ListObjAppendElement(interp, (Tcl_GetObjResult(interp)), \
        SWIG_NewInstanceObj(ptr, 
          SWIGTYPE_p_Atom, 
          0));
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Node_serializationDirectory__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Node *arg1 = (Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Node_serializationDirectory self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_serializationDirectory" "', argument " "1"" of type '" "Node *""'"); 
  }
  arg1 = reinterpret_cast< Node * >(argp1);
  result = (arg1)->serializationDirectory();
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Node_serializationDirectory__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Node *arg1 = (Node *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Node_serializationDirectory self serializationDirectory ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_serializationDirectory" "', argument " "1"" of type '" "Node *""'"); 
  }
  arg1 = reinterpret_cast< Node * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Node_serializationDirectory" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  (arg1)->serializationDirectory(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Node_serializationDirectory(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Node_serializationDirectory__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Node_serializationDirectory__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'Node_serializationDirectory'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Node::serializationDirectory()\n"
    "    Node::serializationDirectory(std::string)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Node_calculationName__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Node *arg1 = (Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Node_calculationName self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_calculationName" "', argument " "1"" of type '" "Node *""'"); 
  }
  arg1 = reinterpret_cast< Node * >(argp1);
  result = (arg1)->calculationName();
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Node_calculationName__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Node *arg1 = (Node *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Node_calculationName self calculationName ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_calculationName" "', argument " "1"" of type '" "Node *""'"); 
  }
  arg1 = reinterpret_cast< Node * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Node_calculationName" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  (arg1)->calculationName(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Node_calculationName(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Node_calculationName__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Node_calculationName__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'Node_calculationName'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Node::calculationName()\n"
    "    Node::calculationName(std::string)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Node_hash(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Node *arg1 = (Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Node_hash self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_hash" "', argument " "1"" of type '" "Node const *""'"); 
  }
  arg1 = reinterpret_cast< Node * >(argp1);
  result = (unsigned int)((Node const *)arg1)->hash();
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_Node(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Node *arg1 = (Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_Node self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Node, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Node" "', argument " "1"" of type '" "Node *""'"); 
  }
  arg1 = reinterpret_cast< Node * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_Node(void *obj) {
Node *arg1 = (Node *) obj;
delete arg1;
}
static swig_method swig_Node_methods[] = {
    {"addAtom", _wrap_Node_addAtom}, 
    {"centerOfMass", _wrap_Node_centerOfMass}, 
    {"averageCenterOfMass", _wrap_Node_averageCenterOfMass}, 
    {"tag", _wrap_Node_tag}, 
    {"numAtoms", _wrap_Node_numAtoms}, 
    {"index", _wrap_Node_index}, 
    {"totalMass", _wrap_Node_totalMass}, 
    {"list", _wrap_Node_list}, 
    {"serializationDirectory", _wrap_Node_serializationDirectory}, 
    {"calculationName", _wrap_Node_calculationName}, 
    {"hash", _wrap_Node_hash}, 
    {0,0}
};
static swig_attribute swig_Node_attributes[] = {
    {0,0,0}
};
static swig_class *swig_Node_bases[] = {0};
static const char * swig_Node_base_names[] = {0};
static swig_class _wrap_class_Node = { "Node", &SWIGTYPE_p_Node,_wrap_new_Node, swig_delete_Node, swig_Node_methods, swig_Node_attributes, swig_Node_bases,swig_Node_base_names, &swig_module, SWIG_TCL_HASHTABLE_INIT };
SWIGINTERN int
_wrap_new_Nodes(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Nodes *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_Nodes ") == TCL_ERROR) SWIG_fail;
  result = (Nodes *)new Nodes();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Nodes,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_Nodes(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Nodes *arg1 = (Nodes *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_Nodes self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Nodes, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Nodes" "', argument " "1"" of type '" "Nodes *""'"); 
  }
  arg1 = reinterpret_cast< Nodes * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Nodes_init(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Nodes *arg1 = (Nodes *) 0 ;
  Atoms *arg2 = (Atoms *) 0 ;
  Coordinates *arg3 = (Coordinates *) 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooo:Nodes_init self atoms coordinates numFrames numWindows ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Nodes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Nodes_init" "', argument " "1"" of type '" "Nodes *""'"); 
  }
  arg1 = reinterpret_cast< Nodes * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_Atoms, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Nodes_init" "', argument " "2"" of type '" "Atoms *""'"); 
  }
  arg2 = reinterpret_cast< Atoms * >(argp2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_Coordinates, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Nodes_init" "', argument " "3"" of type '" "Coordinates *""'"); 
  }
  arg3 = reinterpret_cast< Coordinates * >(argp3);
  ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Nodes_init" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Nodes_init" "', argument " "5"" of type '" "unsigned int""'");
  } 
  arg5 = static_cast< unsigned int >(val5);
  (arg1)->init(arg2,arg3,arg4,arg5);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Nodes_numNodes(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Nodes *arg1 = (Nodes *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Nodes_numNodes self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Nodes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Nodes_numNodes" "', argument " "1"" of type '" "Nodes const *""'"); 
  }
  arg1 = reinterpret_cast< Nodes * >(argp1);
  result = (unsigned int)((Nodes const *)arg1)->numNodes();
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Nodes_nodeFromAtomIndex(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Nodes *arg1 = (Nodes *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Node *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Nodes_nodeFromAtomIndex self atomIndex ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Nodes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Nodes_nodeFromAtomIndex" "', argument " "1"" of type '" "Nodes *""'"); 
  }
  arg1 = reinterpret_cast< Nodes * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Nodes_nodeFromAtomIndex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (Node *)(arg1)->nodeFromAtomIndex(arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Node,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Nodes_at(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Nodes *arg1 = (Nodes *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Node *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Nodes_at self nodeIndex ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Nodes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Nodes_at" "', argument " "1"" of type '" "Nodes *""'"); 
  }
  arg1 = reinterpret_cast< Nodes * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Nodes_at" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (Node *)(arg1)->at(arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Node,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Nodes_list(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Nodes *arg1 = (Nodes *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< Node > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Nodes_list self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Nodes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Nodes_list" "', argument " "1"" of type '" "Nodes *""'"); 
  }
  arg1 = reinterpret_cast< Nodes * >(argp1);
  result = (arg1)->TCL_list();
  {
    for (unsigned int i=0; i<(&result)->size(); i++) {
      Node* ptr = new Node(((std::vector< Node > &)result)[i]);
      Tcl_ListObjAppendElement(interp, (Tcl_GetObjResult(interp)), \
        SWIG_NewInstanceObj(ptr, 
          SWIGTYPE_p_Node, 
          0));
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Nodes_save(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Nodes *arg1 = (Nodes *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  nlohmann::json result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:Nodes_save self serializationDirectory calculationName ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Nodes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Nodes_save" "', argument " "1"" of type '" "Nodes *""'"); 
  }
  arg1 = reinterpret_cast< Nodes * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Nodes_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Nodes_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[3], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Nodes_save" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Nodes_save" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->save((std::string const &)*arg2,(std::string const &)*arg3);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new nlohmann::json(static_cast< const nlohmann::json& >(result))), SWIGTYPE_p_nlohmann__json, SWIG_POINTER_OWN | 0 ));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Nodes_load(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Nodes *arg1 = (Nodes *) 0 ;
  nlohmann::json *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:Nodes_load self j serializationDirectory ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Nodes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Nodes_load" "', argument " "1"" of type '" "Nodes *""'"); 
  }
  arg1 = reinterpret_cast< Nodes * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_nlohmann__json,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Nodes_load" "', argument " "2"" of type '" "nlohmann::json const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Nodes_load" "', argument " "2"" of type '" "nlohmann::json const &""'"); 
  }
  arg2 = reinterpret_cast< nlohmann::json * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[3], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Nodes_load" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Nodes_load" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->load((nlohmann::json const &)*arg2,(std::string const &)*arg3);
  
  if (SWIG_IsNewObj(res3)) delete arg3;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_Nodes(void *obj) {
Nodes *arg1 = (Nodes *) obj;
delete arg1;
}
static swig_method swig_Nodes_methods[] = {
    {"init", _wrap_Nodes_init}, 
    {"numNodes", _wrap_Nodes_numNodes}, 
    {"nodeFromAtomIndex", _wrap_Nodes_nodeFromAtomIndex}, 
    {"at", _wrap_Nodes_at}, 
    {"list", _wrap_Nodes_list}, 
    {"save", _wrap_Nodes_save}, 
    {"load", _wrap_Nodes_load}, 
    {0,0}
};
static swig_attribute swig_Nodes_attributes[] = {
    {0,0,0}
};
static swig_class *swig_Nodes_bases[] = {0};
static const char * swig_Nodes_base_names[] = {0};
static swig_class _wrap_class_Nodes = { "Nodes", &SWIGTYPE_p_Nodes,_wrap_new_Nodes, swig_delete_Nodes, swig_Nodes_methods, swig_Nodes_attributes, swig_Nodes_bases,swig_Nodes_base_names, &swig_module, SWIG_TCL_HASHTABLE_INIT };
SWIGINTERN int
_wrap_new_Atoms(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Atoms *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_Atoms ") == TCL_ERROR) SWIG_fail;
  result = (Atoms *)new Atoms();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Atoms,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Atoms_addAtom(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Atoms *arg1 = (Atoms *) 0 ;
  Atom arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Atoms_addAtom self atom ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Atoms, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Atoms_addAtom" "', argument " "1"" of type '" "Atoms *""'"); 
  }
  arg1 = reinterpret_cast< Atoms * >(argp1);
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_Atom,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Atoms_addAtom" "', argument " "2"" of type '" "Atom""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Atoms_addAtom" "', argument " "2"" of type '" "Atom""'");
    } else {
      arg2 = *(reinterpret_cast< Atom * >(argp2));
    }
  }
  (arg1)->addAtom(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Atoms_numAtoms(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Atoms *arg1 = (Atoms *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Atoms_numAtoms self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Atoms, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Atoms_numAtoms" "', argument " "1"" of type '" "Atoms const *""'"); 
  }
  arg1 = reinterpret_cast< Atoms * >(argp1);
  result = (int)((Atoms const *)arg1)->numAtoms();
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Atoms_at(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Atoms *arg1 = (Atoms *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Atom *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Atoms_at self atomIndex ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Atoms, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Atoms_at" "', argument " "1"" of type '" "Atoms *""'"); 
  }
  arg1 = reinterpret_cast< Atoms * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Atoms_at" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (Atom *) &(arg1)->at(arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Atom,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_Atoms(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Atoms *arg1 = (Atoms *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_Atoms self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Atoms, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Atoms" "', argument " "1"" of type '" "Atoms *""'"); 
  }
  arg1 = reinterpret_cast< Atoms * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_Atoms(void *obj) {
Atoms *arg1 = (Atoms *) obj;
delete arg1;
}
static swig_method swig_Atoms_methods[] = {
    {"addAtom", _wrap_Atoms_addAtom}, 
    {"numAtoms", _wrap_Atoms_numAtoms}, 
    {"at", _wrap_Atoms_at}, 
    {0,0}
};
static swig_attribute swig_Atoms_attributes[] = {
    {0,0,0}
};
static swig_class *swig_Atoms_bases[] = {0};
static const char * swig_Atoms_base_names[] = {0};
static swig_class _wrap_class_Atoms = { "Atoms", &SWIGTYPE_p_Atoms,_wrap_new_Atoms, swig_delete_Atoms, swig_Atoms_methods, swig_Atoms_attributes, swig_Atoms_bases,swig_Atoms_base_names, &swig_module, SWIG_TCL_HASHTABLE_INIT };
SWIGINTERN int
_wrap_new_Coordinates(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Coordinates *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_Coordinates ") == TCL_ERROR) SWIG_fail;
  result = (Coordinates *)new Coordinates();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_Coordinates,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_Coordinates(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Coordinates *arg1 = (Coordinates *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_Coordinates self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Coordinates, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Coordinates" "', argument " "1"" of type '" "Coordinates *""'"); 
  }
  arg1 = reinterpret_cast< Coordinates * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Coordinates_init(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Coordinates *arg1 = (Coordinates *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:Coordinates_init self numAtoms_ numFrames_ ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Coordinates, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coordinates_init" "', argument " "1"" of type '" "Coordinates *""'"); 
  }
  arg1 = reinterpret_cast< Coordinates * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Coordinates_init" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Coordinates_init" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  (arg1)->init(arg2,arg3);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Coordinates_x(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Coordinates *arg1 = (Coordinates *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:Coordinates_x self index frame ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Coordinates, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coordinates_x" "', argument " "1"" of type '" "Coordinates *""'"); 
  }
  arg1 = reinterpret_cast< Coordinates * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Coordinates_x" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Coordinates_x" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (double)(arg1)->x(arg2,arg3);
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Coordinates_y(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Coordinates *arg1 = (Coordinates *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:Coordinates_y self index frame ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Coordinates, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coordinates_y" "', argument " "1"" of type '" "Coordinates *""'"); 
  }
  arg1 = reinterpret_cast< Coordinates * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Coordinates_y" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Coordinates_y" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (double)(arg1)->y(arg2,arg3);
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Coordinates_z(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Coordinates *arg1 = (Coordinates *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:Coordinates_z self index frame ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Coordinates, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coordinates_z" "', argument " "1"" of type '" "Coordinates *""'"); 
  }
  arg1 = reinterpret_cast< Coordinates * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Coordinates_z" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Coordinates_z" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (double)(arg1)->z(arg2,arg3);
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Coordinates_numAtoms(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Coordinates *arg1 = (Coordinates *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Coordinates_numAtoms self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Coordinates, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coordinates_numAtoms" "', argument " "1"" of type '" "Coordinates const *""'"); 
  }
  arg1 = reinterpret_cast< Coordinates * >(argp1);
  result = (unsigned int)((Coordinates const *)arg1)->numAtoms();
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Coordinates_numFrames(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Coordinates *arg1 = (Coordinates *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Coordinates_numFrames self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_Coordinates, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coordinates_numFrames" "', argument " "1"" of type '" "Coordinates const *""'"); 
  }
  arg1 = reinterpret_cast< Coordinates * >(argp1);
  result = (unsigned int)((Coordinates const *)arg1)->numFrames();
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_Coordinates(void *obj) {
Coordinates *arg1 = (Coordinates *) obj;
delete arg1;
}
static swig_method swig_Coordinates_methods[] = {
    {"init", _wrap_Coordinates_init}, 
    {"x", _wrap_Coordinates_x}, 
    {"y", _wrap_Coordinates_y}, 
    {"z", _wrap_Coordinates_z}, 
    {"numAtoms", _wrap_Coordinates_numAtoms}, 
    {"numFrames", _wrap_Coordinates_numFrames}, 
    {0,0}
};
static swig_attribute swig_Coordinates_attributes[] = {
    {0,0,0}
};
static swig_class *swig_Coordinates_bases[] = {0};
static const char * swig_Coordinates_base_names[] = {0};
static swig_class _wrap_class_Coordinates = { "Coordinates", &SWIGTYPE_p_Coordinates,_wrap_new_Coordinates, swig_delete_Coordinates, swig_Coordinates_methods, swig_Coordinates_attributes, swig_Coordinates_bases,swig_Coordinates_base_names, &swig_module, SWIG_TCL_HASHTABLE_INIT };
SWIGINTERN int
_wrap_delete_dCurvaVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaVector< double > *arg1 = (CurvaVector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_dCurvaVector self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaVectorT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_dCurvaVector" "', argument " "1"" of type '" "CurvaVector< double > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaVector< double > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_dCurvaVector_init__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaVector< double > *arg1 = (CurvaVector< double > *) 0 ;
  CurvaMatrix< double > *arg2 = (CurvaMatrix< double > *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:dCurvaVector_init self curvaMatrix row ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaVectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dCurvaVector_init" "', argument " "1"" of type '" "CurvaVector< double > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaVector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_CurvaMatrixT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dCurvaVector_init" "', argument " "2"" of type '" "CurvaMatrix< double > *""'"); 
  }
  arg2 = reinterpret_cast< CurvaMatrix< double > * >(argp2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "dCurvaVector_init" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->init(arg2,arg3);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_dCurvaVector_init__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaVector< double > *arg1 = (CurvaVector< double > *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:dCurvaVector_init self data_ ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaVectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dCurvaVector_init" "', argument " "1"" of type '" "CurvaVector< double > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaVector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dCurvaVector_init" "', argument " "2"" of type '" "std::vector< double > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double > * >(argp2);
  (arg1)->init(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_dCurvaVector_init(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CurvaVectorT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_dCurvaVector_init__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CurvaVectorT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CurvaMatrixT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_dCurvaVector_init__SWIG_0(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'dCurvaVector_init'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CurvaVector< double >::init(CurvaMatrix< double > *,int)\n"
    "    CurvaVector< double >::init(std::vector< double > *)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_dCurvaVector_size(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaVector< double > *arg1 = (CurvaVector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:dCurvaVector_size self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaVectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dCurvaVector_size" "', argument " "1"" of type '" "CurvaVector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< CurvaVector< double > * >(argp1);
  result = (unsigned int)((CurvaVector< double > const *)arg1)->size();
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_dCurvaVector_sortAscending(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaVector< double > *arg1 = (CurvaVector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:dCurvaVector_sortAscending self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaVectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dCurvaVector_sortAscending" "', argument " "1"" of type '" "CurvaVector< double > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaVector< double > * >(argp1);
  (arg1)->sortAscending();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_dCurvaVector_sortDescending(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaVector< double > *arg1 = (CurvaVector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:dCurvaVector_sortDescending self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaVectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dCurvaVector_sortDescending" "', argument " "1"" of type '" "CurvaVector< double > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaVector< double > * >(argp1);
  (arg1)->sortDescending();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_dCurvaVector_argsortAscending(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaVector< double > *arg1 = (CurvaVector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:dCurvaVector_argsortAscending self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaVectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dCurvaVector_argsortAscending" "', argument " "1"" of type '" "CurvaVector< double > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaVector< double > * >(argp1);
  result = (std::vector< int > *) &(arg1)->argsortAscending();
  {
    for (auto &i : *result) {
      Tcl_Obj *obj = Tcl_NewIntObj(i);
      Tcl_ListObjAppendElement(interp, (Tcl_GetObjResult(interp)), obj);
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_dCurvaVector_argsortDescending(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaVector< double > *arg1 = (CurvaVector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:dCurvaVector_argsortDescending self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaVectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dCurvaVector_argsortDescending" "', argument " "1"" of type '" "CurvaVector< double > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaVector< double > * >(argp1);
  result = (std::vector< int > *) &(arg1)->argsortDescending();
  {
    for (auto &i : *result) {
      Tcl_Obj *obj = Tcl_NewIntObj(i);
      Tcl_ListObjAppendElement(interp, (Tcl_GetObjResult(interp)), obj);
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_dCurvaVector_sortAscendingAbs(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaVector< double > *arg1 = (CurvaVector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:dCurvaVector_sortAscendingAbs self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaVectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dCurvaVector_sortAscendingAbs" "', argument " "1"" of type '" "CurvaVector< double > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaVector< double > * >(argp1);
  (arg1)->sortAscendingAbs();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_dCurvaVector_sortDescendingAbs(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaVector< double > *arg1 = (CurvaVector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:dCurvaVector_sortDescendingAbs self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaVectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dCurvaVector_sortDescendingAbs" "', argument " "1"" of type '" "CurvaVector< double > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaVector< double > * >(argp1);
  (arg1)->sortDescendingAbs();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_dCurvaVector_bytes(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaVector< double > *arg1 = (CurvaVector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:dCurvaVector_bytes self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaVectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dCurvaVector_bytes" "', argument " "1"" of type '" "CurvaVector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< CurvaVector< double > * >(argp1);
  result = ((CurvaVector< double > const *)arg1)->bytes();
  Tcl_SetObjResult(interp,SWIG_From_size_t(static_cast< size_t >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_dCurvaVector_argsortAscendingAbs(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaVector< double > *arg1 = (CurvaVector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:dCurvaVector_argsortAscendingAbs self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaVectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dCurvaVector_argsortAscendingAbs" "', argument " "1"" of type '" "CurvaVector< double > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaVector< double > * >(argp1);
  result = (std::vector< int > *) &(arg1)->argsortAscendingAbs();
  {
    for (auto &i : *result) {
      Tcl_Obj *obj = Tcl_NewIntObj(i);
      Tcl_ListObjAppendElement(interp, (Tcl_GetObjResult(interp)), obj);
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_dCurvaVector_argsortDescendingAbs(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaVector< double > *arg1 = (CurvaVector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:dCurvaVector_argsortDescendingAbs self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaVectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dCurvaVector_argsortDescendingAbs" "', argument " "1"" of type '" "CurvaVector< double > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaVector< double > * >(argp1);
  result = (std::vector< int > *) &(arg1)->argsortDescendingAbs();
  {
    for (auto &i : *result) {
      Tcl_Obj *obj = Tcl_NewIntObj(i);
      Tcl_ListObjAppendElement(interp, (Tcl_GetObjResult(interp)), obj);
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_dCurvaVector_load(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaVector< double > *arg1 = (CurvaVector< double > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:dCurvaVector_load self fname ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaVectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dCurvaVector_load" "', argument " "1"" of type '" "CurvaVector< double > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaVector< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dCurvaVector_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dCurvaVector_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->load((std::string const &)*arg2);
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_dCurvaVector_save(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaVector< double > *arg1 = (CurvaVector< double > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:dCurvaVector_save self fname ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaVectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dCurvaVector_save" "', argument " "1"" of type '" "CurvaVector< double > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaVector< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dCurvaVector_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dCurvaVector_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->save((std::string const &)*arg2);
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_dCurvaVector_at(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaVector< double > *arg1 = (CurvaVector< double > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:dCurvaVector_at self index ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaVectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dCurvaVector_at" "', argument " "1"" of type '" "CurvaVector< double > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaVector< double > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dCurvaVector_at" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (double)(arg1)->at(arg2);
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_dCurvaVector_list(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaVector< double > *arg1 = (CurvaVector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:dCurvaVector_list self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaVectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dCurvaVector_list" "', argument " "1"" of type '" "CurvaVector< double > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaVector< double > * >(argp1);
  result = CurvaVector_Sl_double_Sg__list(arg1);
  {
    for (auto &i : result) {
      Tcl_Obj *obj = Tcl_NewDoubleObj(i);
      Tcl_ListObjAppendElement(interp, (Tcl_GetObjResult(interp)), obj);
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_dCurvaVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaVector< double > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_dCurvaVector ") == TCL_ERROR) SWIG_fail;
  result = (CurvaVector< double > *)new CurvaVector< double >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_CurvaVectorT_double_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_dCurvaVector(void *obj) {
CurvaVector< double > *arg1 = (CurvaVector< double > *) obj;
delete arg1;
}
static swig_method swig_CurvaVector_Sl_double_Sg__methods[] = {
    {"init", _wrap_dCurvaVector_init}, 
    {"size", _wrap_dCurvaVector_size}, 
    {"sortAscending", _wrap_dCurvaVector_sortAscending}, 
    {"sortDescending", _wrap_dCurvaVector_sortDescending}, 
    {"argsortAscending", _wrap_dCurvaVector_argsortAscending}, 
    {"argsortDescending", _wrap_dCurvaVector_argsortDescending}, 
    {"sortAscendingAbs", _wrap_dCurvaVector_sortAscendingAbs}, 
    {"sortDescendingAbs", _wrap_dCurvaVector_sortDescendingAbs}, 
    {"bytes", _wrap_dCurvaVector_bytes}, 
    {"argsortAscendingAbs", _wrap_dCurvaVector_argsortAscendingAbs}, 
    {"argsortDescendingAbs", _wrap_dCurvaVector_argsortDescendingAbs}, 
    {"load", _wrap_dCurvaVector_load}, 
    {"save", _wrap_dCurvaVector_save}, 
    {"at", _wrap_dCurvaVector_at}, 
    {"list", _wrap_dCurvaVector_list}, 
    {0,0}
};
static swig_attribute swig_CurvaVector_Sl_double_Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_CurvaVector_Sl_double_Sg__bases[] = {0};
static const char * swig_CurvaVector_Sl_double_Sg__base_names[] = {0};
static swig_class _wrap_class_CurvaVector_Sl_double_Sg_ = { "dCurvaVector", &SWIGTYPE_p_CurvaVectorT_double_t,_wrap_new_dCurvaVector, swig_delete_dCurvaVector, swig_CurvaVector_Sl_double_Sg__methods, swig_CurvaVector_Sl_double_Sg__attributes, swig_CurvaVector_Sl_double_Sg__bases,swig_CurvaVector_Sl_double_Sg__base_names, &swig_module, SWIG_TCL_HASHTABLE_INIT };
SWIGINTERN int
_wrap_delete_iCurvaVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaVector< int > *arg1 = (CurvaVector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_iCurvaVector self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaVectorT_int_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_iCurvaVector" "', argument " "1"" of type '" "CurvaVector< int > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaVector< int > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_iCurvaVector_init__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaVector< int > *arg1 = (CurvaVector< int > *) 0 ;
  CurvaMatrix< int > *arg2 = (CurvaMatrix< int > *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:iCurvaVector_init self curvaMatrix row ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaVectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iCurvaVector_init" "', argument " "1"" of type '" "CurvaVector< int > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaVector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_CurvaMatrixT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "iCurvaVector_init" "', argument " "2"" of type '" "CurvaMatrix< int > *""'"); 
  }
  arg2 = reinterpret_cast< CurvaMatrix< int > * >(argp2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "iCurvaVector_init" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->init(arg2,arg3);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_iCurvaVector_init__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaVector< int > *arg1 = (CurvaVector< int > *) 0 ;
  std::vector< int > *arg2 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:iCurvaVector_init self data_ ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaVectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iCurvaVector_init" "', argument " "1"" of type '" "CurvaVector< int > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaVector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "iCurvaVector_init" "', argument " "2"" of type '" "std::vector< int > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int > * >(argp2);
  (arg1)->init(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_iCurvaVector_init(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CurvaVectorT_int_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_int_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_iCurvaVector_init__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CurvaVectorT_int_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CurvaMatrixT_int_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_iCurvaVector_init__SWIG_0(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'iCurvaVector_init'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CurvaVector< int >::init(CurvaMatrix< int > *,int)\n"
    "    CurvaVector< int >::init(std::vector< int > *)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_iCurvaVector_size(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaVector< int > *arg1 = (CurvaVector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:iCurvaVector_size self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaVectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iCurvaVector_size" "', argument " "1"" of type '" "CurvaVector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< CurvaVector< int > * >(argp1);
  result = (unsigned int)((CurvaVector< int > const *)arg1)->size();
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_iCurvaVector_sortAscending(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaVector< int > *arg1 = (CurvaVector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:iCurvaVector_sortAscending self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaVectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iCurvaVector_sortAscending" "', argument " "1"" of type '" "CurvaVector< int > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaVector< int > * >(argp1);
  (arg1)->sortAscending();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_iCurvaVector_sortDescending(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaVector< int > *arg1 = (CurvaVector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:iCurvaVector_sortDescending self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaVectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iCurvaVector_sortDescending" "', argument " "1"" of type '" "CurvaVector< int > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaVector< int > * >(argp1);
  (arg1)->sortDescending();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_iCurvaVector_argsortAscending(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaVector< int > *arg1 = (CurvaVector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:iCurvaVector_argsortAscending self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaVectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iCurvaVector_argsortAscending" "', argument " "1"" of type '" "CurvaVector< int > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaVector< int > * >(argp1);
  result = (std::vector< int > *) &(arg1)->argsortAscending();
  {
    for (auto &i : *result) {
      Tcl_Obj *obj = Tcl_NewIntObj(i);
      Tcl_ListObjAppendElement(interp, (Tcl_GetObjResult(interp)), obj);
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_iCurvaVector_argsortDescending(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaVector< int > *arg1 = (CurvaVector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:iCurvaVector_argsortDescending self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaVectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iCurvaVector_argsortDescending" "', argument " "1"" of type '" "CurvaVector< int > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaVector< int > * >(argp1);
  result = (std::vector< int > *) &(arg1)->argsortDescending();
  {
    for (auto &i : *result) {
      Tcl_Obj *obj = Tcl_NewIntObj(i);
      Tcl_ListObjAppendElement(interp, (Tcl_GetObjResult(interp)), obj);
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_iCurvaVector_sortAscendingAbs(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaVector< int > *arg1 = (CurvaVector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:iCurvaVector_sortAscendingAbs self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaVectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iCurvaVector_sortAscendingAbs" "', argument " "1"" of type '" "CurvaVector< int > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaVector< int > * >(argp1);
  (arg1)->sortAscendingAbs();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_iCurvaVector_sortDescendingAbs(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaVector< int > *arg1 = (CurvaVector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:iCurvaVector_sortDescendingAbs self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaVectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iCurvaVector_sortDescendingAbs" "', argument " "1"" of type '" "CurvaVector< int > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaVector< int > * >(argp1);
  (arg1)->sortDescendingAbs();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_iCurvaVector_bytes(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaVector< int > *arg1 = (CurvaVector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:iCurvaVector_bytes self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaVectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iCurvaVector_bytes" "', argument " "1"" of type '" "CurvaVector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< CurvaVector< int > * >(argp1);
  result = ((CurvaVector< int > const *)arg1)->bytes();
  Tcl_SetObjResult(interp,SWIG_From_size_t(static_cast< size_t >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_iCurvaVector_argsortAscendingAbs(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaVector< int > *arg1 = (CurvaVector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:iCurvaVector_argsortAscendingAbs self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaVectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iCurvaVector_argsortAscendingAbs" "', argument " "1"" of type '" "CurvaVector< int > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaVector< int > * >(argp1);
  result = (std::vector< int > *) &(arg1)->argsortAscendingAbs();
  {
    for (auto &i : *result) {
      Tcl_Obj *obj = Tcl_NewIntObj(i);
      Tcl_ListObjAppendElement(interp, (Tcl_GetObjResult(interp)), obj);
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_iCurvaVector_argsortDescendingAbs(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaVector< int > *arg1 = (CurvaVector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:iCurvaVector_argsortDescendingAbs self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaVectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iCurvaVector_argsortDescendingAbs" "', argument " "1"" of type '" "CurvaVector< int > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaVector< int > * >(argp1);
  result = (std::vector< int > *) &(arg1)->argsortDescendingAbs();
  {
    for (auto &i : *result) {
      Tcl_Obj *obj = Tcl_NewIntObj(i);
      Tcl_ListObjAppendElement(interp, (Tcl_GetObjResult(interp)), obj);
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_iCurvaVector_load(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaVector< int > *arg1 = (CurvaVector< int > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:iCurvaVector_load self fname ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaVectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iCurvaVector_load" "', argument " "1"" of type '" "CurvaVector< int > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaVector< int > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "iCurvaVector_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "iCurvaVector_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->load((std::string const &)*arg2);
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_iCurvaVector_save(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaVector< int > *arg1 = (CurvaVector< int > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:iCurvaVector_save self fname ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaVectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iCurvaVector_save" "', argument " "1"" of type '" "CurvaVector< int > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaVector< int > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "iCurvaVector_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "iCurvaVector_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->save((std::string const &)*arg2);
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_iCurvaVector_at(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaVector< int > *arg1 = (CurvaVector< int > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:iCurvaVector_at self index ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaVectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iCurvaVector_at" "', argument " "1"" of type '" "CurvaVector< int > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaVector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "iCurvaVector_at" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)(arg1)->at(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_iCurvaVector_list(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaVector< int > *arg1 = (CurvaVector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:iCurvaVector_list self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaVectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iCurvaVector_list" "', argument " "1"" of type '" "CurvaVector< int > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaVector< int > * >(argp1);
  result = CurvaVector_Sl_int_Sg__list(arg1);
  {
    for (auto &i : result) {
      Tcl_Obj *obj = Tcl_NewIntObj(i);
      Tcl_ListObjAppendElement(interp, (Tcl_GetObjResult(interp)), obj);
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_iCurvaVector(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaVector< int > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_iCurvaVector ") == TCL_ERROR) SWIG_fail;
  result = (CurvaVector< int > *)new CurvaVector< int >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_CurvaVectorT_int_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_iCurvaVector(void *obj) {
CurvaVector< int > *arg1 = (CurvaVector< int > *) obj;
delete arg1;
}
static swig_method swig_CurvaVector_Sl_int_Sg__methods[] = {
    {"init", _wrap_iCurvaVector_init}, 
    {"size", _wrap_iCurvaVector_size}, 
    {"sortAscending", _wrap_iCurvaVector_sortAscending}, 
    {"sortDescending", _wrap_iCurvaVector_sortDescending}, 
    {"argsortAscending", _wrap_iCurvaVector_argsortAscending}, 
    {"argsortDescending", _wrap_iCurvaVector_argsortDescending}, 
    {"sortAscendingAbs", _wrap_iCurvaVector_sortAscendingAbs}, 
    {"sortDescendingAbs", _wrap_iCurvaVector_sortDescendingAbs}, 
    {"bytes", _wrap_iCurvaVector_bytes}, 
    {"argsortAscendingAbs", _wrap_iCurvaVector_argsortAscendingAbs}, 
    {"argsortDescendingAbs", _wrap_iCurvaVector_argsortDescendingAbs}, 
    {"load", _wrap_iCurvaVector_load}, 
    {"save", _wrap_iCurvaVector_save}, 
    {"at", _wrap_iCurvaVector_at}, 
    {"list", _wrap_iCurvaVector_list}, 
    {0,0}
};
static swig_attribute swig_CurvaVector_Sl_int_Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_CurvaVector_Sl_int_Sg__bases[] = {0};
static const char * swig_CurvaVector_Sl_int_Sg__base_names[] = {0};
static swig_class _wrap_class_CurvaVector_Sl_int_Sg_ = { "iCurvaVector", &SWIGTYPE_p_CurvaVectorT_int_t,_wrap_new_iCurvaVector, swig_delete_iCurvaVector, swig_CurvaVector_Sl_int_Sg__methods, swig_CurvaVector_Sl_int_Sg__attributes, swig_CurvaVector_Sl_int_Sg__bases,swig_CurvaVector_Sl_int_Sg__base_names, &swig_module, SWIG_TCL_HASHTABLE_INIT };
SWIGINTERN int
_wrap_new_dCurvaMatrix(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaMatrix< double > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_dCurvaMatrix ") == TCL_ERROR) SWIG_fail;
  result = (CurvaMatrix< double > *)new CurvaMatrix< double >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_CurvaMatrixT_double_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_dCurvaMatrix_init__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaMatrix< double > *arg1 = (CurvaMatrix< double > *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:dCurvaMatrix_init self data_ m_ n_ ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaMatrixT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dCurvaMatrix_init" "', argument " "1"" of type '" "CurvaMatrix< double > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaMatrix< double > * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dCurvaMatrix_init" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "dCurvaMatrix_init" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "dCurvaMatrix_init" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  (arg1)->init(arg2,arg3,arg4);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_dCurvaMatrix(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaMatrix< double > *arg1 = (CurvaMatrix< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_dCurvaMatrix self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaMatrixT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_dCurvaMatrix" "', argument " "1"" of type '" "CurvaMatrix< double > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaMatrix< double > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_dCurvaMatrix_transposeHost(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaMatrix< double > *arg1 = (CurvaMatrix< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:dCurvaMatrix_transposeHost self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaMatrixT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dCurvaMatrix_transposeHost" "', argument " "1"" of type '" "CurvaMatrix< double > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaMatrix< double > * >(argp1);
  (arg1)->transposeHost();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_dCurvaMatrix_transpose(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaMatrix< double > *arg1 = (CurvaMatrix< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:dCurvaMatrix_transpose self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaMatrixT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dCurvaMatrix_transpose" "', argument " "1"" of type '" "CurvaMatrix< double > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaMatrix< double > * >(argp1);
  (arg1)->transpose();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_dCurvaMatrix_transposeDevice(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaMatrix< double > *arg1 = (CurvaMatrix< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:dCurvaMatrix_transposeDevice self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaMatrixT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dCurvaMatrix_transposeDevice" "', argument " "1"" of type '" "CurvaMatrix< double > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaMatrix< double > * >(argp1);
  (arg1)->transposeDevice();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_dCurvaMatrix_init__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaMatrix< double > *arg1 = (CurvaMatrix< double > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:dCurvaMatrix_init self m_ n_ ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaMatrixT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dCurvaMatrix_init" "', argument " "1"" of type '" "CurvaMatrix< double > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaMatrix< double > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dCurvaMatrix_init" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "dCurvaMatrix_init" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  (arg1)->init(arg2,arg3);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_dCurvaMatrix_allocate(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaMatrix< double > *arg1 = (CurvaMatrix< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:dCurvaMatrix_allocate self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaMatrixT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dCurvaMatrix_allocate" "', argument " "1"" of type '" "CurvaMatrix< double > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaMatrix< double > * >(argp1);
  (arg1)->allocate();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_dCurvaMatrix_deallocate(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaMatrix< double > *arg1 = (CurvaMatrix< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:dCurvaMatrix_deallocate self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaMatrixT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dCurvaMatrix_deallocate" "', argument " "1"" of type '" "CurvaMatrix< double > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaMatrix< double > * >(argp1);
  (arg1)->deallocate();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_dCurvaMatrix_device(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaMatrix< double > *arg1 = (CurvaMatrix< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double **result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:dCurvaMatrix_device self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaMatrixT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dCurvaMatrix_device" "', argument " "1"" of type '" "CurvaMatrix< double > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaMatrix< double > * >(argp1);
  result = (double **) &(arg1)->device();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_p_double,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_dCurvaMatrix_host(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaMatrix< double > *arg1 = (CurvaMatrix< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:dCurvaMatrix_host self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaMatrixT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dCurvaMatrix_host" "', argument " "1"" of type '" "CurvaMatrix< double > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaMatrix< double > * >(argp1);
  result = (double *)(arg1)->host();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_double,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_dCurvaMatrix_toDevice(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaMatrix< double > *arg1 = (CurvaMatrix< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:dCurvaMatrix_toDevice self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaMatrixT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dCurvaMatrix_toDevice" "', argument " "1"" of type '" "CurvaMatrix< double > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaMatrix< double > * >(argp1);
  (arg1)->toDevice();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_dCurvaMatrix_toHost(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaMatrix< double > *arg1 = (CurvaMatrix< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:dCurvaMatrix_toHost self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaMatrixT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dCurvaMatrix_toHost" "', argument " "1"" of type '" "CurvaMatrix< double > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaMatrix< double > * >(argp1);
  (arg1)->toHost();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_dCurvaMatrix_m(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaMatrix< double > *arg1 = (CurvaMatrix< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:dCurvaMatrix_m self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaMatrixT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dCurvaMatrix_m" "', argument " "1"" of type '" "CurvaMatrix< double > const *""'"); 
  }
  arg1 = reinterpret_cast< CurvaMatrix< double > * >(argp1);
  result = (unsigned int)((CurvaMatrix< double > const *)arg1)->m();
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_dCurvaMatrix_n(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaMatrix< double > *arg1 = (CurvaMatrix< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:dCurvaMatrix_n self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaMatrixT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dCurvaMatrix_n" "', argument " "1"" of type '" "CurvaMatrix< double > const *""'"); 
  }
  arg1 = reinterpret_cast< CurvaMatrix< double > * >(argp1);
  result = (unsigned int)((CurvaMatrix< double > const *)arg1)->n();
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_dCurvaMatrix_bytes(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaMatrix< double > *arg1 = (CurvaMatrix< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:dCurvaMatrix_bytes self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaMatrixT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dCurvaMatrix_bytes" "', argument " "1"" of type '" "CurvaMatrix< double > const *""'"); 
  }
  arg1 = reinterpret_cast< CurvaMatrix< double > * >(argp1);
  result = ((CurvaMatrix< double > const *)arg1)->bytes();
  Tcl_SetObjResult(interp,SWIG_From_size_t(static_cast< size_t >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_dCurvaMatrix_rowIndicesBegin(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaMatrix< double > *arg1 = (CurvaMatrix< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< int >::iterator > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:dCurvaMatrix_rowIndicesBegin self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaMatrixT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dCurvaMatrix_rowIndicesBegin" "', argument " "1"" of type '" "CurvaMatrix< double > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaMatrix< double > * >(argp1);
  result = (arg1)->rowIndicesBegin();
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new std::vector< int >::iterator(static_cast< const std::vector< int >::iterator& >(result))), SWIGTYPE_p_std__vectorT_int_t__iterator, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_dCurvaMatrix_rowIndicesEnd(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaMatrix< double > *arg1 = (CurvaMatrix< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< int >::iterator > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:dCurvaMatrix_rowIndicesEnd self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaMatrixT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dCurvaMatrix_rowIndicesEnd" "', argument " "1"" of type '" "CurvaMatrix< double > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaMatrix< double > * >(argp1);
  result = (arg1)->rowIndicesEnd();
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new std::vector< int >::iterator(static_cast< const std::vector< int >::iterator& >(result))), SWIGTYPE_p_std__vectorT_int_t__iterator, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_dCurvaMatrix_save(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaMatrix< double > *arg1 = (CurvaMatrix< double > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:dCurvaMatrix_save self fname ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaMatrixT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dCurvaMatrix_save" "', argument " "1"" of type '" "CurvaMatrix< double > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaMatrix< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dCurvaMatrix_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dCurvaMatrix_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->save((std::string const &)*arg2);
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_dCurvaMatrix_load(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaMatrix< double > *arg1 = (CurvaMatrix< double > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:dCurvaMatrix_load self fname ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaMatrixT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dCurvaMatrix_load" "', argument " "1"" of type '" "CurvaMatrix< double > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaMatrix< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dCurvaMatrix_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dCurvaMatrix_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->load((std::string const &)*arg2);
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_dCurvaMatrix_copy(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaMatrix< double > *arg1 = (CurvaMatrix< double > *) 0 ;
  CurvaMatrix< double > *arg2 = (CurvaMatrix< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:dCurvaMatrix_copy self curvaMatrix ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaMatrixT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dCurvaMatrix_copy" "', argument " "1"" of type '" "CurvaMatrix< double > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaMatrix< double > * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_CurvaMatrixT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dCurvaMatrix_copy" "', argument " "2"" of type '" "CurvaMatrix< double > *""'"); 
  }
  arg2 = reinterpret_cast< CurvaMatrix< double > * >(argp2);
  (arg1)->copy(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_dCurvaMatrix_copyDevice(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaMatrix< double > *arg1 = (CurvaMatrix< double > *) 0 ;
  CurvaMatrix< double > *arg2 = (CurvaMatrix< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:dCurvaMatrix_copyDevice self curvaMatrix ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaMatrixT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dCurvaMatrix_copyDevice" "', argument " "1"" of type '" "CurvaMatrix< double > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaMatrix< double > * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_CurvaMatrixT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dCurvaMatrix_copyDevice" "', argument " "2"" of type '" "CurvaMatrix< double > *""'"); 
  }
  arg2 = reinterpret_cast< CurvaMatrix< double > * >(argp2);
  (arg1)->copyDevice(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_dCurvaMatrix_init__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaMatrix< double > *arg1 = (CurvaMatrix< double > *) 0 ;
  CurvaVector< double > *arg2 = (CurvaVector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:dCurvaMatrix_init self curvaVector ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaMatrixT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dCurvaMatrix_init" "', argument " "1"" of type '" "CurvaMatrix< double > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaMatrix< double > * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_CurvaVectorT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dCurvaMatrix_init" "', argument " "2"" of type '" "CurvaVector< double > *""'"); 
  }
  arg2 = reinterpret_cast< CurvaVector< double > * >(argp2);
  (arg1)->init(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_dCurvaMatrix_init(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CurvaMatrixT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CurvaVectorT_double_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_dCurvaMatrix_init__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CurvaMatrixT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_dCurvaMatrix_init__SWIG_1(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CurvaMatrixT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_dCurvaMatrix_init__SWIG_0(clientData, interp, objc, argv - 1);
          }
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'dCurvaMatrix_init'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CurvaMatrix< double >::init(double *,int,int)\n"
    "    CurvaMatrix< double >::init(unsigned int,unsigned int)\n"
    "    CurvaMatrix< double >::init(CurvaVector< double > *)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_dCurvaMatrix_list(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaMatrix< double > *arg1 = (CurvaMatrix< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< CurvaVector< double > > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:dCurvaMatrix_list self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaMatrixT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dCurvaMatrix_list" "', argument " "1"" of type '" "CurvaMatrix< double > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaMatrix< double > * >(argp1);
  result = CurvaMatrix_Sl_double_Sg__list(arg1);
  {
    for (unsigned int i=0; i<(&result)->size(); i++) {
      CurvaVector< double >* ptr = new CurvaVector< double >(((std::vector< CurvaVector< double > > &)result)[i]);
      Tcl_ListObjAppendElement(interp, (Tcl_GetObjResult(interp)), \
        SWIG_NewInstanceObj(ptr, 
          SWIGTYPE_p_CurvaVectorT_double_t, 
          0));
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_dCurvaMatrix(void *obj) {
CurvaMatrix< double > *arg1 = (CurvaMatrix< double > *) obj;
delete arg1;
}
static swig_method swig_CurvaMatrix_Sl_double_Sg__methods[] = {
    {"transposeHost", _wrap_dCurvaMatrix_transposeHost}, 
    {"transpose", _wrap_dCurvaMatrix_transpose}, 
    {"transposeDevice", _wrap_dCurvaMatrix_transposeDevice}, 
    {"allocate", _wrap_dCurvaMatrix_allocate}, 
    {"deallocate", _wrap_dCurvaMatrix_deallocate}, 
    {"device", _wrap_dCurvaMatrix_device}, 
    {"host", _wrap_dCurvaMatrix_host}, 
    {"toDevice", _wrap_dCurvaMatrix_toDevice}, 
    {"toHost", _wrap_dCurvaMatrix_toHost}, 
    {"m", _wrap_dCurvaMatrix_m}, 
    {"n", _wrap_dCurvaMatrix_n}, 
    {"bytes", _wrap_dCurvaMatrix_bytes}, 
    {"rowIndicesBegin", _wrap_dCurvaMatrix_rowIndicesBegin}, 
    {"rowIndicesEnd", _wrap_dCurvaMatrix_rowIndicesEnd}, 
    {"save", _wrap_dCurvaMatrix_save}, 
    {"load", _wrap_dCurvaMatrix_load}, 
    {"copy", _wrap_dCurvaMatrix_copy}, 
    {"copyDevice", _wrap_dCurvaMatrix_copyDevice}, 
    {"init", _wrap_dCurvaMatrix_init}, 
    {"list", _wrap_dCurvaMatrix_list}, 
    {0,0}
};
static swig_attribute swig_CurvaMatrix_Sl_double_Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_CurvaMatrix_Sl_double_Sg__bases[] = {0};
static const char * swig_CurvaMatrix_Sl_double_Sg__base_names[] = {0};
static swig_class _wrap_class_CurvaMatrix_Sl_double_Sg_ = { "dCurvaMatrix", &SWIGTYPE_p_CurvaMatrixT_double_t,_wrap_new_dCurvaMatrix, swig_delete_dCurvaMatrix, swig_CurvaMatrix_Sl_double_Sg__methods, swig_CurvaMatrix_Sl_double_Sg__attributes, swig_CurvaMatrix_Sl_double_Sg__bases,swig_CurvaMatrix_Sl_double_Sg__base_names, &swig_module, SWIG_TCL_HASHTABLE_INIT };
SWIGINTERN int
_wrap_new_iCurvaMatrix(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaMatrix< int > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_iCurvaMatrix ") == TCL_ERROR) SWIG_fail;
  result = (CurvaMatrix< int > *)new CurvaMatrix< int >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_CurvaMatrixT_int_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_iCurvaMatrix_init__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaMatrix< int > *arg1 = (CurvaMatrix< int > *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:iCurvaMatrix_init self data_ m_ n_ ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaMatrixT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iCurvaMatrix_init" "', argument " "1"" of type '" "CurvaMatrix< int > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaMatrix< int > * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "iCurvaMatrix_init" "', argument " "2"" of type '" "int *""'"); 
  }
  arg2 = reinterpret_cast< int * >(argp2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "iCurvaMatrix_init" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "iCurvaMatrix_init" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  (arg1)->init(arg2,arg3,arg4);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_iCurvaMatrix(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaMatrix< int > *arg1 = (CurvaMatrix< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_iCurvaMatrix self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaMatrixT_int_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_iCurvaMatrix" "', argument " "1"" of type '" "CurvaMatrix< int > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaMatrix< int > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_iCurvaMatrix_transposeHost(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaMatrix< int > *arg1 = (CurvaMatrix< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:iCurvaMatrix_transposeHost self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaMatrixT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iCurvaMatrix_transposeHost" "', argument " "1"" of type '" "CurvaMatrix< int > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaMatrix< int > * >(argp1);
  (arg1)->transposeHost();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_iCurvaMatrix_transpose(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaMatrix< int > *arg1 = (CurvaMatrix< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:iCurvaMatrix_transpose self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaMatrixT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iCurvaMatrix_transpose" "', argument " "1"" of type '" "CurvaMatrix< int > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaMatrix< int > * >(argp1);
  (arg1)->transpose();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_iCurvaMatrix_transposeDevice(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaMatrix< int > *arg1 = (CurvaMatrix< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:iCurvaMatrix_transposeDevice self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaMatrixT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iCurvaMatrix_transposeDevice" "', argument " "1"" of type '" "CurvaMatrix< int > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaMatrix< int > * >(argp1);
  (arg1)->transposeDevice();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_iCurvaMatrix_init__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaMatrix< int > *arg1 = (CurvaMatrix< int > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:iCurvaMatrix_init self m_ n_ ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaMatrixT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iCurvaMatrix_init" "', argument " "1"" of type '" "CurvaMatrix< int > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaMatrix< int > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "iCurvaMatrix_init" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "iCurvaMatrix_init" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  (arg1)->init(arg2,arg3);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_iCurvaMatrix_allocate(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaMatrix< int > *arg1 = (CurvaMatrix< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:iCurvaMatrix_allocate self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaMatrixT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iCurvaMatrix_allocate" "', argument " "1"" of type '" "CurvaMatrix< int > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaMatrix< int > * >(argp1);
  (arg1)->allocate();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_iCurvaMatrix_deallocate(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaMatrix< int > *arg1 = (CurvaMatrix< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:iCurvaMatrix_deallocate self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaMatrixT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iCurvaMatrix_deallocate" "', argument " "1"" of type '" "CurvaMatrix< int > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaMatrix< int > * >(argp1);
  (arg1)->deallocate();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_iCurvaMatrix_device(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaMatrix< int > *arg1 = (CurvaMatrix< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int **result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:iCurvaMatrix_device self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaMatrixT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iCurvaMatrix_device" "', argument " "1"" of type '" "CurvaMatrix< int > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaMatrix< int > * >(argp1);
  result = (int **) &(arg1)->device();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_p_int,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_iCurvaMatrix_host(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaMatrix< int > *arg1 = (CurvaMatrix< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:iCurvaMatrix_host self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaMatrixT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iCurvaMatrix_host" "', argument " "1"" of type '" "CurvaMatrix< int > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaMatrix< int > * >(argp1);
  result = (int *)(arg1)->host();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_int,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_iCurvaMatrix_toDevice(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaMatrix< int > *arg1 = (CurvaMatrix< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:iCurvaMatrix_toDevice self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaMatrixT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iCurvaMatrix_toDevice" "', argument " "1"" of type '" "CurvaMatrix< int > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaMatrix< int > * >(argp1);
  (arg1)->toDevice();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_iCurvaMatrix_toHost(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaMatrix< int > *arg1 = (CurvaMatrix< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:iCurvaMatrix_toHost self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaMatrixT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iCurvaMatrix_toHost" "', argument " "1"" of type '" "CurvaMatrix< int > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaMatrix< int > * >(argp1);
  (arg1)->toHost();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_iCurvaMatrix_m(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaMatrix< int > *arg1 = (CurvaMatrix< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:iCurvaMatrix_m self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaMatrixT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iCurvaMatrix_m" "', argument " "1"" of type '" "CurvaMatrix< int > const *""'"); 
  }
  arg1 = reinterpret_cast< CurvaMatrix< int > * >(argp1);
  result = (unsigned int)((CurvaMatrix< int > const *)arg1)->m();
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_iCurvaMatrix_n(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaMatrix< int > *arg1 = (CurvaMatrix< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:iCurvaMatrix_n self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaMatrixT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iCurvaMatrix_n" "', argument " "1"" of type '" "CurvaMatrix< int > const *""'"); 
  }
  arg1 = reinterpret_cast< CurvaMatrix< int > * >(argp1);
  result = (unsigned int)((CurvaMatrix< int > const *)arg1)->n();
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_iCurvaMatrix_bytes(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaMatrix< int > *arg1 = (CurvaMatrix< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:iCurvaMatrix_bytes self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaMatrixT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iCurvaMatrix_bytes" "', argument " "1"" of type '" "CurvaMatrix< int > const *""'"); 
  }
  arg1 = reinterpret_cast< CurvaMatrix< int > * >(argp1);
  result = ((CurvaMatrix< int > const *)arg1)->bytes();
  Tcl_SetObjResult(interp,SWIG_From_size_t(static_cast< size_t >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_iCurvaMatrix_rowIndicesBegin(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaMatrix< int > *arg1 = (CurvaMatrix< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< int >::iterator > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:iCurvaMatrix_rowIndicesBegin self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaMatrixT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iCurvaMatrix_rowIndicesBegin" "', argument " "1"" of type '" "CurvaMatrix< int > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaMatrix< int > * >(argp1);
  result = (arg1)->rowIndicesBegin();
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new std::vector< int >::iterator(static_cast< const std::vector< int >::iterator& >(result))), SWIGTYPE_p_std__vectorT_int_t__iterator, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_iCurvaMatrix_rowIndicesEnd(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaMatrix< int > *arg1 = (CurvaMatrix< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< int >::iterator > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:iCurvaMatrix_rowIndicesEnd self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaMatrixT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iCurvaMatrix_rowIndicesEnd" "', argument " "1"" of type '" "CurvaMatrix< int > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaMatrix< int > * >(argp1);
  result = (arg1)->rowIndicesEnd();
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new std::vector< int >::iterator(static_cast< const std::vector< int >::iterator& >(result))), SWIGTYPE_p_std__vectorT_int_t__iterator, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_iCurvaMatrix_save(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaMatrix< int > *arg1 = (CurvaMatrix< int > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:iCurvaMatrix_save self fname ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaMatrixT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iCurvaMatrix_save" "', argument " "1"" of type '" "CurvaMatrix< int > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaMatrix< int > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "iCurvaMatrix_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "iCurvaMatrix_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->save((std::string const &)*arg2);
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_iCurvaMatrix_load(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaMatrix< int > *arg1 = (CurvaMatrix< int > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:iCurvaMatrix_load self fname ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaMatrixT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iCurvaMatrix_load" "', argument " "1"" of type '" "CurvaMatrix< int > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaMatrix< int > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "iCurvaMatrix_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "iCurvaMatrix_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->load((std::string const &)*arg2);
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_iCurvaMatrix_copy(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaMatrix< int > *arg1 = (CurvaMatrix< int > *) 0 ;
  CurvaMatrix< int > *arg2 = (CurvaMatrix< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:iCurvaMatrix_copy self curvaMatrix ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaMatrixT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iCurvaMatrix_copy" "', argument " "1"" of type '" "CurvaMatrix< int > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaMatrix< int > * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_CurvaMatrixT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "iCurvaMatrix_copy" "', argument " "2"" of type '" "CurvaMatrix< int > *""'"); 
  }
  arg2 = reinterpret_cast< CurvaMatrix< int > * >(argp2);
  (arg1)->copy(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_iCurvaMatrix_copyDevice(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaMatrix< int > *arg1 = (CurvaMatrix< int > *) 0 ;
  CurvaMatrix< int > *arg2 = (CurvaMatrix< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:iCurvaMatrix_copyDevice self curvaMatrix ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaMatrixT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iCurvaMatrix_copyDevice" "', argument " "1"" of type '" "CurvaMatrix< int > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaMatrix< int > * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_CurvaMatrixT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "iCurvaMatrix_copyDevice" "', argument " "2"" of type '" "CurvaMatrix< int > *""'"); 
  }
  arg2 = reinterpret_cast< CurvaMatrix< int > * >(argp2);
  (arg1)->copyDevice(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_iCurvaMatrix_init__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaMatrix< int > *arg1 = (CurvaMatrix< int > *) 0 ;
  CurvaVector< int > *arg2 = (CurvaVector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:iCurvaMatrix_init self curvaVector ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaMatrixT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iCurvaMatrix_init" "', argument " "1"" of type '" "CurvaMatrix< int > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaMatrix< int > * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_CurvaVectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "iCurvaMatrix_init" "', argument " "2"" of type '" "CurvaVector< int > *""'"); 
  }
  arg2 = reinterpret_cast< CurvaVector< int > * >(argp2);
  (arg1)->init(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_iCurvaMatrix_init(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CurvaMatrixT_int_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_CurvaVectorT_int_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_iCurvaMatrix_init__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CurvaMatrixT_int_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_iCurvaMatrix_init__SWIG_1(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CurvaMatrixT_int_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_int, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_iCurvaMatrix_init__SWIG_0(clientData, interp, objc, argv - 1);
          }
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "Wrong number or type of arguments for overloaded function 'iCurvaMatrix_init'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CurvaMatrix< int >::init(int *,int,int)\n"
    "    CurvaMatrix< int >::init(unsigned int,unsigned int)\n"
    "    CurvaMatrix< int >::init(CurvaVector< int > *)\n", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_iCurvaMatrix_list(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  CurvaMatrix< int > *arg1 = (CurvaMatrix< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< CurvaVector< int > > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:iCurvaMatrix_list self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_CurvaMatrixT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "iCurvaMatrix_list" "', argument " "1"" of type '" "CurvaMatrix< int > *""'"); 
  }
  arg1 = reinterpret_cast< CurvaMatrix< int > * >(argp1);
  result = CurvaMatrix_Sl_int_Sg__list(arg1);
  {
    for (unsigned int i=0; i<(&result)->size(); i++) {
      CurvaVector< int >* ptr = new CurvaVector< int >(((std::vector< CurvaVector< int > > &)result)[i]);
      Tcl_ListObjAppendElement(interp, (Tcl_GetObjResult(interp)), \
        SWIG_NewInstanceObj(ptr, 
          SWIGTYPE_p_CurvaVectorT_int_t, 
          0));
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_iCurvaMatrix(void *obj) {
CurvaMatrix< int > *arg1 = (CurvaMatrix< int > *) obj;
delete arg1;
}
static swig_method swig_CurvaMatrix_Sl_int_Sg__methods[] = {
    {"transposeHost", _wrap_iCurvaMatrix_transposeHost}, 
    {"transpose", _wrap_iCurvaMatrix_transpose}, 
    {"transposeDevice", _wrap_iCurvaMatrix_transposeDevice}, 
    {"allocate", _wrap_iCurvaMatrix_allocate}, 
    {"deallocate", _wrap_iCurvaMatrix_deallocate}, 
    {"device", _wrap_iCurvaMatrix_device}, 
    {"host", _wrap_iCurvaMatrix_host}, 
    {"toDevice", _wrap_iCurvaMatrix_toDevice}, 
    {"toHost", _wrap_iCurvaMatrix_toHost}, 
    {"m", _wrap_iCurvaMatrix_m}, 
    {"n", _wrap_iCurvaMatrix_n}, 
    {"bytes", _wrap_iCurvaMatrix_bytes}, 
    {"rowIndicesBegin", _wrap_iCurvaMatrix_rowIndicesBegin}, 
    {"rowIndicesEnd", _wrap_iCurvaMatrix_rowIndicesEnd}, 
    {"save", _wrap_iCurvaMatrix_save}, 
    {"load", _wrap_iCurvaMatrix_load}, 
    {"copy", _wrap_iCurvaMatrix_copy}, 
    {"copyDevice", _wrap_iCurvaMatrix_copyDevice}, 
    {"init", _wrap_iCurvaMatrix_init}, 
    {"list", _wrap_iCurvaMatrix_list}, 
    {0,0}
};
static swig_attribute swig_CurvaMatrix_Sl_int_Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_CurvaMatrix_Sl_int_Sg__bases[] = {0};
static const char * swig_CurvaMatrix_Sl_int_Sg__base_names[] = {0};
static swig_class _wrap_class_CurvaMatrix_Sl_int_Sg_ = { "iCurvaMatrix", &SWIGTYPE_p_CurvaMatrixT_int_t,_wrap_new_iCurvaMatrix, swig_delete_iCurvaMatrix, swig_CurvaMatrix_Sl_int_Sg__methods, swig_CurvaMatrix_Sl_int_Sg__attributes, swig_CurvaMatrix_Sl_int_Sg__bases,swig_CurvaMatrix_Sl_int_Sg__base_names, &swig_module, SWIG_TCL_HASHTABLE_INIT };

static swig_command_info swig_commands[] = {
    { SWIG_prefix "new_dVector", (swig_wrapper_func) _wrap_new_dVector, NULL},
    { SWIG_prefix "dVector_size", (swig_wrapper_func) _wrap_dVector_size, NULL},
    { SWIG_prefix "dVector_empty", (swig_wrapper_func) _wrap_dVector_empty, NULL},
    { SWIG_prefix "dVector_clear", (swig_wrapper_func) _wrap_dVector_clear, NULL},
    { SWIG_prefix "dVector_push", (swig_wrapper_func) _wrap_dVector_push, NULL},
    { SWIG_prefix "dVector_pop", (swig_wrapper_func) _wrap_dVector_pop, NULL},
    { SWIG_prefix "dVector_get", (swig_wrapper_func) _wrap_dVector_get, NULL},
    { SWIG_prefix "dVector_set", (swig_wrapper_func) _wrap_dVector_set, NULL},
    { SWIG_prefix "delete_dVector", (swig_wrapper_func) _wrap_delete_dVector, NULL},
    { SWIG_prefix "dVector", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_std_vector_Sl_double_Sg_},
    { SWIG_prefix "new_ddVector", (swig_wrapper_func) _wrap_new_ddVector, NULL},
    { SWIG_prefix "ddVector_size", (swig_wrapper_func) _wrap_ddVector_size, NULL},
    { SWIG_prefix "ddVector_empty", (swig_wrapper_func) _wrap_ddVector_empty, NULL},
    { SWIG_prefix "ddVector_clear", (swig_wrapper_func) _wrap_ddVector_clear, NULL},
    { SWIG_prefix "ddVector_push", (swig_wrapper_func) _wrap_ddVector_push, NULL},
    { SWIG_prefix "ddVector_pop", (swig_wrapper_func) _wrap_ddVector_pop, NULL},
    { SWIG_prefix "ddVector_get", (swig_wrapper_func) _wrap_ddVector_get, NULL},
    { SWIG_prefix "ddVector_set", (swig_wrapper_func) _wrap_ddVector_set, NULL},
    { SWIG_prefix "delete_ddVector", (swig_wrapper_func) _wrap_delete_ddVector, NULL},
    { SWIG_prefix "ddVector", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_std_vector_Sl_std_vector_Sl_double_Sg__Sg_},
    { SWIG_prefix "new_iVector", (swig_wrapper_func) _wrap_new_iVector, NULL},
    { SWIG_prefix "iVector_size", (swig_wrapper_func) _wrap_iVector_size, NULL},
    { SWIG_prefix "iVector_empty", (swig_wrapper_func) _wrap_iVector_empty, NULL},
    { SWIG_prefix "iVector_clear", (swig_wrapper_func) _wrap_iVector_clear, NULL},
    { SWIG_prefix "iVector_push", (swig_wrapper_func) _wrap_iVector_push, NULL},
    { SWIG_prefix "iVector_pop", (swig_wrapper_func) _wrap_iVector_pop, NULL},
    { SWIG_prefix "iVector_get", (swig_wrapper_func) _wrap_iVector_get, NULL},
    { SWIG_prefix "iVector_set", (swig_wrapper_func) _wrap_iVector_set, NULL},
    { SWIG_prefix "delete_iVector", (swig_wrapper_func) _wrap_delete_iVector, NULL},
    { SWIG_prefix "iVector", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_std_vector_Sl_int_Sg_},
    { SWIG_prefix "new_nodeVector", (swig_wrapper_func) _wrap_new_nodeVector, NULL},
    { SWIG_prefix "nodeVector_size", (swig_wrapper_func) _wrap_nodeVector_size, NULL},
    { SWIG_prefix "nodeVector_empty", (swig_wrapper_func) _wrap_nodeVector_empty, NULL},
    { SWIG_prefix "nodeVector_clear", (swig_wrapper_func) _wrap_nodeVector_clear, NULL},
    { SWIG_prefix "nodeVector_push", (swig_wrapper_func) _wrap_nodeVector_push, NULL},
    { SWIG_prefix "nodeVector_pop", (swig_wrapper_func) _wrap_nodeVector_pop, NULL},
    { SWIG_prefix "nodeVector_get", (swig_wrapper_func) _wrap_nodeVector_get, NULL},
    { SWIG_prefix "nodeVector_set", (swig_wrapper_func) _wrap_nodeVector_set, NULL},
    { SWIG_prefix "delete_nodeVector", (swig_wrapper_func) _wrap_delete_nodeVector, NULL},
    { SWIG_prefix "nodeVector", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_std_vector_Sl_Node_Sg_},
    { SWIG_prefix "new_atomVector", (swig_wrapper_func) _wrap_new_atomVector, NULL},
    { SWIG_prefix "atomVector_size", (swig_wrapper_func) _wrap_atomVector_size, NULL},
    { SWIG_prefix "atomVector_empty", (swig_wrapper_func) _wrap_atomVector_empty, NULL},
    { SWIG_prefix "atomVector_clear", (swig_wrapper_func) _wrap_atomVector_clear, NULL},
    { SWIG_prefix "atomVector_push", (swig_wrapper_func) _wrap_atomVector_push, NULL},
    { SWIG_prefix "atomVector_pop", (swig_wrapper_func) _wrap_atomVector_pop, NULL},
    { SWIG_prefix "atomVector_get", (swig_wrapper_func) _wrap_atomVector_get, NULL},
    { SWIG_prefix "atomVector_set", (swig_wrapper_func) _wrap_atomVector_set, NULL},
    { SWIG_prefix "delete_atomVector", (swig_wrapper_func) _wrap_delete_atomVector, NULL},
    { SWIG_prefix "atomVector", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_std_vector_Sl_Atom_Sg_},
    { SWIG_prefix "new_curvaVectorDoubleVector", (swig_wrapper_func) _wrap_new_curvaVectorDoubleVector, NULL},
    { SWIG_prefix "curvaVectorDoubleVector_size", (swig_wrapper_func) _wrap_curvaVectorDoubleVector_size, NULL},
    { SWIG_prefix "curvaVectorDoubleVector_empty", (swig_wrapper_func) _wrap_curvaVectorDoubleVector_empty, NULL},
    { SWIG_prefix "curvaVectorDoubleVector_clear", (swig_wrapper_func) _wrap_curvaVectorDoubleVector_clear, NULL},
    { SWIG_prefix "curvaVectorDoubleVector_push", (swig_wrapper_func) _wrap_curvaVectorDoubleVector_push, NULL},
    { SWIG_prefix "curvaVectorDoubleVector_pop", (swig_wrapper_func) _wrap_curvaVectorDoubleVector_pop, NULL},
    { SWIG_prefix "curvaVectorDoubleVector_get", (swig_wrapper_func) _wrap_curvaVectorDoubleVector_get, NULL},
    { SWIG_prefix "curvaVectorDoubleVector_set", (swig_wrapper_func) _wrap_curvaVectorDoubleVector_set, NULL},
    { SWIG_prefix "delete_curvaVectorDoubleVector", (swig_wrapper_func) _wrap_delete_curvaVectorDoubleVector, NULL},
    { SWIG_prefix "curvaVectorDoubleVector", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_std_vector_Sl_CurvaVector_Sl_double_Sg__Sg_},
    { SWIG_prefix "new_curvaVectorIntVector", (swig_wrapper_func) _wrap_new_curvaVectorIntVector, NULL},
    { SWIG_prefix "curvaVectorIntVector_size", (swig_wrapper_func) _wrap_curvaVectorIntVector_size, NULL},
    { SWIG_prefix "curvaVectorIntVector_empty", (swig_wrapper_func) _wrap_curvaVectorIntVector_empty, NULL},
    { SWIG_prefix "curvaVectorIntVector_clear", (swig_wrapper_func) _wrap_curvaVectorIntVector_clear, NULL},
    { SWIG_prefix "curvaVectorIntVector_push", (swig_wrapper_func) _wrap_curvaVectorIntVector_push, NULL},
    { SWIG_prefix "curvaVectorIntVector_pop", (swig_wrapper_func) _wrap_curvaVectorIntVector_pop, NULL},
    { SWIG_prefix "curvaVectorIntVector_get", (swig_wrapper_func) _wrap_curvaVectorIntVector_get, NULL},
    { SWIG_prefix "curvaVectorIntVector_set", (swig_wrapper_func) _wrap_curvaVectorIntVector_set, NULL},
    { SWIG_prefix "delete_curvaVectorIntVector", (swig_wrapper_func) _wrap_delete_curvaVectorIntVector, NULL},
    { SWIG_prefix "curvaVectorIntVector", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_std_vector_Sl_CurvaVector_Sl_int_Sg__Sg_},
    { SWIG_prefix "parseDcd", (swig_wrapper_func) _wrap_parseDcd, NULL},
    { SWIG_prefix "parsePdb", (swig_wrapper_func) _wrap_parsePdb, NULL},
    { SWIG_prefix "generateNodes", (swig_wrapper_func) _wrap_generateNodes, NULL},
    { SWIG_prefix "mutualInformationConstruct", (swig_wrapper_func) _wrap_mutualInformationConstruct, NULL},
    { SWIG_prefix "generalizedCorrelationTest", (swig_wrapper_func) _wrap_generalizedCorrelationTest, NULL},
    { SWIG_prefix "new_MolecularDynamicsCalculation", (swig_wrapper_func) _wrap_new_MolecularDynamicsCalculation, NULL},
    { SWIG_prefix "delete_MolecularDynamicsCalculation", (swig_wrapper_func) _wrap_delete_MolecularDynamicsCalculation, NULL},
    { SWIG_prefix "MolecularDynamicsCalculation_init", (swig_wrapper_func) _wrap_MolecularDynamicsCalculation_init, NULL},
    { SWIG_prefix "MolecularDynamicsCalculation_atoms", (swig_wrapper_func) _wrap_MolecularDynamicsCalculation_atoms, NULL},
    { SWIG_prefix "MolecularDynamicsCalculation_nodes", (swig_wrapper_func) _wrap_MolecularDynamicsCalculation_nodes, NULL},
    { SWIG_prefix "MolecularDynamicsCalculation_numFrames", (swig_wrapper_func) _wrap_MolecularDynamicsCalculation_numFrames, NULL},
    { SWIG_prefix "MolecularDynamicsCalculation_numAtoms", (swig_wrapper_func) _wrap_MolecularDynamicsCalculation_numAtoms, NULL},
    { SWIG_prefix "MolecularDynamicsCalculation_numNodes", (swig_wrapper_func) _wrap_MolecularDynamicsCalculation_numNodes, NULL},
    { SWIG_prefix "MolecularDynamicsCalculation_dcd", (swig_wrapper_func) _wrap_MolecularDynamicsCalculation_dcd, NULL},
    { SWIG_prefix "MolecularDynamicsCalculation_pdb", (swig_wrapper_func) _wrap_MolecularDynamicsCalculation_pdb, NULL},
    { SWIG_prefix "MolecularDynamicsCalculation_mutualInformationAllocate", (swig_wrapper_func) _wrap_MolecularDynamicsCalculation_mutualInformationAllocate, NULL},
    { SWIG_prefix "MolecularDynamicsCalculation_generalizedCorrelation", (swig_wrapper_func) _wrap_MolecularDynamicsCalculation_generalizedCorrelation, NULL},
    { SWIG_prefix "MolecularDynamicsCalculation_generalizedCorrelationMatrix", (swig_wrapper_func) _wrap_MolecularDynamicsCalculation_generalizedCorrelationMatrix, NULL},
    { SWIG_prefix "MolecularDynamicsCalculation_save", (swig_wrapper_func) _wrap_MolecularDynamicsCalculation_save, NULL},
    { SWIG_prefix "MolecularDynamicsCalculation_load", (swig_wrapper_func) _wrap_MolecularDynamicsCalculation_load, NULL},
    { SWIG_prefix "MolecularDynamicsCalculation", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_MolecularDynamicsCalculation},
    { SWIG_prefix "new_Atom", (swig_wrapper_func) _wrap_new_Atom, NULL},
    { SWIG_prefix "Atom_index", (swig_wrapper_func) _wrap_Atom_index, NULL},
    { SWIG_prefix "Atom_name", (swig_wrapper_func) _wrap_Atom_name, NULL},
    { SWIG_prefix "Atom_element", (swig_wrapper_func) _wrap_Atom_element, NULL},
    { SWIG_prefix "Atom_residueName", (swig_wrapper_func) _wrap_Atom_residueName, NULL},
    { SWIG_prefix "Atom_residueId", (swig_wrapper_func) _wrap_Atom_residueId, NULL},
    { SWIG_prefix "Atom_chainId", (swig_wrapper_func) _wrap_Atom_chainId, NULL},
    { SWIG_prefix "Atom_segmentId", (swig_wrapper_func) _wrap_Atom_segmentId, NULL},
    { SWIG_prefix "Atom_temperatureFactor", (swig_wrapper_func) _wrap_Atom_temperatureFactor, NULL},
    { SWIG_prefix "Atom_occupancy", (swig_wrapper_func) _wrap_Atom_occupancy, NULL},
    { SWIG_prefix "Atom_serial", (swig_wrapper_func) _wrap_Atom_serial, NULL},
    { SWIG_prefix "Atom_tag", (swig_wrapper_func) _wrap_Atom_tag, NULL},
    { SWIG_prefix "Atom_x", (swig_wrapper_func) _wrap_Atom_x, NULL},
    { SWIG_prefix "Atom_y", (swig_wrapper_func) _wrap_Atom_y, NULL},
    { SWIG_prefix "Atom_z", (swig_wrapper_func) _wrap_Atom_z, NULL},
    { SWIG_prefix "Atom_mass", (swig_wrapper_func) _wrap_Atom_mass, NULL},
    { SWIG_prefix "Atom_hash", (swig_wrapper_func) _wrap_Atom_hash, NULL},
    { SWIG_prefix "delete_Atom", (swig_wrapper_func) _wrap_delete_Atom, NULL},
    { SWIG_prefix "Atom", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_Atom},
    { SWIG_prefix "new_Node", (swig_wrapper_func) _wrap_new_Node, NULL},
    { SWIG_prefix "Node_addAtom", (swig_wrapper_func) _wrap_Node_addAtom, NULL},
    { SWIG_prefix "Node_centerOfMass", (swig_wrapper_func) _wrap_Node_centerOfMass, NULL},
    { SWIG_prefix "Node_averageCenterOfMass", (swig_wrapper_func) _wrap_Node_averageCenterOfMass, NULL},
    { SWIG_prefix "Node_tag", (swig_wrapper_func) _wrap_Node_tag, NULL},
    { SWIG_prefix "Node_numAtoms", (swig_wrapper_func) _wrap_Node_numAtoms, NULL},
    { SWIG_prefix "Node_index", (swig_wrapper_func) _wrap_Node_index, NULL},
    { SWIG_prefix "Node_totalMass", (swig_wrapper_func) _wrap_Node_totalMass, NULL},
    { SWIG_prefix "Node_list", (swig_wrapper_func) _wrap_Node_list, NULL},
    { SWIG_prefix "Node_serializationDirectory", (swig_wrapper_func) _wrap_Node_serializationDirectory, NULL},
    { SWIG_prefix "Node_calculationName", (swig_wrapper_func) _wrap_Node_calculationName, NULL},
    { SWIG_prefix "Node_hash", (swig_wrapper_func) _wrap_Node_hash, NULL},
    { SWIG_prefix "delete_Node", (swig_wrapper_func) _wrap_delete_Node, NULL},
    { SWIG_prefix "Node", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_Node},
    { SWIG_prefix "new_Nodes", (swig_wrapper_func) _wrap_new_Nodes, NULL},
    { SWIG_prefix "delete_Nodes", (swig_wrapper_func) _wrap_delete_Nodes, NULL},
    { SWIG_prefix "Nodes_init", (swig_wrapper_func) _wrap_Nodes_init, NULL},
    { SWIG_prefix "Nodes_numNodes", (swig_wrapper_func) _wrap_Nodes_numNodes, NULL},
    { SWIG_prefix "Nodes_nodeFromAtomIndex", (swig_wrapper_func) _wrap_Nodes_nodeFromAtomIndex, NULL},
    { SWIG_prefix "Nodes_at", (swig_wrapper_func) _wrap_Nodes_at, NULL},
    { SWIG_prefix "Nodes_list", (swig_wrapper_func) _wrap_Nodes_list, NULL},
    { SWIG_prefix "Nodes_save", (swig_wrapper_func) _wrap_Nodes_save, NULL},
    { SWIG_prefix "Nodes_load", (swig_wrapper_func) _wrap_Nodes_load, NULL},
    { SWIG_prefix "Nodes", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_Nodes},
    { SWIG_prefix "new_Atoms", (swig_wrapper_func) _wrap_new_Atoms, NULL},
    { SWIG_prefix "Atoms_addAtom", (swig_wrapper_func) _wrap_Atoms_addAtom, NULL},
    { SWIG_prefix "Atoms_numAtoms", (swig_wrapper_func) _wrap_Atoms_numAtoms, NULL},
    { SWIG_prefix "Atoms_at", (swig_wrapper_func) _wrap_Atoms_at, NULL},
    { SWIG_prefix "delete_Atoms", (swig_wrapper_func) _wrap_delete_Atoms, NULL},
    { SWIG_prefix "Atoms", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_Atoms},
    { SWIG_prefix "new_Coordinates", (swig_wrapper_func) _wrap_new_Coordinates, NULL},
    { SWIG_prefix "delete_Coordinates", (swig_wrapper_func) _wrap_delete_Coordinates, NULL},
    { SWIG_prefix "Coordinates_init", (swig_wrapper_func) _wrap_Coordinates_init, NULL},
    { SWIG_prefix "Coordinates_x", (swig_wrapper_func) _wrap_Coordinates_x, NULL},
    { SWIG_prefix "Coordinates_y", (swig_wrapper_func) _wrap_Coordinates_y, NULL},
    { SWIG_prefix "Coordinates_z", (swig_wrapper_func) _wrap_Coordinates_z, NULL},
    { SWIG_prefix "Coordinates_numAtoms", (swig_wrapper_func) _wrap_Coordinates_numAtoms, NULL},
    { SWIG_prefix "Coordinates_numFrames", (swig_wrapper_func) _wrap_Coordinates_numFrames, NULL},
    { SWIG_prefix "Coordinates", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_Coordinates},
    { SWIG_prefix "delete_dCurvaVector", (swig_wrapper_func) _wrap_delete_dCurvaVector, NULL},
    { SWIG_prefix "dCurvaVector_init", (swig_wrapper_func) _wrap_dCurvaVector_init, NULL},
    { SWIG_prefix "dCurvaVector_size", (swig_wrapper_func) _wrap_dCurvaVector_size, NULL},
    { SWIG_prefix "dCurvaVector_sortAscending", (swig_wrapper_func) _wrap_dCurvaVector_sortAscending, NULL},
    { SWIG_prefix "dCurvaVector_sortDescending", (swig_wrapper_func) _wrap_dCurvaVector_sortDescending, NULL},
    { SWIG_prefix "dCurvaVector_argsortAscending", (swig_wrapper_func) _wrap_dCurvaVector_argsortAscending, NULL},
    { SWIG_prefix "dCurvaVector_argsortDescending", (swig_wrapper_func) _wrap_dCurvaVector_argsortDescending, NULL},
    { SWIG_prefix "dCurvaVector_sortAscendingAbs", (swig_wrapper_func) _wrap_dCurvaVector_sortAscendingAbs, NULL},
    { SWIG_prefix "dCurvaVector_sortDescendingAbs", (swig_wrapper_func) _wrap_dCurvaVector_sortDescendingAbs, NULL},
    { SWIG_prefix "dCurvaVector_bytes", (swig_wrapper_func) _wrap_dCurvaVector_bytes, NULL},
    { SWIG_prefix "dCurvaVector_argsortAscendingAbs", (swig_wrapper_func) _wrap_dCurvaVector_argsortAscendingAbs, NULL},
    { SWIG_prefix "dCurvaVector_argsortDescendingAbs", (swig_wrapper_func) _wrap_dCurvaVector_argsortDescendingAbs, NULL},
    { SWIG_prefix "dCurvaVector_load", (swig_wrapper_func) _wrap_dCurvaVector_load, NULL},
    { SWIG_prefix "dCurvaVector_save", (swig_wrapper_func) _wrap_dCurvaVector_save, NULL},
    { SWIG_prefix "dCurvaVector_at", (swig_wrapper_func) _wrap_dCurvaVector_at, NULL},
    { SWIG_prefix "dCurvaVector_list", (swig_wrapper_func) _wrap_dCurvaVector_list, NULL},
    { SWIG_prefix "new_dCurvaVector", (swig_wrapper_func) _wrap_new_dCurvaVector, NULL},
    { SWIG_prefix "dCurvaVector", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_CurvaVector_Sl_double_Sg_},
    { SWIG_prefix "delete_iCurvaVector", (swig_wrapper_func) _wrap_delete_iCurvaVector, NULL},
    { SWIG_prefix "iCurvaVector_init", (swig_wrapper_func) _wrap_iCurvaVector_init, NULL},
    { SWIG_prefix "iCurvaVector_size", (swig_wrapper_func) _wrap_iCurvaVector_size, NULL},
    { SWIG_prefix "iCurvaVector_sortAscending", (swig_wrapper_func) _wrap_iCurvaVector_sortAscending, NULL},
    { SWIG_prefix "iCurvaVector_sortDescending", (swig_wrapper_func) _wrap_iCurvaVector_sortDescending, NULL},
    { SWIG_prefix "iCurvaVector_argsortAscending", (swig_wrapper_func) _wrap_iCurvaVector_argsortAscending, NULL},
    { SWIG_prefix "iCurvaVector_argsortDescending", (swig_wrapper_func) _wrap_iCurvaVector_argsortDescending, NULL},
    { SWIG_prefix "iCurvaVector_sortAscendingAbs", (swig_wrapper_func) _wrap_iCurvaVector_sortAscendingAbs, NULL},
    { SWIG_prefix "iCurvaVector_sortDescendingAbs", (swig_wrapper_func) _wrap_iCurvaVector_sortDescendingAbs, NULL},
    { SWIG_prefix "iCurvaVector_bytes", (swig_wrapper_func) _wrap_iCurvaVector_bytes, NULL},
    { SWIG_prefix "iCurvaVector_argsortAscendingAbs", (swig_wrapper_func) _wrap_iCurvaVector_argsortAscendingAbs, NULL},
    { SWIG_prefix "iCurvaVector_argsortDescendingAbs", (swig_wrapper_func) _wrap_iCurvaVector_argsortDescendingAbs, NULL},
    { SWIG_prefix "iCurvaVector_load", (swig_wrapper_func) _wrap_iCurvaVector_load, NULL},
    { SWIG_prefix "iCurvaVector_save", (swig_wrapper_func) _wrap_iCurvaVector_save, NULL},
    { SWIG_prefix "iCurvaVector_at", (swig_wrapper_func) _wrap_iCurvaVector_at, NULL},
    { SWIG_prefix "iCurvaVector_list", (swig_wrapper_func) _wrap_iCurvaVector_list, NULL},
    { SWIG_prefix "new_iCurvaVector", (swig_wrapper_func) _wrap_new_iCurvaVector, NULL},
    { SWIG_prefix "iCurvaVector", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_CurvaVector_Sl_int_Sg_},
    { SWIG_prefix "new_dCurvaMatrix", (swig_wrapper_func) _wrap_new_dCurvaMatrix, NULL},
    { SWIG_prefix "delete_dCurvaMatrix", (swig_wrapper_func) _wrap_delete_dCurvaMatrix, NULL},
    { SWIG_prefix "dCurvaMatrix_transposeHost", (swig_wrapper_func) _wrap_dCurvaMatrix_transposeHost, NULL},
    { SWIG_prefix "dCurvaMatrix_transpose", (swig_wrapper_func) _wrap_dCurvaMatrix_transpose, NULL},
    { SWIG_prefix "dCurvaMatrix_transposeDevice", (swig_wrapper_func) _wrap_dCurvaMatrix_transposeDevice, NULL},
    { SWIG_prefix "dCurvaMatrix_allocate", (swig_wrapper_func) _wrap_dCurvaMatrix_allocate, NULL},
    { SWIG_prefix "dCurvaMatrix_deallocate", (swig_wrapper_func) _wrap_dCurvaMatrix_deallocate, NULL},
    { SWIG_prefix "dCurvaMatrix_device", (swig_wrapper_func) _wrap_dCurvaMatrix_device, NULL},
    { SWIG_prefix "dCurvaMatrix_host", (swig_wrapper_func) _wrap_dCurvaMatrix_host, NULL},
    { SWIG_prefix "dCurvaMatrix_toDevice", (swig_wrapper_func) _wrap_dCurvaMatrix_toDevice, NULL},
    { SWIG_prefix "dCurvaMatrix_toHost", (swig_wrapper_func) _wrap_dCurvaMatrix_toHost, NULL},
    { SWIG_prefix "dCurvaMatrix_m", (swig_wrapper_func) _wrap_dCurvaMatrix_m, NULL},
    { SWIG_prefix "dCurvaMatrix_n", (swig_wrapper_func) _wrap_dCurvaMatrix_n, NULL},
    { SWIG_prefix "dCurvaMatrix_bytes", (swig_wrapper_func) _wrap_dCurvaMatrix_bytes, NULL},
    { SWIG_prefix "dCurvaMatrix_rowIndicesBegin", (swig_wrapper_func) _wrap_dCurvaMatrix_rowIndicesBegin, NULL},
    { SWIG_prefix "dCurvaMatrix_rowIndicesEnd", (swig_wrapper_func) _wrap_dCurvaMatrix_rowIndicesEnd, NULL},
    { SWIG_prefix "dCurvaMatrix_save", (swig_wrapper_func) _wrap_dCurvaMatrix_save, NULL},
    { SWIG_prefix "dCurvaMatrix_load", (swig_wrapper_func) _wrap_dCurvaMatrix_load, NULL},
    { SWIG_prefix "dCurvaMatrix_copy", (swig_wrapper_func) _wrap_dCurvaMatrix_copy, NULL},
    { SWIG_prefix "dCurvaMatrix_copyDevice", (swig_wrapper_func) _wrap_dCurvaMatrix_copyDevice, NULL},
    { SWIG_prefix "dCurvaMatrix_init", (swig_wrapper_func) _wrap_dCurvaMatrix_init, NULL},
    { SWIG_prefix "dCurvaMatrix_list", (swig_wrapper_func) _wrap_dCurvaMatrix_list, NULL},
    { SWIG_prefix "dCurvaMatrix", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_CurvaMatrix_Sl_double_Sg_},
    { SWIG_prefix "new_iCurvaMatrix", (swig_wrapper_func) _wrap_new_iCurvaMatrix, NULL},
    { SWIG_prefix "delete_iCurvaMatrix", (swig_wrapper_func) _wrap_delete_iCurvaMatrix, NULL},
    { SWIG_prefix "iCurvaMatrix_transposeHost", (swig_wrapper_func) _wrap_iCurvaMatrix_transposeHost, NULL},
    { SWIG_prefix "iCurvaMatrix_transpose", (swig_wrapper_func) _wrap_iCurvaMatrix_transpose, NULL},
    { SWIG_prefix "iCurvaMatrix_transposeDevice", (swig_wrapper_func) _wrap_iCurvaMatrix_transposeDevice, NULL},
    { SWIG_prefix "iCurvaMatrix_allocate", (swig_wrapper_func) _wrap_iCurvaMatrix_allocate, NULL},
    { SWIG_prefix "iCurvaMatrix_deallocate", (swig_wrapper_func) _wrap_iCurvaMatrix_deallocate, NULL},
    { SWIG_prefix "iCurvaMatrix_device", (swig_wrapper_func) _wrap_iCurvaMatrix_device, NULL},
    { SWIG_prefix "iCurvaMatrix_host", (swig_wrapper_func) _wrap_iCurvaMatrix_host, NULL},
    { SWIG_prefix "iCurvaMatrix_toDevice", (swig_wrapper_func) _wrap_iCurvaMatrix_toDevice, NULL},
    { SWIG_prefix "iCurvaMatrix_toHost", (swig_wrapper_func) _wrap_iCurvaMatrix_toHost, NULL},
    { SWIG_prefix "iCurvaMatrix_m", (swig_wrapper_func) _wrap_iCurvaMatrix_m, NULL},
    { SWIG_prefix "iCurvaMatrix_n", (swig_wrapper_func) _wrap_iCurvaMatrix_n, NULL},
    { SWIG_prefix "iCurvaMatrix_bytes", (swig_wrapper_func) _wrap_iCurvaMatrix_bytes, NULL},
    { SWIG_prefix "iCurvaMatrix_rowIndicesBegin", (swig_wrapper_func) _wrap_iCurvaMatrix_rowIndicesBegin, NULL},
    { SWIG_prefix "iCurvaMatrix_rowIndicesEnd", (swig_wrapper_func) _wrap_iCurvaMatrix_rowIndicesEnd, NULL},
    { SWIG_prefix "iCurvaMatrix_save", (swig_wrapper_func) _wrap_iCurvaMatrix_save, NULL},
    { SWIG_prefix "iCurvaMatrix_load", (swig_wrapper_func) _wrap_iCurvaMatrix_load, NULL},
    { SWIG_prefix "iCurvaMatrix_copy", (swig_wrapper_func) _wrap_iCurvaMatrix_copy, NULL},
    { SWIG_prefix "iCurvaMatrix_copyDevice", (swig_wrapper_func) _wrap_iCurvaMatrix_copyDevice, NULL},
    { SWIG_prefix "iCurvaMatrix_init", (swig_wrapper_func) _wrap_iCurvaMatrix_init, NULL},
    { SWIG_prefix "iCurvaMatrix_list", (swig_wrapper_func) _wrap_iCurvaMatrix_list, NULL},
    { SWIG_prefix "iCurvaMatrix", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_CurvaMatrix_Sl_int_Sg_},
    {0, 0, 0}
};

static swig_var_info swig_variables[] = {
    {0,0,0,0}
};

static swig_const_info swig_constants[] = {
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_Atom = {"_p_Atom", "Atom *", 0, 0, (void*)&_wrap_class_Atom, 0};
static swig_type_info _swigt__p_Atoms = {"_p_Atoms", "Atoms *", 0, 0, (void*)&_wrap_class_Atoms, 0};
static swig_type_info _swigt__p_Coordinates = {"_p_Coordinates", "Coordinates *", 0, 0, (void*)&_wrap_class_Coordinates, 0};
static swig_type_info _swigt__p_CurvaMatrixT_double_t = {"_p_CurvaMatrixT_double_t", "CurvaMatrix< double > *", 0, 0, (void*)&_wrap_class_CurvaMatrix_Sl_double_Sg_, 0};
static swig_type_info _swigt__p_CurvaMatrixT_int_t = {"_p_CurvaMatrixT_int_t", "CurvaMatrix< int > *", 0, 0, (void*)&_wrap_class_CurvaMatrix_Sl_int_Sg_, 0};
static swig_type_info _swigt__p_CurvaVectorT_double_t = {"_p_CurvaVectorT_double_t", "CurvaVector< double > *", 0, 0, (void*)&_wrap_class_CurvaVector_Sl_double_Sg_, 0};
static swig_type_info _swigt__p_CurvaVectorT_int_t = {"_p_CurvaVectorT_int_t", "CurvaVector< int > *", 0, 0, (void*)&_wrap_class_CurvaVector_Sl_int_Sg_, 0};
static swig_type_info _swigt__p_MolecularDynamicsCalculation = {"_p_MolecularDynamicsCalculation", "MolecularDynamicsCalculation *", 0, 0, (void*)&_wrap_class_MolecularDynamicsCalculation, 0};
static swig_type_info _swigt__p_Node = {"_p_Node", "Node *", 0, 0, (void*)&_wrap_class_Node, 0};
static swig_type_info _swigt__p_Nodes = {"_p_Nodes", "Nodes *", 0, 0, (void*)&_wrap_class_Nodes, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_nlohmann__json = {"_p_nlohmann__json", "nlohmann::json *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_double = {"_p_p_double", "double **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_int = {"_p_p_int", "int **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_std__vectorT_Atom_t = {"_p_p_std__vectorT_Atom_t", "std::vector< Atom > **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_std__vectorT_CurvaVectorT_double_t_t = {"_p_p_std__vectorT_CurvaVectorT_double_t_t", "std::vector< CurvaVector< double > > **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_std__vectorT_CurvaVectorT_int_t_t = {"_p_p_std__vectorT_CurvaVectorT_int_t_t", "std::vector< CurvaVector< int > > **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_std__vectorT_Node_t = {"_p_p_std__vectorT_Node_t", "std::vector< Node > **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_std__vectorT_std__vectorT_double_t_t = {"_p_p_std__vectorT_std__vectorT_double_t_t", "std::vector< std::vector< double > > **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__out_of_range = {"_p_std__out_of_range", "std::out_of_range *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Atom_t = {"_p_std__vectorT_Atom_t", "std::vector< Atom > *", 0, 0, (void*)&_wrap_class_std_vector_Sl_Atom_Sg_, 0};
static swig_type_info _swigt__p_std__vectorT_CurvaVectorT_double_t_t = {"_p_std__vectorT_CurvaVectorT_double_t_t", "std::vector< CurvaVector< double > > *", 0, 0, (void*)&_wrap_class_std_vector_Sl_CurvaVector_Sl_double_Sg__Sg_, 0};
static swig_type_info _swigt__p_std__vectorT_CurvaVectorT_int_t_t = {"_p_std__vectorT_CurvaVectorT_int_t_t", "std::vector< CurvaVector< int > > *", 0, 0, (void*)&_wrap_class_std_vector_Sl_CurvaVector_Sl_int_Sg__Sg_, 0};
static swig_type_info _swigt__p_std__vectorT_Node_t = {"_p_std__vectorT_Node_t", "std::vector< Node > *", 0, 0, (void*)&_wrap_class_std_vector_Sl_Node_Sg_, 0};
static swig_type_info _swigt__p_std__vectorT_double_t = {"_p_std__vectorT_double_t", "std::vector< double > *", 0, 0, (void*)&_wrap_class_std_vector_Sl_double_Sg_, 0};
static swig_type_info _swigt__p_std__vectorT_int_t = {"_p_std__vectorT_int_t", "std::vector< int > *", 0, 0, (void*)&_wrap_class_std_vector_Sl_int_Sg_, 0};
static swig_type_info _swigt__p_std__vectorT_int_t__iterator = {"_p_std__vectorT_int_t__iterator", "std::vector< int >::iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_double_t_t = {"_p_std__vectorT_std__vectorT_double_t_t", "std::vector< std::vector< double > > *", 0, 0, (void*)&_wrap_class_std_vector_Sl_std_vector_Sl_double_Sg__Sg_, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__std__ptrdiff_t = {"_std__ptrdiff_t", "std::ptrdiff_t", 0, 0, (void*)0, 0};
static swig_type_info _swigt__std__size_t = {"_std__size_t", "std::size_t", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Atom,
  &_swigt__p_Atoms,
  &_swigt__p_Coordinates,
  &_swigt__p_CurvaMatrixT_double_t,
  &_swigt__p_CurvaMatrixT_int_t,
  &_swigt__p_CurvaVectorT_double_t,
  &_swigt__p_CurvaVectorT_int_t,
  &_swigt__p_MolecularDynamicsCalculation,
  &_swigt__p_Node,
  &_swigt__p_Nodes,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_int,
  &_swigt__p_nlohmann__json,
  &_swigt__p_p_double,
  &_swigt__p_p_int,
  &_swigt__p_p_std__vectorT_Atom_t,
  &_swigt__p_p_std__vectorT_CurvaVectorT_double_t_t,
  &_swigt__p_p_std__vectorT_CurvaVectorT_int_t_t,
  &_swigt__p_p_std__vectorT_Node_t,
  &_swigt__p_p_std__vectorT_std__vectorT_double_t_t,
  &_swigt__p_size_type,
  &_swigt__p_std__out_of_range,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_Atom_t,
  &_swigt__p_std__vectorT_CurvaVectorT_double_t_t,
  &_swigt__p_std__vectorT_CurvaVectorT_int_t_t,
  &_swigt__p_std__vectorT_Node_t,
  &_swigt__p_std__vectorT_double_t,
  &_swigt__p_std__vectorT_int_t,
  &_swigt__p_std__vectorT_int_t__iterator,
  &_swigt__p_std__vectorT_std__vectorT_double_t_t,
  &_swigt__p_value_type,
  &_swigt__std__ptrdiff_t,
  &_swigt__std__size_t,
};

static swig_cast_info _swigc__p_Atom[] = {  {&_swigt__p_Atom, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Atoms[] = {  {&_swigt__p_Atoms, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Coordinates[] = {  {&_swigt__p_Coordinates, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CurvaMatrixT_double_t[] = {  {&_swigt__p_CurvaMatrixT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CurvaMatrixT_int_t[] = {  {&_swigt__p_CurvaMatrixT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CurvaVectorT_double_t[] = {  {&_swigt__p_CurvaVectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CurvaVectorT_int_t[] = {  {&_swigt__p_CurvaVectorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MolecularDynamicsCalculation[] = {  {&_swigt__p_MolecularDynamicsCalculation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Node[] = {  {&_swigt__p_Node, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Nodes[] = {  {&_swigt__p_Nodes, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_nlohmann__json[] = {  {&_swigt__p_nlohmann__json, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_double[] = {  {&_swigt__p_p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_int[] = {  {&_swigt__p_p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_std__vectorT_Atom_t[] = {  {&_swigt__p_p_std__vectorT_Atom_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_std__vectorT_CurvaVectorT_double_t_t[] = {  {&_swigt__p_p_std__vectorT_CurvaVectorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_std__vectorT_CurvaVectorT_int_t_t[] = {  {&_swigt__p_p_std__vectorT_CurvaVectorT_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_std__vectorT_Node_t[] = {  {&_swigt__p_p_std__vectorT_Node_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_std__vectorT_std__vectorT_double_t_t[] = {  {&_swigt__p_p_std__vectorT_std__vectorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__out_of_range[] = {  {&_swigt__p_std__out_of_range, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Atom_t[] = {  {&_swigt__p_std__vectorT_Atom_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_CurvaVectorT_double_t_t[] = {  {&_swigt__p_std__vectorT_CurvaVectorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_CurvaVectorT_int_t_t[] = {  {&_swigt__p_std__vectorT_CurvaVectorT_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Node_t[] = {  {&_swigt__p_std__vectorT_Node_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_t[] = {  {&_swigt__p_std__vectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_t[] = {  {&_swigt__p_std__vectorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_t__iterator[] = {  {&_swigt__p_std__vectorT_int_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_double_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__std__ptrdiff_t[] = {  {&_swigt__std__ptrdiff_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__std__size_t[] = {  {&_swigt__std__size_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Atom,
  _swigc__p_Atoms,
  _swigc__p_Coordinates,
  _swigc__p_CurvaMatrixT_double_t,
  _swigc__p_CurvaMatrixT_int_t,
  _swigc__p_CurvaVectorT_double_t,
  _swigc__p_CurvaVectorT_int_t,
  _swigc__p_MolecularDynamicsCalculation,
  _swigc__p_Node,
  _swigc__p_Nodes,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_int,
  _swigc__p_nlohmann__json,
  _swigc__p_p_double,
  _swigc__p_p_int,
  _swigc__p_p_std__vectorT_Atom_t,
  _swigc__p_p_std__vectorT_CurvaVectorT_double_t_t,
  _swigc__p_p_std__vectorT_CurvaVectorT_int_t_t,
  _swigc__p_p_std__vectorT_Node_t,
  _swigc__p_p_std__vectorT_std__vectorT_double_t_t,
  _swigc__p_size_type,
  _swigc__p_std__out_of_range,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_Atom_t,
  _swigc__p_std__vectorT_CurvaVectorT_double_t_t,
  _swigc__p_std__vectorT_CurvaVectorT_int_t_t,
  _swigc__p_std__vectorT_Node_t,
  _swigc__p_std__vectorT_double_t,
  _swigc__p_std__vectorT_int_t,
  _swigc__p_std__vectorT_int_t__iterator,
  _swigc__p_std__vectorT_std__vectorT_double_t_t,
  _swigc__p_value_type,
  _swigc__std__ptrdiff_t,
  _swigc__std__size_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif


#ifdef __cplusplus
extern "C" {
#endif
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  
  SWIGINTERN void
  SWIG_Tcl_InstallConstants(Tcl_Interp *interp, swig_const_info constants[]) {
    size_t i;
    Tcl_Obj *obj;
    
    if (!swigconstTableinit) {
      Tcl_InitHashTable(&swigconstTable, TCL_STRING_KEYS);
      swigconstTableinit = 1;
    }
    for (i = 0; constants[i].type; i++) {
      switch(constants[i].type) {
      case SWIG_TCL_POINTER:
        obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_TCL_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        SWIG_Tcl_SetConstantObj(interp, constants[i].name, obj);
      }
    }
  }
  
  /* Create fast method lookup tables */
  
  SWIGINTERN void
  SWIG_Tcl_InstallMethodLookupTables(void) {
    size_t i;
    
    for (i = 0; i < swig_module.size; ++i) {
      swig_type_info *type = swig_module.type_initial[i];
      if (type->clientdata) {
        swig_class* klass = (swig_class*) type->clientdata;
        swig_method* meth;
        Tcl_InitHashTable(&(klass->hashtable), TCL_STRING_KEYS);
        for (meth = klass->methods; meth && meth->name; ++meth) {
          int newEntry;
          Tcl_HashEntry* hashentry = Tcl_CreateHashEntry(&(klass->hashtable), meth->name, &newEntry);
          Tcl_SetHashValue(hashentry, (ClientData)meth->method);
        }
      }
    }
  }
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

SWIGEXPORT int SWIG_init(Tcl_Interp *interp) {
  size_t i;
  if (interp == 0) return TCL_ERROR;
#ifdef USE_TCL_STUBS
  /* (char*) cast is required to avoid compiler warning/error for Tcl < 8.4. */
  if (Tcl_InitStubs(interp, (char*)SWIG_TCL_STUBS_VERSION, 0) == NULL) {
    return TCL_ERROR;
  }
#endif  
#ifdef USE_TK_STUBS
  /* (char*) cast is required to avoid compiler warning/error. */
  if (Tk_InitStubs(interp, (char*)SWIG_TCL_STUBS_VERSION, 0) == NULL) {
    return TCL_ERROR;
  }
#endif
  
  Tcl_PkgProvide(interp, (char*)SWIG_name, (char*)SWIG_version);
  
#ifdef SWIG_namespace
  Tcl_Eval(interp, "namespace eval " SWIG_namespace " { }");
#endif
  
  SWIG_InitializeModule((void *) interp);
  SWIG_PropagateClientData();
  
  for (i = 0; swig_commands[i].name; i++) {
    Tcl_CreateObjCommand(interp, (char *) swig_commands[i].name, (swig_wrapper_func) swig_commands[i].wrapper,
      swig_commands[i].clientdata, NULL);
  }
  for (i = 0; swig_variables[i].name; i++) {
    Tcl_SetVar(interp, (char *) swig_variables[i].name, (char *) "", TCL_GLOBAL_ONLY);
    Tcl_TraceVar(interp, (char *) swig_variables[i].name, TCL_TRACE_READS | TCL_GLOBAL_ONLY, 
      (Tcl_VarTraceProc *) swig_variables[i].get, (ClientData) swig_variables[i].addr);
    Tcl_TraceVar(interp, (char *) swig_variables[i].name, TCL_TRACE_WRITES | TCL_GLOBAL_ONLY, 
      (Tcl_VarTraceProc *) swig_variables[i].set, (ClientData) swig_variables[i].addr);
  }
  
  SWIG_Tcl_InstallConstants(interp, swig_constants);
  SWIG_Tcl_InstallMethodLookupTables();
  
  
  return TCL_OK;
}
SWIGEXPORT int Tclcurva_SafeInit(Tcl_Interp *interp) {
  return SWIG_init(interp);
}

